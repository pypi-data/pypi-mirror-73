name: mlchain-server # name of service
entry_file: server.py # python file contains object ServeModel
host: localhost # host service
port: 2222 # port service
server: flask # option flask or quart or grpc
wrapper: None # option None or gunicorn or hypercorn
cors: true
dump_request: None # None or path folder log request
version: '1.0.0'
api_keys: None
#  - key1
#  - key2
clients:
  onmt:
    api_address: 'http://localhost:4000'
    check_status: true
    api_keys: 'apikey'
    serializer: 'json'
    type: 'http'
artifact: # Config to use mlchain artifact pull/push names...
  - url: 'http://localhost:9000'  # if None use info object storage
    access_key: minioKey    # if None use info object storage
    secret_key: minioSecret   # if None use info object storage
    bucket: mlchain-model # if None use info object storage
    mapping:
      - remote: 'models/model.pb'  # key object_storage
        local: 'models/model.pb'   # path local
        type: 'file'            # file or folder
        name: 'name'            # name of mapping
gunicorn: # config apm-server if uses gunicorn wrapper
  timeout: 60
  keepalive: 60
  max_requests: 0
  threads: 1
  worker_class: 'gthread'
  umask: '0'
hypercorn: # config apm-server if uses hypercorn wrapper
  keep_alive_timeout: 60
  worker_class: 'asyncio'
  umask: 0

# change minio to object_storage
object_storage: # config minio if uses queue
  provider: minio # AWS, GCS, OSS, DG, Linode, Vutr, OpenStack, vv
  url: 'http://localhost:9000' # if None read from environ OBJECT_STORAGE_URL
  access_key: minioKey # if None read from environ OBJECT_STORAGE_ACCESS_KEY
  secret_key: minioSecret # if None read from environ OBJECT_STORAGE_SECRET_KEY
  bucket: mlchain-storage # if None read from environ OBJECT_STORAGE_BUCKET

mode:
  default: dev  # running mode
  env:   # set of mode env
    default: {}   # environ default
    dev: {} # environ by mode
    prod: {} # environ by mode
