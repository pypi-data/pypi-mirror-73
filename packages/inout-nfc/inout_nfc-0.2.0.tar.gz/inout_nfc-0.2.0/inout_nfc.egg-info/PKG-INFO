Metadata-Version: 2.1
Name: inout-nfc
Version: 0.2.0
Summary: NFC interface for InOut
Home-page: https://github.com/brammeleman/inout_nfc
Author: Bram Daams
Author-email: b.daams@science.ru.nl
License: GNU General Public License v3
Description: # inout-nfc
        
        ## Scan
        ```
        Usage: inout_nfc scan [OPTIONS]
        
          Listen for chip cards to be scanned with an nfc reader/writer and make an
          API call to InOut for each detected chip-id.
        
        Options:
          --usb_port [ul|bl|ur|br]  USB port the NFC reader is connected to.
          --api_url TEXT            InOut API url.  [required]
          --api_key TEXT            InOut API key.
          --scanner TEXT            Unique scanner name, ie: "reception1".  [required]
          --help                    Show this message and exit.
        ```
        ## ACR122 nfc reader/writer
        The ACR122 nfc reader/writer doesn't expose a serial number to the USB
        interface. When connecting multiple card readers to a single Raspberry Pi, it's
        not trivial to find out the USB addres for a specific reader.
        
        ```
        $ lsusb 
        Bus 001 Device 013: ID 072f:2200 Advanced Card Systems, Ltd ACR122U
        Bus 001 Device 004: ID 0424:7800 Standard Microsystems Corp. 
        Bus 001 Device 003: ID 0424:2514 Standard Microsystems Corp. USB 2.0 Hub
        Bus 001 Device 002: ID 0424:2514 Standard Microsystems Corp. USB 2.0 Hub
        Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
        ```
        
        This ACR122 got USB device `001:013` assigned. This number will increase by just
        pluggin out and in the USB device.
        ```
        $ lsusb |grep 072f
        Bus 001 Device 014: ID 072f:2200 Advanced Card Systems, Ltd ACR122U
        ```
        
        You can trace the USB path with the `udevadm` command:
        ```
        $ udevadm info -q name /sys/bus/usb/devices/1-1.3
        bus/usb/001/014
        ```
        
        The `nfcpy` module allows different ways to specify a usb reader device:
        ```
        assert clf.open('usb:003:009') is True    # open device 9 on bus 3
        >>> assert clf.open('usb:054c:02e1') is True  # open first PaSoRi 330
        >>> assert clf.open('usb:003') is True        # open first Reader on bus 3
        >>> assert clf.open('usb:054c') is True       # open first Sony Reader
        >>> assert clf.open('usb') is True            # open first USB Reader
        ```
        
        Since I'll be using Raspberry Pi's for this application, I decided to use the
        physical USB path to address the nfc reader.
        
        This is the layout for a Raspberry Pi 3B+:
        ```
          +--------+
          | ether- |   [ 1-1.1.2 ]   [   1-1.3 ]
          |   net  |   [ 1-1.1.3 ]   [   1-1.2 ]
          +--------+ 
        ===========================================
        ```
        
        This is slightly different for a Pi 2.
        
        Below codes are used to assign a usb nfc card reader to a physical usb port:
        ```
          +--------+
          | ether- |   [ tl ]   [   tr ]
          |   net  |   [ bl ]   [   br ]
          +--------+ 
        ===========================================
        ```
        
        An example of the command line for a scanner process with a usb nfc card reader
        connected to the top left usb port looks like:
        ```
        inout_nfc scan --usb-port tl --scanner reception1 --api_url https://inout.example.com --api_key MYSECRETKEY
        ```
        
        
        
Keywords: inout_nfc
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.5
Description-Content-Type: text/markdown
