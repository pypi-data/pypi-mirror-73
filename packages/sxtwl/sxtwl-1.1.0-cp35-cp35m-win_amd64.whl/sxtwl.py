# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sxtwl
else:
    import _sxtwl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sxtwl.delete_SwigPyIterator

    def value(self):
        return _sxtwl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sxtwl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sxtwl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sxtwl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sxtwl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sxtwl.SwigPyIterator_copy(self)

    def next(self):
        return _sxtwl.SwigPyIterator_next(self)

    def __next__(self):
        return _sxtwl.SwigPyIterator___next__(self)

    def previous(self):
        return _sxtwl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sxtwl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sxtwl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sxtwl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sxtwl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sxtwl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sxtwl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sxtwl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sxtwl:
_sxtwl.SwigPyIterator_swigregister(SwigPyIterator)

class DayList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sxtwl.DayList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sxtwl.DayList___nonzero__(self)

    def __bool__(self):
        return _sxtwl.DayList___bool__(self)

    def __len__(self):
        return _sxtwl.DayList___len__(self)

    def __getslice__(self, i, j):
        return _sxtwl.DayList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sxtwl.DayList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sxtwl.DayList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sxtwl.DayList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sxtwl.DayList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sxtwl.DayList___setitem__(self, *args)

    def pop(self):
        return _sxtwl.DayList_pop(self)

    def append(self, x):
        return _sxtwl.DayList_append(self, x)

    def empty(self):
        return _sxtwl.DayList_empty(self)

    def size(self):
        return _sxtwl.DayList_size(self)

    def swap(self, v):
        return _sxtwl.DayList_swap(self, v)

    def begin(self):
        return _sxtwl.DayList_begin(self)

    def end(self):
        return _sxtwl.DayList_end(self)

    def rbegin(self):
        return _sxtwl.DayList_rbegin(self)

    def rend(self):
        return _sxtwl.DayList_rend(self)

    def clear(self):
        return _sxtwl.DayList_clear(self)

    def get_allocator(self):
        return _sxtwl.DayList_get_allocator(self)

    def pop_back(self):
        return _sxtwl.DayList_pop_back(self)

    def erase(self, *args):
        return _sxtwl.DayList_erase(self, *args)

    def __init__(self, *args):
        _sxtwl.DayList_swiginit(self, _sxtwl.new_DayList(*args))

    def push_back(self, x):
        return _sxtwl.DayList_push_back(self, x)

    def front(self):
        return _sxtwl.DayList_front(self)

    def back(self):
        return _sxtwl.DayList_back(self)

    def assign(self, n, x):
        return _sxtwl.DayList_assign(self, n, x)

    def resize(self, *args):
        return _sxtwl.DayList_resize(self, *args)

    def insert(self, *args):
        return _sxtwl.DayList_insert(self, *args)

    def reserve(self, n):
        return _sxtwl.DayList_reserve(self, n)

    def capacity(self):
        return _sxtwl.DayList_capacity(self)
    __swig_destroy__ = _sxtwl.delete_DayList

# Register DayList in _sxtwl:
_sxtwl.DayList_swigregister(DayList)

class DoubleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sxtwl.DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sxtwl.DoubleList___nonzero__(self)

    def __bool__(self):
        return _sxtwl.DoubleList___bool__(self)

    def __len__(self):
        return _sxtwl.DoubleList___len__(self)

    def __getslice__(self, i, j):
        return _sxtwl.DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sxtwl.DoubleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sxtwl.DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sxtwl.DoubleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sxtwl.DoubleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sxtwl.DoubleList___setitem__(self, *args)

    def pop(self):
        return _sxtwl.DoubleList_pop(self)

    def append(self, x):
        return _sxtwl.DoubleList_append(self, x)

    def empty(self):
        return _sxtwl.DoubleList_empty(self)

    def size(self):
        return _sxtwl.DoubleList_size(self)

    def swap(self, v):
        return _sxtwl.DoubleList_swap(self, v)

    def begin(self):
        return _sxtwl.DoubleList_begin(self)

    def end(self):
        return _sxtwl.DoubleList_end(self)

    def rbegin(self):
        return _sxtwl.DoubleList_rbegin(self)

    def rend(self):
        return _sxtwl.DoubleList_rend(self)

    def clear(self):
        return _sxtwl.DoubleList_clear(self)

    def get_allocator(self):
        return _sxtwl.DoubleList_get_allocator(self)

    def pop_back(self):
        return _sxtwl.DoubleList_pop_back(self)

    def erase(self, *args):
        return _sxtwl.DoubleList_erase(self, *args)

    def __init__(self, *args):
        _sxtwl.DoubleList_swiginit(self, _sxtwl.new_DoubleList(*args))

    def push_back(self, x):
        return _sxtwl.DoubleList_push_back(self, x)

    def front(self):
        return _sxtwl.DoubleList_front(self)

    def back(self):
        return _sxtwl.DoubleList_back(self)

    def assign(self, n, x):
        return _sxtwl.DoubleList_assign(self, n, x)

    def resize(self, *args):
        return _sxtwl.DoubleList_resize(self, *args)

    def insert(self, *args):
        return _sxtwl.DoubleList_insert(self, *args)

    def reserve(self, n):
        return _sxtwl.DoubleList_reserve(self, n)

    def capacity(self):
        return _sxtwl.DoubleList_capacity(self)
    __swig_destroy__ = _sxtwl.delete_DoubleList

# Register DoubleList in _sxtwl:
_sxtwl.DoubleList_swigregister(DoubleList)

J2000 = _sxtwl.J2000
class GZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sxtwl.GZ_swiginit(self, _sxtwl.new_GZ(*args))
    tg = property(_sxtwl.GZ_tg_get, _sxtwl.GZ_tg_set)
    dz = property(_sxtwl.GZ_dz_get, _sxtwl.GZ_dz_set)
    __swig_destroy__ = _sxtwl.delete_GZ

# Register GZ in _sxtwl:
_sxtwl.GZ_swigregister(GZ)

class Day(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d0 = property(_sxtwl.Day_d0_get, _sxtwl.Day_d0_set)
    di = property(_sxtwl.Day_di_get, _sxtwl.Day_di_set)
    y = property(_sxtwl.Day_y_get, _sxtwl.Day_y_set)
    m = property(_sxtwl.Day_m_get, _sxtwl.Day_m_set)
    d = property(_sxtwl.Day_d_get, _sxtwl.Day_d_set)
    dn = property(_sxtwl.Day_dn_get, _sxtwl.Day_dn_set)
    week0 = property(_sxtwl.Day_week0_get, _sxtwl.Day_week0_set)
    week = property(_sxtwl.Day_week_get, _sxtwl.Day_week_set)
    weeki = property(_sxtwl.Day_weeki_get, _sxtwl.Day_weeki_set)
    weekN = property(_sxtwl.Day_weekN_get, _sxtwl.Day_weekN_set)
    Ldi = property(_sxtwl.Day_Ldi_get, _sxtwl.Day_Ldi_set)
    cur_dz = property(_sxtwl.Day_cur_dz_get, _sxtwl.Day_cur_dz_set)
    cur_xz = property(_sxtwl.Day_cur_xz_get, _sxtwl.Day_cur_xz_set)
    cur_lq = property(_sxtwl.Day_cur_lq_get, _sxtwl.Day_cur_lq_set)
    cur_mz = property(_sxtwl.Day_cur_mz_get, _sxtwl.Day_cur_mz_set)
    cur_xs = property(_sxtwl.Day_cur_xs_get, _sxtwl.Day_cur_xs_set)
    cur_jq = property(_sxtwl.Day_cur_jq_get, _sxtwl.Day_cur_jq_set)
    cur_cn = property(_sxtwl.Day_cur_cn_get, _sxtwl.Day_cur_cn_set)
    Lmc = property(_sxtwl.Day_Lmc_get, _sxtwl.Day_Lmc_set)
    Ldn = property(_sxtwl.Day_Ldn_get, _sxtwl.Day_Ldn_set)
    Lleap = property(_sxtwl.Day_Lleap_get, _sxtwl.Day_Lleap_set)
    Lmc2 = property(_sxtwl.Day_Lmc2_get, _sxtwl.Day_Lmc2_set)
    qk = property(_sxtwl.Day_qk_get, _sxtwl.Day_qk_set)
    Lyear = property(_sxtwl.Day_Lyear_get, _sxtwl.Day_Lyear_set)
    Lyear0 = property(_sxtwl.Day_Lyear0_get, _sxtwl.Day_Lyear0_set)
    Lyear2 = property(_sxtwl.Day_Lyear2_get, _sxtwl.Day_Lyear2_set)
    Lyear3 = property(_sxtwl.Day_Lyear3_get, _sxtwl.Day_Lyear3_set)
    Lyear4 = property(_sxtwl.Day_Lyear4_get, _sxtwl.Day_Lyear4_set)
    Lmonth = property(_sxtwl.Day_Lmonth_get, _sxtwl.Day_Lmonth_set)
    Lmonth2 = property(_sxtwl.Day_Lmonth2_get, _sxtwl.Day_Lmonth2_set)
    Lday2 = property(_sxtwl.Day_Lday2_get, _sxtwl.Day_Lday2_set)
    XiZ = property(_sxtwl.Day_XiZ_get, _sxtwl.Day_XiZ_set)
    jqmc = property(_sxtwl.Day_jqmc_get, _sxtwl.Day_jqmc_set)
    jqjd = property(_sxtwl.Day_jqjd_get, _sxtwl.Day_jqjd_set)
    jqsj = property(_sxtwl.Day_jqsj_get, _sxtwl.Day_jqsj_set)
    yxmc = property(_sxtwl.Day_yxmc_get, _sxtwl.Day_yxmc_set)
    yxjd = property(_sxtwl.Day_yxjd_get, _sxtwl.Day_yxjd_set)
    yxsj = property(_sxtwl.Day_yxsj_get, _sxtwl.Day_yxsj_set)

    def __init__(self):
        _sxtwl.Day_swiginit(self, _sxtwl.new_Day())
    __swig_destroy__ = _sxtwl.delete_Day

# Register Day in _sxtwl:
_sxtwl.Day_swigregister(Day)

class Month(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_sxtwl.Month_y_get, _sxtwl.Month_y_set)
    m = property(_sxtwl.Month_m_get, _sxtwl.Month_m_set)
    ShX = property(_sxtwl.Month_ShX_get, _sxtwl.Month_ShX_set)
    yearGan = property(_sxtwl.Month_yearGan_get, _sxtwl.Month_yearGan_set)
    yearZhi = property(_sxtwl.Month_yearZhi_get, _sxtwl.Month_yearZhi_set)
    days = property(_sxtwl.Month_days_get, _sxtwl.Month_days_set)

    def __init__(self):
        _sxtwl.Month_swiginit(self, _sxtwl.new_Month())
    __swig_destroy__ = _sxtwl.delete_Month

# Register Month in _sxtwl:
_sxtwl.Month_swigregister(Month)

class Year(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_sxtwl.Year_y_get, _sxtwl.Year_y_set)
    ShX = property(_sxtwl.Year_ShX_get, _sxtwl.Year_ShX_set)
    yearGan = property(_sxtwl.Year_yearGan_get, _sxtwl.Year_yearGan_set)
    yearZhi = property(_sxtwl.Year_yearZhi_get, _sxtwl.Year_yearZhi_set)

    def __init__(self):
        _sxtwl.Year_swiginit(self, _sxtwl.new_Year())
    __swig_destroy__ = _sxtwl.delete_Year

# Register Year in _sxtwl:
_sxtwl.Year_swigregister(Year)

ErrorCode_Success = _sxtwl.ErrorCode_Success
ErrorCode_NotRun = _sxtwl.ErrorCode_NotRun
ErrorCode_DateError = _sxtwl.ErrorCode_DateError
class LunarException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, code):
        _sxtwl.LunarException_swiginit(self, _sxtwl.new_LunarException(code))

    def what(self):
        return _sxtwl.LunarException_what(self)

    def getErrorCode(self):
        return _sxtwl.LunarException_getErrorCode(self)
    __swig_destroy__ = _sxtwl.delete_LunarException

# Register LunarException in _sxtwl:
_sxtwl.LunarException_swigregister(LunarException)

class Lunar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def yueLiCalc(self, By, Bm):
        return _sxtwl.Lunar_yueLiCalc(self, By, Bm)

    def getDayBySolar(self, year, month, day):
        return _sxtwl.Lunar_getDayBySolar(self, year, month, day)

    def getDayByLunar(self, year, month, day, isRun=False):
        return _sxtwl.Lunar_getDayByLunar(self, year, month, day, isRun)

    def siZhu2Year(self, year, yue, ri, shi, fromYear, toYear):
        return _sxtwl.Lunar_siZhu2Year(self, year, yue, ri, shi, fromYear, toYear)

    def getShiGz(self, dayTg, hour):
        return _sxtwl.Lunar_getShiGz(self, dayTg, hour)

    def getYearCal(self, By):
        return _sxtwl.Lunar_getYearCal(self, By)

    def getRunMonth(self, By):
        return _sxtwl.Lunar_getRunMonth(self, By)

    def getLunarMonthNum(self, By, month, isRun=False):
        return _sxtwl.Lunar_getLunarMonthNum(self, By, month, isRun)

    def __init__(self):
        _sxtwl.Lunar_swiginit(self, _sxtwl.new_Lunar())
    __swig_destroy__ = _sxtwl.delete_Lunar

# Register Lunar in _sxtwl:
_sxtwl.Lunar_swigregister(Lunar)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Y = property(_sxtwl.Time_Y_get, _sxtwl.Time_Y_set)
    M = property(_sxtwl.Time_M_get, _sxtwl.Time_M_set)
    D = property(_sxtwl.Time_D_get, _sxtwl.Time_D_set)
    h = property(_sxtwl.Time_h_get, _sxtwl.Time_h_set)
    m = property(_sxtwl.Time_m_get, _sxtwl.Time_m_set)
    s = property(_sxtwl.Time_s_get, _sxtwl.Time_s_set)

    def __init__(self):
        _sxtwl.Time_swiginit(self, _sxtwl.new_Time())
    __swig_destroy__ = _sxtwl.delete_Time

# Register Time in _sxtwl:
_sxtwl.Time_swigregister(Time)

class JD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def DD2JD(y, m, d):
        return _sxtwl.JD_DD2JD(y, m, d)

    @staticmethod
    def JD2DD(jd):
        return _sxtwl.JD_JD2DD(jd)

    @staticmethod
    def toJD(time):
        return _sxtwl.JD_toJD(time)

    @staticmethod
    def timeStr(jd):
        return _sxtwl.JD_timeStr(jd)

    def __init__(self):
        _sxtwl.JD_swiginit(self, _sxtwl.new_JD())
    __swig_destroy__ = _sxtwl.delete_JD

# Register JD in _sxtwl:
_sxtwl.JD_swigregister(JD)

def JD_DD2JD(y, m, d):
    return _sxtwl.JD_DD2JD(y, m, d)

def JD_JD2DD(jd):
    return _sxtwl.JD_JD2DD(jd)

def JD_toJD(time):
    return _sxtwl.JD_toJD(time)

def JD_timeStr(jd):
    return _sxtwl.JD_timeStr(jd)



