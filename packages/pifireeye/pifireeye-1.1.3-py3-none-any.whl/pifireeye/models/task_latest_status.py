# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskLatestStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slot': 'str',
        'confindence': 'float',
        'image_id': 'str',
        'judge': 'str'
    }

    attribute_map = {
        'slot': 'slot',
        'confindence': 'confindence',
        'image_id': 'image_id',
        'judge': 'Judge'
    }

    def __init__(self, slot=None, confindence=None, image_id=None, judge=None):  # noqa: E501
        """TaskLatestStatus - a model defined in Swagger"""  # noqa: E501

        self._slot = None
        self._confindence = None
        self._image_id = None
        self._judge = None
        self.discriminator = None

        if slot is not None:
            self.slot = slot
        if confindence is not None:
            self.confindence = confindence
        if image_id is not None:
            self.image_id = image_id
        if judge is not None:
            self.judge = judge

    @property
    def slot(self):
        """Gets the slot of this TaskLatestStatus.  # noqa: E501


        :return: The slot of this TaskLatestStatus.  # noqa: E501
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this TaskLatestStatus.


        :param slot: The slot of this TaskLatestStatus.  # noqa: E501
        :type: str
        """

        self._slot = slot

    @property
    def confindence(self):
        """Gets the confindence of this TaskLatestStatus.  # noqa: E501


        :return: The confindence of this TaskLatestStatus.  # noqa: E501
        :rtype: float
        """
        return self._confindence

    @confindence.setter
    def confindence(self, confindence):
        """Sets the confindence of this TaskLatestStatus.


        :param confindence: The confindence of this TaskLatestStatus.  # noqa: E501
        :type: float
        """

        self._confindence = confindence

    @property
    def image_id(self):
        """Gets the image_id of this TaskLatestStatus.  # noqa: E501


        :return: The image_id of this TaskLatestStatus.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this TaskLatestStatus.


        :param image_id: The image_id of this TaskLatestStatus.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def judge(self):
        """Gets the judge of this TaskLatestStatus.  # noqa: E501


        :return: The judge of this TaskLatestStatus.  # noqa: E501
        :rtype: str
        """
        return self._judge

    @judge.setter
    def judge(self, judge):
        """Sets the judge of this TaskLatestStatus.


        :param judge: The judge of this TaskLatestStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["good", "bad"]  # noqa: E501
        if judge not in allowed_values:
            raise ValueError(
                "Invalid value for `judge` ({0}), must be one of {1}"  # noqa: E501
                .format(judge, allowed_values)
            )

        self._judge = judge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskLatestStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskLatestStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
