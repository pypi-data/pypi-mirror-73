# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from .signal import Signal  # noqa: F401,E501
from datetime import datetime

class DeviceSignal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform_id': 'str',
        'master_io': 'Signal',
        'loader_io': 'Signal',
        'packer_io': 'Signal',
        'warehouse_io': 'Signal',
        'time': 'float'
    }

    attribute_map = {
        'platform_id': 'platform_id',
        'master_io': 'master_io',
        'loader_io': 'loader_io',
        'packer_io': 'packer_io',
        'warehouse_io': 'warehouse_io',
        'time': 'time'
    }

    def __init__(self, platform_id=None, master_io=None, loader_io=None, packer_io=None, warehouse_io=None, time=None):  # noqa: E501
        """DeviceSignal - a model defined in Swagger"""  # noqa: E501

        self._platform_id = None
        self._master_io = Signal()
        self._loader_io = Signal()
        self._packer_io = Signal()
        self._warehouse_io = Signal()
        self._time = datetime.now().timestamp()
        self.discriminator = None

        if platform_id is not None:
            self.platform_id = platform_id
        if master_io is not None:
            self.master_io = master_io
        if loader_io is not None:
            self.loader_io = loader_io
        if packer_io is not None:
            self.packer_io = packer_io
        if warehouse_io is not None:
            self.warehouse_io = warehouse_io
        if time is not None:
            self.time = time

    @property
    def platform_id(self):
        """Gets the platform_id of this DeviceSignal.  # noqa: E501


        :return: The platform_id of this DeviceSignal.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this DeviceSignal.


        :param platform_id: The platform_id of this DeviceSignal.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def master_io(self):
        """Gets the master_io of this DeviceSignal.  # noqa: E501


        :return: The master_io of this DeviceSignal.  # noqa: E501
        :rtype: Signal
        """
        return self._master_io

    @master_io.setter
    def master_io(self, master_io):
        """Sets the master_io of this DeviceSignal.


        :param master_io: The master_io of this DeviceSignal.  # noqa: E501
        :type: Signal
        """

        self._master_io = master_io

    @property
    def loader_io(self):
        """Gets the loader_io of this DeviceSignal.  # noqa: E501


        :return: The loader_io of this DeviceSignal.  # noqa: E501
        :rtype: Signal
        """
        return self._loader_io

    @loader_io.setter
    def loader_io(self, loader_io):
        """Sets the loader_io of this DeviceSignal.


        :param loader_io: The loader_io of this DeviceSignal.  # noqa: E501
        :type: Signal
        """

        self._loader_io = loader_io

    @property
    def packer_io(self):
        """Gets the packer_io of this DeviceSignal.  # noqa: E501


        :return: The packer_io of this DeviceSignal.  # noqa: E501
        :rtype: Signal
        """
        return self._packer_io

    @packer_io.setter
    def packer_io(self, packer_io):
        """Sets the packer_io of this DeviceSignal.


        :param packer_io: The packer_io of this DeviceSignal.  # noqa: E501
        :type: Signal
        """

        self._packer_io = packer_io

    @property
    def warehouse_io(self):
        """Gets the warehouse_io of this DeviceSignal.  # noqa: E501


        :return: The warehouse_io of this DeviceSignal.  # noqa: E501
        :rtype: Signal
        """
        return self._warehouse_io

    @warehouse_io.setter
    def warehouse_io(self, warehouse_io):
        """Sets the warehouse_io of this DeviceSignal.


        :param warehouse_io: The warehouse_io of this DeviceSignal.  # noqa: E501
        :type: Signal
        """

        self._warehouse_io = warehouse_io

    @property
    def time(self):
        """Gets the time of this DeviceSignal.  # noqa: E501

        时间戳，以秒为单位  # noqa: E501

        :return: The time of this DeviceSignal.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DeviceSignal.

        时间戳，以秒为单位  # noqa: E501

        :param time: The time of this DeviceSignal.  # noqa: E501
        :type: float
        """
        if time is not None and time > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if time is not None and time < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value greater than or equal to `1000000000`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSignal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSignal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
