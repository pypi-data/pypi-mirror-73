# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..models.image import *
from ..api_client import ApiClient


class ErrorInfoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_error_info(self, platform_key, error_info, **kwargs):  # noqa: E501
        """添加故障信息  # noqa: E501

        添加故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_error_info(platform_key, error_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param ErrorInfo error_info: 故障信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_error_info_with_http_info(platform_key, error_info, **kwargs)  # noqa: E501
        else:
            (data) = self.create_error_info_with_http_info(platform_key, error_info, **kwargs)  # noqa: E501
            return data

    def create_error_info_with_http_info(self, platform_key, error_info, **kwargs):  # noqa: E501
        """添加故障信息  # noqa: E501

        添加故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_error_info_with_http_info(platform_key, error_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param ErrorInfo error_info: 故障信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key', 'error_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_error_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `create_error_info`")  # noqa: E501
        # verify the required parameter 'error_info' is set
        if ('error_info' not in params or
                params['error_info'] is None):
            raise ValueError("Missing the required parameter `error_info` when calling `create_error_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'platform_key' in params:
            header_params['platform_key'] = params['platform_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'error_info' in params:
            body_params = params['error_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/error_info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_error_info(self, **kwargs):  # noqa: E501
        """获取指定条件的故障信息  # noqa: E501

        获取指定条件的故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_error_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str code: 故障代码
        :param str status: 处理状态
        :param int offset: 起始位置
        :param int limit: 个数限制
        :return: list[ErrorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_error_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_error_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_error_info_with_http_info(self, **kwargs):  # noqa: E501
        """获取指定条件的故障信息  # noqa: E501

        获取指定条件的故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_error_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str code: 故障代码
        :param str status: 处理状态
        :param int offset: 起始位置
        :param int limit: 个数限制
        :return: list[ErrorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'platform_id', 'start_time', 'end_time', 'code', 'status', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_error_info" % key
                )
            params[key] = val
        del params['kwargs']

        if 'start_time' in params and params['start_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_error_info`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'start_time' in params and params['start_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_error_info`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_error_info`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_error_info`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/error_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ErrorInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_error_info_count(self, **kwargs):  # noqa: E501
        """获取指定条件的故障信息个数  # noqa: E501

        获取指定条件的故障信息个数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_error_info_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str code: 故障代码
        :param str status: 处理状态
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_error_info_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_error_info_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_error_info_count_with_http_info(self, **kwargs):  # noqa: E501
        """获取指定条件的故障信息个数  # noqa: E501

        获取指定条件的故障信息个数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_error_info_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str code: 故障代码
        :param str status: 处理状态
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id', 'start_time', 'end_time', 'code', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_error_info_count" % key
                )
            params[key] = val
        del params['kwargs']

        if 'start_time' in params and params['start_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_error_info_count`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'start_time' in params and params['start_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_error_info_count`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_error_info_count`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_error_info_count`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/error_info/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_error_info(self, error_info, **kwargs):  # noqa: E501
        """修改故障信息  # noqa: E501

        修改故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_error_info(error_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorInfo error_info: 故障信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_error_info_with_http_info(error_info, **kwargs)  # noqa: E501
        else:
            (data) = self.update_error_info_with_http_info(error_info, **kwargs)  # noqa: E501
            return data

    def update_error_info_with_http_info(self, error_info, **kwargs):  # noqa: E501
        """修改故障信息  # noqa: E501

        修改故障信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_error_info_with_http_info(error_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorInfo error_info: 故障信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_error_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_info' is set
        if ('error_info' not in params or
                params['error_info'] is None):
            raise ValueError("Missing the required parameter `error_info` when calling `update_error_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'error_info' in params:
            body_params = params['error_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/error_info', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
