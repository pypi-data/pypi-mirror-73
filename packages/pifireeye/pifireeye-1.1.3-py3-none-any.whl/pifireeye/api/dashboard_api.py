# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..models.image import *
from ..api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_available_platform_ids(self, **kwargs):  # noqa: E501
        """返回所有platform_id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_platform_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Platform]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_platform_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_available_platform_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_available_platform_ids_with_http_info(self, **kwargs):  # noqa: E501
        """返回所有platform_id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_platform_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Platform]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_platform_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/available_platform_ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Platform]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history_confidence(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间的置信度  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_confidence(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_history_confidence_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_history_confidence_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
            return data

    def get_history_confidence_with_http_info(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间的置信度  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_confidence_with_http_info(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id', 'start_time', 'end_time', 'granularity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_confidence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_history_confidence`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_history_confidence`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_history_confidence`")  # noqa: E501
        # verify the required parameter 'granularity' is set
        if ('granularity' not in params or
                params['granularity'] is None):
            raise ValueError("Missing the required parameter `granularity` when calling `get_history_confidence`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/history_confidence', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard2dTimeSeriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history_fault(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间的告警  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_fault(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_history_fault_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_history_fault_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
            return data

    def get_history_fault_with_http_info(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间的告警  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_fault_with_http_info(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id', 'start_time', 'end_time', 'granularity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_fault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_history_fault`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_history_fault`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_history_fault`")  # noqa: E501
        # verify the required parameter 'granularity' is set
        if ('granularity' not in params or
                params['granularity'] is None):
            raise ValueError("Missing the required parameter `granularity` when calling `get_history_fault`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/history_fault', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard2dTimeSeriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_task(self, platform_id, **kwargs):  # noqa: E501
        """返回当前产线下工位的状态  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_task(platform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :return: list[TaskLatestStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_latest_task_with_http_info(platform_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_task_with_http_info(platform_id, **kwargs)  # noqa: E501
            return data

    def get_latest_task_with_http_info(self, platform_id, **kwargs):  # noqa: E501
        """返回当前产线下工位的状态  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_task_with_http_info(platform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :return: list[TaskLatestStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_latest_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/latest_task', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaskLatestStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pass_rate(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的合格率序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pass_rate(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pass_rate_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pass_rate_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
            return data

    def get_pass_rate_with_http_info(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的合格率序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pass_rate_with_http_info(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id', 'start_time', 'end_time', 'granularity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pass_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_pass_rate`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_pass_rate`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_pass_rate`")  # noqa: E501
        # verify the required parameter 'granularity' is set
        if ('granularity' not in params or
                params['granularity'] is None):
            raise ValueError("Missing the required parameter `granularity` when calling `get_pass_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/pass_rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard2dTimeSeriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_realtime_fault(self, platform_id, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的吞吐量序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realtime_fault(platform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_realtime_fault_with_http_info(platform_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_realtime_fault_with_http_info(platform_id, **kwargs)  # noqa: E501
            return data

    def get_realtime_fault_with_http_info(self, platform_id, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的吞吐量序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_realtime_fault_with_http_info(platform_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_realtime_fault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_realtime_fault`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/realtime_fault', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_throughput(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的吞吐量序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_throughput(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_throughput_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
        else:
            (data) = self.get_throughput_with_http_info(platform_id, start_time, end_time, granularity, **kwargs)  # noqa: E501
            return data

    def get_throughput_with_http_info(self, platform_id, start_time, end_time, granularity, **kwargs):  # noqa: E501
        """返回给定时间区间和时间粒度下的吞吐量序列  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_throughput_with_http_info(platform_id, start_time, end_time, granularity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_id: platform to query (required)
        :param datetime start_time: start time to query (required)
        :param datetime end_time: end time to query (required)
        :param str granularity: granularity to query (required)
        :return: Dashboard2dTimeSeriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_id', 'start_time', 'end_time', 'granularity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_throughput" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_id' is set
        if ('platform_id' not in params or
                params['platform_id'] is None):
            raise ValueError("Missing the required parameter `platform_id` when calling `get_throughput`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_throughput`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_throughput`")  # noqa: E501
        # verify the required parameter 'granularity' is set
        if ('granularity' not in params or
                params['granularity'] is None):
            raise ValueError("Missing the required parameter `granularity` when calling `get_throughput`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/throughput', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard2dTimeSeriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
