# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..models.image import *
from ..models.device_command import DeviceCommand
from ..api_client import ApiClient


class DeviceCommandApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_device_command(self, command, **kwargs):  # noqa: E501
        """添加设备命令  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_device_command(command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCommand command: 需要添加的设备命令 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_device_command_with_http_info(command, **kwargs)  # noqa: E501
        else:
            (data) = self.add_device_command_with_http_info(command, **kwargs)  # noqa: E501
            return data

    def add_device_command_with_http_info(self, command, **kwargs):  # noqa: E501
        """添加设备命令  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_device_command_with_http_info(command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCommand command: 需要添加的设备命令 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_device_command" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command' is set
        if ('command' not in params or
                params['command'] is None):
            raise ValueError("Missing the required parameter `command` when calling `add_device_command`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/device_command', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_command(self, platform_key, **kwargs):  # noqa: E501
        """返回设备命令  # noqa: E501

        返回设备命令  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_command(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str status:
        :return: list[DeviceCommand]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_command_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_command_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def get_device_command_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """返回设备命令  # noqa: E501

        返回设备命令  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_command_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param str platform_id: Platform ID
        :param float start_time: 开始时间的时间戳，以秒为单位
        :param float end_time: 结束时间的时间戳，以秒为单位
        :param str status:
        :return: list[DeviceCommand]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key', 'platform_id', 'start_time', 'end_time', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_command" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `get_device_command`")  # noqa: E501

        if 'start_time' in params and params['start_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_device_command`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'start_time' in params and params['start_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `start_time` when calling `get_device_command`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_device_command`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if 'end_time' in params and params['end_time'] < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for parameter `end_time` when calling `get_device_command`, must be a value greater than or equal to `1000000000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}
        if 'platform_key' in params:
            header_params['platform_key'] = params['platform_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        commands = self.api_client.call_api(
            '/device_command', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceCommand]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        if len(commands) == 0:
            return None

        id_status_mapping = {x.id: "done" for x in commands}
        merged_command = DeviceCommand(platform_id=params['platform_id'])
        commands = sorted(commands, key=lambda x: x.time)
        for command in commands:
            for k in command.master_command:
                merged_command.master_command[k] = command.master_command[k]
            for k in command.loader_command:
                merged_command.loader_command[k] = command.loader_command[k]
            for k in command.packer_command:
                merged_command.packer_command[k] = command.packer_command[k]
            for k in command.warehouse_command:
                merged_command.warehouse_command[k] = \
                    command.warehouse_command[k]
        self.set_device_command_status(id_status_mapping=id_status_mapping)
        return merged_command

    def get_device_command_status(self, command_ids, **kwargs):  # noqa: E501
        """返回指定的设备命令是否被处理  # noqa: E501

        返回指定的设备命令是否被处理  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_command_status(command_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] command_ids: (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_command_status_with_http_info(command_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_command_status_with_http_info(command_ids, **kwargs)  # noqa: E501
            return data

    def get_device_command_status_with_http_info(self, command_ids, **kwargs):  # noqa: E501
        """返回指定的设备命令是否被处理  # noqa: E501

        返回指定的设备命令是否被处理  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_command_status_with_http_info(command_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] command_ids: (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_command_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command_ids' is set
        if ('command_ids' not in params or
                params['command_ids'] is None):
            raise ValueError("Missing the required parameter `command_ids` when calling `get_device_command_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'command_ids' in params:
            query_params.append(('command_ids', params['command_ids']))  # noqa: E501
            collection_formats['command_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/device_command/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_device_command_status(self, id_status_mapping, **kwargs):  # noqa: E501
        """设置指定的设备命令的处理状态  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_device_command_status(id_status_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id_status_mapping: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_device_command_status_with_http_info(id_status_mapping, **kwargs)  # noqa: E501
        else:
            (data) = self.set_device_command_status_with_http_info(id_status_mapping, **kwargs)  # noqa: E501
            return data

    def set_device_command_status_with_http_info(self, id_status_mapping, **kwargs):  # noqa: E501
        """设置指定的设备命令的处理状态  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_device_command_status_with_http_info(id_status_mapping, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id_status_mapping: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_status_mapping']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_device_command_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_status_mapping' is set
        if ('id_status_mapping' not in params or
                params['id_status_mapping'] is None):
            raise ValueError("Missing the required parameter `id_status_mapping` when calling `set_device_command_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'id_status_mapping' in params:
            body_params = params['id_status_mapping']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/device_command/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
