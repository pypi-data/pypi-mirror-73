# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Platform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'task_category_id': 'str',
        'target_image_category_id': 'str',
        'platform_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'task_category_id': 'task_category_id',
        'target_image_category_id': 'target_image_category_id',
        'platform_key': 'platform_key'
    }

    def __init__(self, id=None, name=None, task_category_id=None, target_image_category_id=None, platform_key=None):  # noqa: E501
        """Platform - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._task_category_id = None
        self._target_image_category_id = None
        self._platform_key = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if task_category_id is not None:
            self.task_category_id = task_category_id
        if target_image_category_id is not None:
            self.target_image_category_id = target_image_category_id
        if platform_key is not None:
            self.platform_key = platform_key

    @property
    def id(self):
        """Gets the id of this Platform.  # noqa: E501


        :return: The id of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Platform.


        :param id: The id of this Platform.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Platform.  # noqa: E501

        产线名称  # noqa: E501

        :return: The name of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Platform.

        产线名称  # noqa: E501

        :param name: The name of this Platform.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def task_category_id(self):
        """Gets the task_category_id of this Platform.  # noqa: E501

        任务类型  # noqa: E501

        :return: The task_category_id of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._task_category_id

    @task_category_id.setter
    def task_category_id(self, task_category_id):
        """Sets the task_category_id of this Platform.

        任务类型  # noqa: E501

        :param task_category_id: The task_category_id of this Platform.  # noqa: E501
        :type: str
        """

        self._task_category_id = task_category_id

    @property
    def target_image_category_id(self):
        """Gets the target_image_category_id of this Platform.  # noqa: E501

        目标图片类型  # noqa: E501

        :return: The target_image_category_id of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._target_image_category_id

    @target_image_category_id.setter
    def target_image_category_id(self, target_image_category_id):
        """Sets the target_image_category_id of this Platform.

        目标图片类型  # noqa: E501

        :param target_image_category_id: The target_image_category_id of this Platform.  # noqa: E501
        :type: str
        """

        self._target_image_category_id = target_image_category_id

    @property
    def platform_key(self):
        """Gets the platform_key of this Platform.  # noqa: E501

        访问口令  # noqa: E501

        :return: The platform_key of this Platform.  # noqa: E501
        :rtype: str
        """
        return self._platform_key

    @platform_key.setter
    def platform_key(self, platform_key):
        """Sets the platform_key of this Platform.

        访问口令  # noqa: E501

        :param platform_key: The platform_key of this Platform.  # noqa: E501
        :type: str
        """

        self._platform_key = platform_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Platform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Platform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
