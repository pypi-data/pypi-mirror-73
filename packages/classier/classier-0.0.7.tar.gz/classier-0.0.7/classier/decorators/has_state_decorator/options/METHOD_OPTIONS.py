from classier.objects.Option import Option
from classier.objects.saver import FileSaver
from classier.objects.saver import FileIndex
import os

"""
Below sets the method names that will be generated by has_state_decorator
If you don't want a specific method below, just set its value to None
"""

METHOD_NAME_SAVE_STATE = Option("METHOD_NAME_SAVE_STATE", "save_state")
METHOD_NAME_UPDATE_STATE = Option("METHOD_NAME_UPDATE_STATE", "update_state")
METHOD_NAME_GET_STATE = Option("METHOD_NAME_GET_STATE", "get_state")
METHOD_NAME_DOES_STATE_EXIST = Option("METHOD_NAME_DOES_STATE_EXIST", "does_state_exist")
METHOD_NAME_GET_STATE_PATH = Option("METHOD_NAME_GET_STATE_PATH", "get_state_path")
METHOD_NAME_DEL_STATE = Option("METHOD_NAME_DEL_STATE", "delete_state")
METHOD_NAME_FROM_POINTER = Option("METHOD_NAME_FROM_POINTER", "from_pointer")
METHOD_NAME_GET_ID = Option("METHOD_NAME_GET_ID", "get_id")


"""
Below sets the default methods used, that will be added by has_state_decorator
"""
METHOD_GET_PATH = Option("METHOD_GET_PATH", lambda some_object: os.path.join("states", type(some_object).__name__))  # object -> save path
METHOD_GET_ID = Option("GET_ID", None)  # required for indexing
METHOD_SAVER = Option("METHOD_SAVER", FileSaver)
METHOD_INDEX = Option("METHOD_INDEX", FileIndex)
METHOD_POINTER_DEFAULT = Option("METHOD_POINTER_DEFAULT", None)
METHOD_STATE_TRANSFORMER = Option("METHOD_STATE_TRANSFORMER", None)
METHOD_POINTER_EXISTS = Option("METHOD_POINTER_EXISTS", os.path.exists)


"""
Indexing related
"""
PATH_INDEX = Option("INDEX_POINTER", "./states/index.json")  # set to none if you don't want to use indexing
