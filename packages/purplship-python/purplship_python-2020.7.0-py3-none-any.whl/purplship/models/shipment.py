# coding: utf-8

"""
    PurplShip Multi-carrier API

    PurplShip is a Multi-carrier Shipping API that simplifies the integration of logistic carrier services  # noqa: E501

    OpenAPI spec version: v1
    Contact: hello@purplship.com
    Generated by: https://github.com/PurplShip/purplship-python-client.git
"""


import pprint
import re  # noqa: F401

import six


class Shipment(object):
    """NOTE: This class is auto generated by the purplship code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      purplship_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    purplship_types = {
        'shipper': 'Address',
        'recipient': 'Address',
        'parcel': 'Parcel',
        'services': 'list[str]',
        'options': 'Options',
        'customs': 'Customs',
        'doc_images': 'list[Doc]',
        'reference': 'str',
        'id': 'str',
        'carrier_name': 'str',
        'carrier_id': 'str',
        'label': 'str',
        'tracking_number': 'str',
        'selected_rate': 'Rate',
        'payment': 'Payment',
        'selected_rate_id': 'str',
        'rates': 'list[Rate]',
        'tracking_url': 'str'
    }

    attribute_map = {
        'shipper': 'shipper',
        'recipient': 'recipient',
        'parcel': 'parcel',
        'services': 'services',
        'options': 'options',
        'customs': 'customs',
        'doc_images': 'docImages',
        'reference': 'reference',
        'id': 'id',
        'carrier_name': 'carrierName',
        'carrier_id': 'carrierId',
        'label': 'label',
        'tracking_number': 'trackingNumber',
        'selected_rate': 'selectedRate',
        'payment': 'payment',
        'selected_rate_id': 'selectedRateId',
        'rates': 'rates',
        'tracking_url': 'trackingUrl'
    }

    def __init__(self, shipper=None, recipient=None, parcel=None, services=None, options=None, customs=None, doc_images=None, reference=None, id=None, carrier_name=None, carrier_id=None, label=None, tracking_number=None, selected_rate=None, payment=None, selected_rate_id=None, rates=None, tracking_url=None):  # noqa: E501
        """Shipment - a model defined in PurplShip"""  # noqa: E501

        self._shipper = None
        self._recipient = None
        self._parcel = None
        self._services = None
        self._options = None
        self._customs = None
        self._doc_images = None
        self._reference = None
        self._id = None
        self._carrier_name = None
        self._carrier_id = None
        self._label = None
        self._tracking_number = None
        self._selected_rate = None
        self._payment = None
        self._selected_rate_id = None
        self._rates = None
        self._tracking_url = None
        self.discriminator = None

        self.shipper = shipper
        self.recipient = recipient
        self.parcel = parcel
        if services is not None:
            self.services = services
        if options is not None:
            self.options = options
        if customs is not None:
            self.customs = customs
        if doc_images is not None:
            self.doc_images = doc_images
        if reference is not None:
            self.reference = reference
        if id is not None:
            self.id = id
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if label is not None:
            self.label = label
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if selected_rate is not None:
            self.selected_rate = selected_rate
        if payment is not None:
            self.payment = payment
        if selected_rate_id is not None:
            self.selected_rate_id = selected_rate_id
        if rates is not None:
            self.rates = rates
        if tracking_url is not None:
            self.tracking_url = tracking_url

    @property
    def shipper(self):
        """Gets the shipper of this Shipment.  # noqa: E501


        :return: The shipper of this Shipment.  # noqa: E501
        :rtype: Address
        """
        return self._shipper

    @shipper.setter
    def shipper(self, shipper):
        """Sets the shipper of this Shipment.


        :param shipper: The shipper of this Shipment.  # noqa: E501
        :type: Address
        """
        if shipper is None:
            raise ValueError("Invalid value for `shipper`, must not be `None`")  # noqa: E501

        self._shipper = shipper

    @property
    def recipient(self):
        """Gets the recipient of this Shipment.  # noqa: E501


        :return: The recipient of this Shipment.  # noqa: E501
        :rtype: Address
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this Shipment.


        :param recipient: The recipient of this Shipment.  # noqa: E501
        :type: Address
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def parcel(self):
        """Gets the parcel of this Shipment.  # noqa: E501


        :return: The parcel of this Shipment.  # noqa: E501
        :rtype: Parcel
        """
        return self._parcel

    @parcel.setter
    def parcel(self, parcel):
        """Sets the parcel of this Shipment.


        :param parcel: The parcel of this Shipment.  # noqa: E501
        :type: Parcel
        """
        if parcel is None:
            raise ValueError("Invalid value for `parcel`, must not be `None`")  # noqa: E501

        self._parcel = parcel

    @property
    def services(self):
        """Gets the services of this Shipment.  # noqa: E501

         The requested carrier service for the shipment.  Please consult [the reference](./UtilsApi.md#references) for specific carriers services. Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier.   # noqa: E501

        :return: The services of this Shipment.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Shipment.

         The requested carrier service for the shipment.  Please consult [the reference](./UtilsApi.md#references) for specific carriers services. Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier.   # noqa: E501

        :param services: The services of this Shipment.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def options(self):
        """Gets the options of this Shipment.  # noqa: E501


        :return: The options of this Shipment.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Shipment.


        :param options: The options of this Shipment.  # noqa: E501
        :type: Options
        """

        self._options = options

    @property
    def customs(self):
        """Gets the customs of this Shipment.  # noqa: E501


        :return: The customs of this Shipment.  # noqa: E501
        :rtype: Customs
        """
        return self._customs

    @customs.setter
    def customs(self, customs):
        """Sets the customs of this Shipment.


        :param customs: The customs of this Shipment.  # noqa: E501
        :type: Customs
        """

        self._customs = customs

    @property
    def doc_images(self):
        """Gets the doc_images of this Shipment.  # noqa: E501

         The list of documents to attach for a paperless interantional trade.  eg: Invoices...   # noqa: E501

        :return: The doc_images of this Shipment.  # noqa: E501
        :rtype: list[Doc]
        """
        return self._doc_images

    @doc_images.setter
    def doc_images(self, doc_images):
        """Sets the doc_images of this Shipment.

         The list of documents to attach for a paperless interantional trade.  eg: Invoices...   # noqa: E501

        :param doc_images: The doc_images of this Shipment.  # noqa: E501
        :type: list[Doc]
        """

        self._doc_images = doc_images

    @property
    def reference(self):
        """Gets the reference of this Shipment.  # noqa: E501

        The shipment reference  # noqa: E501

        :return: The reference of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Shipment.

        The shipment reference  # noqa: E501

        :param reference: The reference of this Shipment.  # noqa: E501
        :type: str
        """
        if reference is not None and len(reference) < 1:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `1`")  # noqa: E501

        self._reference = reference

    @property
    def id(self):
        """Gets the id of this Shipment.  # noqa: E501

        A unique shipment identifier  # noqa: E501

        :return: The id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shipment.

        A unique shipment identifier  # noqa: E501

        :param id: The id of this Shipment.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def carrier_name(self):
        """Gets the carrier_name of this Shipment.  # noqa: E501

        The shipment carrier  # noqa: E501

        :return: The carrier_name of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this Shipment.

        The shipment carrier  # noqa: E501

        :param carrier_name: The carrier_name of this Shipment.  # noqa: E501
        :type: str
        """
        if carrier_name is not None and len(carrier_name) < 1:
            raise ValueError("Invalid value for `carrier_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._carrier_name = carrier_name

    @property
    def carrier_id(self):
        """Gets the carrier_id of this Shipment.  # noqa: E501

        The shipment carrier configured identifier  # noqa: E501

        :return: The carrier_id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this Shipment.

        The shipment carrier configured identifier  # noqa: E501

        :param carrier_id: The carrier_id of this Shipment.  # noqa: E501
        :type: str
        """
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._carrier_id = carrier_id

    @property
    def label(self):
        """Gets the label of this Shipment.  # noqa: E501

        The shipment label in base64 string  # noqa: E501

        :return: The label of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Shipment.

        The shipment label in base64 string  # noqa: E501

        :param label: The label of this Shipment.  # noqa: E501
        :type: str
        """
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label

    @property
    def tracking_number(self):
        """Gets the tracking_number of this Shipment.  # noqa: E501

        The shipment tracking number  # noqa: E501

        :return: The tracking_number of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this Shipment.

        The shipment tracking number  # noqa: E501

        :param tracking_number: The tracking_number of this Shipment.  # noqa: E501
        :type: str
        """
        if tracking_number is not None and len(tracking_number) < 1:
            raise ValueError("Invalid value for `tracking_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._tracking_number = tracking_number

    @property
    def selected_rate(self):
        """Gets the selected_rate of this Shipment.  # noqa: E501


        :return: The selected_rate of this Shipment.  # noqa: E501
        :rtype: Rate
        """
        return self._selected_rate

    @selected_rate.setter
    def selected_rate(self, selected_rate):
        """Sets the selected_rate of this Shipment.


        :param selected_rate: The selected_rate of this Shipment.  # noqa: E501
        :type: Rate
        """

        self._selected_rate = selected_rate

    @property
    def payment(self):
        """Gets the payment of this Shipment.  # noqa: E501


        :return: The payment of this Shipment.  # noqa: E501
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this Shipment.


        :param payment: The payment of this Shipment.  # noqa: E501
        :type: Payment
        """

        self._payment = payment

    @property
    def selected_rate_id(self):
        """Gets the selected_rate_id of this Shipment.  # noqa: E501

        The shipment selected rate.  # noqa: E501

        :return: The selected_rate_id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._selected_rate_id

    @selected_rate_id.setter
    def selected_rate_id(self, selected_rate_id):
        """Sets the selected_rate_id of this Shipment.

        The shipment selected rate.  # noqa: E501

        :param selected_rate_id: The selected_rate_id of this Shipment.  # noqa: E501
        :type: str
        """
        if selected_rate_id is not None and len(selected_rate_id) < 1:
            raise ValueError("Invalid value for `selected_rate_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._selected_rate_id = selected_rate_id

    @property
    def rates(self):
        """Gets the rates of this Shipment.  # noqa: E501

        The list for shipment rates fetched previously  # noqa: E501

        :return: The rates of this Shipment.  # noqa: E501
        :rtype: list[Rate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this Shipment.

        The list for shipment rates fetched previously  # noqa: E501

        :param rates: The rates of this Shipment.  # noqa: E501
        :type: list[Rate]
        """

        self._rates = rates

    @property
    def tracking_url(self):
        """Gets the tracking_url of this Shipment.  # noqa: E501

        The shipment tracking url  # noqa: E501

        :return: The tracking_url of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this Shipment.

        The shipment tracking url  # noqa: E501

        :param tracking_url: The tracking_url of this Shipment.  # noqa: E501
        :type: str
        """
        if tracking_url is not None and len(tracking_url) < 1:
            raise ValueError("Invalid value for `tracking_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._tracking_url = tracking_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.purplship_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
