
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementleftIFleftORleftANDleftGREATERLESSGREATER_EQUALLESS_EQUALNOT_EQUALEQUALleftMINUSPLUSleftINT_DIVIDEMODULODIVIDEMULTIPLYleftPOWERleftNOTAND COLON DIVIDE EQUAL GREATER GREATER_EQUAL IF INT_DIVIDE LEFT_PARENTHESIS LESS LESS_EQUAL MINUS MODULO MULTIPLY NAME NOT NOT_EQUAL NUMBER OR PLUS POWER RIGHT_PARENTHESIS SEMICOLON SETstatement : expressionvariable : NAME\n        constant : NUMBER\n        expression : variable\n                      | constant\n        expression : MINUS expression\n                      | NOT expression\n        expression : expression POWER expression\n                      | expression MULTIPLY expression\n                      | expression DIVIDE expression\n                      | expression MODULO expression\n                      | expression INT_DIVIDE expression\n                      | expression PLUS expression\n                      | expression MINUS expression\n                      | expression EQUAL expression\n                      | expression NOT_EQUAL expression\n                      | expression LESS expression\n                      | expression GREATER expression\n                      | expression LESS_EQUAL expression\n                      | expression GREATER_EQUAL expression\n                      | expression AND expression\n                      | expression OR expression\n        expression : expression IF expression COLON expression\n        '
    
_lr_action_items = {'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,],[5,15,-4,-5,5,5,-2,-3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,15,15,15,15,15,15,15,15,5,15,]),'NOT':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NAME':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,],[0,-1,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,]),'POWER':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[9,-4,-5,-2,-3,9,-7,-8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'MULTIPLY':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[10,-4,-5,-2,-3,10,-7,-8,-9,-10,-11,-12,10,10,10,10,10,10,10,10,10,10,10,10,]),'DIVIDE':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[11,-4,-5,-2,-3,11,-7,-8,-9,-10,-11,-12,11,11,11,11,11,11,11,11,11,11,11,11,]),'MODULO':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[12,-4,-5,-2,-3,12,-7,-8,-9,-10,-11,-12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT_DIVIDE':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[13,-4,-5,-2,-3,13,-7,-8,-9,-10,-11,-12,13,13,13,13,13,13,13,13,13,13,13,13,]),'PLUS':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[14,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,14,14,14,14,14,14,14,14,14,14,]),'EQUAL':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[16,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,16,16,16,16,]),'NOT_EQUAL':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[17,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,17,17,17,17,]),'LESS':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[18,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,18,18,18,18,]),'GREATER':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[19,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,19,19,19,19,]),'LESS_EQUAL':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[20,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,20,20,20,20,]),'GREATER_EQUAL':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[21,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,21,21,21,21,]),'AND':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[22,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,22,]),'OR':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[23,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,23,23,]),'IF':([2,3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[24,-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,24,24,]),'COLON':([3,4,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,-5,-2,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,43,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[2,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,]),'variable':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'constant':([0,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,43,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','Parser.py',191),
  ('variable -> NAME','variable',1,'p_variable','Parser.py',249),
  ('constant -> NUMBER','constant',1,'p_float','Parser.py',263),
  ('expression -> variable','expression',1,'p_value','Parser.py',271),
  ('expression -> constant','expression',1,'p_value','Parser.py',272),
  ('expression -> MINUS expression','expression',2,'p_unnary_operation','Parser.py',277),
  ('expression -> NOT expression','expression',2,'p_unnary_operation','Parser.py',278),
  ('expression -> expression POWER expression','expression',3,'p_binary_operation','Parser.py',284),
  ('expression -> expression MULTIPLY expression','expression',3,'p_binary_operation','Parser.py',285),
  ('expression -> expression DIVIDE expression','expression',3,'p_binary_operation','Parser.py',286),
  ('expression -> expression MODULO expression','expression',3,'p_binary_operation','Parser.py',287),
  ('expression -> expression INT_DIVIDE expression','expression',3,'p_binary_operation','Parser.py',288),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operation','Parser.py',289),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operation','Parser.py',290),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_operation','Parser.py',291),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_binary_operation','Parser.py',292),
  ('expression -> expression LESS expression','expression',3,'p_binary_operation','Parser.py',293),
  ('expression -> expression GREATER expression','expression',3,'p_binary_operation','Parser.py',294),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_binary_operation','Parser.py',295),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_binary_operation','Parser.py',296),
  ('expression -> expression AND expression','expression',3,'p_binary_operation','Parser.py',297),
  ('expression -> expression OR expression','expression',3,'p_binary_operation','Parser.py',298),
  ('expression -> expression IF expression COLON expression','expression',5,'p_if','Parser.py',304),
]
