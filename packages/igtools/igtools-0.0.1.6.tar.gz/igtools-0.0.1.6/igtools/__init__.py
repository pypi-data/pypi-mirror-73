####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("bf4f49e3d7ccf9f1d6a6f6b290434ecac897fe1ba4bc9476c62bc889c04de2870909e68f6fd01cf2a2d4bf6bb6ee6ae74ed0a0eece1623fd99107c4ef71c293936395b0658dd0eddd6f552ab9b498cb2590e1d1e32388647762873e342c189e0876b43a5b613f1d24cdec43148b45a82fea148ece806c572df795b241af9f2a86b490227100d720d79bcd908098837da94c1b702790af89867f5f829a4b542ef280cff4422062ba5c951df5bb36327f9d257ca564895d6271e633aa1a299696f552620ae491e730ca9daead833082||7|636!-!0f7bd2c0804cae92b90e263a076885a9a564ddd17fa4e3975e3c3ac0d898a8a991ca6cd5f455e798aed1f82bd2ba703e0bba4c262d479e307a59ef6ef88c918f46101a4078e57c0ece1d7609e420eb29e592b4d34706408c9a3febe964258ec37865836e402a7b18f1ace637c5753da79937a03b9f396c1322f4fcd6c495347dcfc9dc27b0cd84d752d08947466eee1aa1fc163cbce8bf6c9d7e32598f368d0f492f974355b3619aa5a0538a6294d9ee28019076e549b2c5cac39171d896a5d8bf614b9ec3b9ff1ddc61d299c6f47",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
