####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("e92a1174a0c051eb89a12056ce2814568e4faf8868dc95192b3646c38218ec36719f0fc37ca488c36d069761302255381839c0a2907b2d3936a56147dfb897b93a7e848f2affd95e642821860358a03f30ce8d418443f15774bb3c50e9de2ff7e0842942dc7acec619d21456907191ca3fee90276f94a3d167c92a943b272b7785e1649747a7aa1454988c0295a0320d33ccd98b6a2c51620e536413bde1dab28215b05c4534e6c7f646136089d470c3a18f6612d0caa142fb58b044e55d06a87d59ae0b05774728e1737db5987e102e6161f49f9dbfbfbc74c284b23fc62194258692f86c6b1bb829c77c460cd526be44faf8baaf60bd04372a265b2530e0be2c0dd2cac3b84541db50469e1428dde9981b538a99b5eec8bc704b1a96dbfd0cf1b69b53e697a366cf417fd6f132817f304dcab6b5a84986ffc1d74ed850bd82340c1cb746fe738dd4abe39435bf40a999293dbfe79d757aa139f7540ac1b4025d718062c22f910da9f215304ce7d88abd3c2d6789ad4013df63c8c62f2c90c131918401f217e4be1269addc6d74992e43c0353464c77e0dd7dd1c1e97b1d7a88f5c293677d874be175ebde02605f6498dd03ef1fd949c4c435b6f1ab64a63eb167c30144483c6323723674bd52163527dd53a307eafc5d552daef0c8cfa5f8231e250cc97a473afe18aa42c2c1de5b30502731c2a58522789f291463d65c21ff51fc57ba55e41774dfedf3e466e63615fef8461bb33fc0e97065804bda8a3fc5e3b17c20edb78156c17f3f5ba19013c17130c87d50335c3b5706ae6393717f18b9f5be818b34e0e661b5be0d0b767050c924678e3df1fbfc1ae8905388f27620b1933fbbcedf5ab3baf4685dbe21c4727285d12e12d9dcd8ac6c1699344f959e29fdf2bd26910f5f4a51e86d8270994f59a94ff030bcaf21c74c691837373f4f8a62a3601b6b2b1a5185b359fe005f78997c23eb567d959f92a3b1f|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|7|188!-!f0221b4fc04858e698b1ec3cb9ab4b22745a5357e14959e0064e397a5f9fe9aaf1f44057604ceb70346133ded257892273ec611da0d6dff98a37f6ae93fbdaf2e18f9b7fdbdb231599ea44a496d68ea35a0b205c1f98c2de106831bd2e6a77c0cd0f5724cc56529842176064ef6a0df2bab898a9f000cbd71b468cb126289c435538c5ba2129ee4fb83043aa8f16ac7b2a00403df5b64bd4e3ecabbc5191602fef7af38ab3efb5434b7c6aee4077faa8382ae2c5fdaed2ece8265de9f6ab117c3c2a4a095ad04d2baaed864ca354fe1972d5adb1e71bf14aa668883011099e1900d5bf21f93a44b2bc170657935e15c2d9d38276d8ef112ac99dfd94aefbff000cc7a8e0432c9063b9f83017c3411d7b397fcca5d140686f4ea6c4c8771926499a53723ebc4bbe95879f63d3245154c522274be581f5d044a628d09eb7d033a74981e267b874b0f3b99bfc585c3da789c31367a05377171c19cef6fa7f46c6524e5b9e89d8c24648f09039ce5338bb0a0fc3ca7efb81892bb9550d85953c7b63f436dd9c0baac1804d623c2c42d238e518cc58fae0197d77f01424afe6462339369c8c536f304202769305567754886f1aa4fa589b2cb9058acc4c31006c45ed6e088ee0d7d4c4da1bb5362fe3a0273456917691416680c8b6752a6a7d2fea2091561bc64eced6187fed420d6f91a4e426b8799fb417d191d7e9a80d886368b74da090d1dda8a4ae4951240772cddc1f856094a15e7ab39475a6c11b553527fde2b62e5ca18b9371020acd8eed780be0be8ef9a13a151876d40e6ae275eda94ff026931aefc49502ca6722ccea730bb2cfdf257b09ea33ac7c97339edcb0249ad1f08621b4139b9d5d2df56d20348721e3fed2553b4fdf13c7812803097c99439d0de2ded92c4531a61b677244d83cd254ba13cbbe50d643e8ecc459ff93f938db3d8aead6dc86baf6e299406da9895eb1e6a425ee6d44ba0063bc23",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
