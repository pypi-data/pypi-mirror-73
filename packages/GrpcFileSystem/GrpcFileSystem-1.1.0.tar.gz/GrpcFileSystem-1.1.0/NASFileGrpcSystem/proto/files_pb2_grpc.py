# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from . import files_pb2 as files__pb2


class FileWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/FileWorker/HealthCheck',
                request_serializer=files__pb2.CheckRequest.SerializeToString,
                response_deserializer=files__pb2.FileReply.FromString,
                )
        self.FilesUpload = channel.unary_unary(
                '/FileWorker/FilesUpload',
                request_serializer=files__pb2.UploadRequest.SerializeToString,
                response_deserializer=files__pb2.FileReply.FromString,
                )
        self.FilesDownload = channel.unary_unary(
                '/FileWorker/FilesDownload',
                request_serializer=files__pb2.DownloadRequest.SerializeToString,
                response_deserializer=files__pb2.FileStream.FromString,
                )
        self.FilesUpdate = channel.unary_unary(
                '/FileWorker/FilesUpdate',
                request_serializer=files__pb2.UpdateRequest.SerializeToString,
                response_deserializer=files__pb2.FileReply.FromString,
                )
        self.FilesCopy = channel.unary_unary(
                '/FileWorker/FilesCopy',
                request_serializer=files__pb2.CopyRequest.SerializeToString,
                response_deserializer=files__pb2.FileReply.FromString,
                )
        self.FilesMove = channel.unary_unary(
                '/FileWorker/FilesMove',
                request_serializer=files__pb2.MoveRequest.SerializeToString,
                response_deserializer=files__pb2.FileReply.FromString,
                )


class FileWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilesUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilesDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilesUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilesCopy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilesMove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=files__pb2.CheckRequest.FromString,
                    response_serializer=files__pb2.FileReply.SerializeToString,
            ),
            'FilesUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.FilesUpload,
                    request_deserializer=files__pb2.UploadRequest.FromString,
                    response_serializer=files__pb2.FileReply.SerializeToString,
            ),
            'FilesDownload': grpc.unary_unary_rpc_method_handler(
                    servicer.FilesDownload,
                    request_deserializer=files__pb2.DownloadRequest.FromString,
                    response_serializer=files__pb2.FileStream.SerializeToString,
            ),
            'FilesUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.FilesUpdate,
                    request_deserializer=files__pb2.UpdateRequest.FromString,
                    response_serializer=files__pb2.FileReply.SerializeToString,
            ),
            'FilesCopy': grpc.unary_unary_rpc_method_handler(
                    servicer.FilesCopy,
                    request_deserializer=files__pb2.CopyRequest.FromString,
                    response_serializer=files__pb2.FileReply.SerializeToString,
            ),
            'FilesMove': grpc.unary_unary_rpc_method_handler(
                    servicer.FilesMove,
                    request_deserializer=files__pb2.MoveRequest.FromString,
                    response_serializer=files__pb2.FileReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/HealthCheck',
            files__pb2.CheckRequest.SerializeToString,
            files__pb2.FileReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilesUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/FilesUpload',
            files__pb2.UploadRequest.SerializeToString,
            files__pb2.FileReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilesDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/FilesDownload',
            files__pb2.DownloadRequest.SerializeToString,
            files__pb2.FileStream.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilesUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/FilesUpdate',
            files__pb2.UpdateRequest.SerializeToString,
            files__pb2.FileReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilesCopy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/FilesCopy',
            files__pb2.CopyRequest.SerializeToString,
            files__pb2.FileReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilesMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/FilesMove',
            files__pb2.MoveRequest.SerializeToString,
            files__pb2.FileReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
