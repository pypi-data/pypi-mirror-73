# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Backend for complex matrices"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_picomplex')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_picomplex')
    _picomplex = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_picomplex', [dirname(__file__)])
        except ImportError:
            import _picomplex
            return _picomplex
        try:
            _mod = imp.load_module('_picomplex', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _picomplex = swig_import_helper()
    del swig_import_helper
else:
    import _picomplex
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _picomplex.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _picomplex.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _picomplex.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _picomplex.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _picomplex.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _picomplex.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _picomplex.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _picomplex.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _picomplex.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _picomplex.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _picomplex.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _picomplex.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _picomplex.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _picomplex.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _picomplex.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _picomplex.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _picomplex.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _picomplex.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _picomplex.VectorInt___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _picomplex.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorInt___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _picomplex.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _picomplex.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _picomplex.VectorInt_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _picomplex.VectorInt_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _picomplex.VectorInt_size(self)

    def swap(self, v: 'VectorInt') -> "void":
        return _picomplex.VectorInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _picomplex.VectorInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _picomplex.VectorInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _picomplex.VectorInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _picomplex.VectorInt_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _picomplex.VectorInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _picomplex.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _picomplex.VectorInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _picomplex.VectorInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _picomplex.VectorInt_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _picomplex.VectorInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorInt_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _picomplex.VectorInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _picomplex.VectorInt_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _picomplex.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _picomplex.VectorDouble___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _picomplex.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _picomplex.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _picomplex.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _picomplex.VectorDouble_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _picomplex.VectorDouble_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _picomplex.VectorDouble_size(self)

    def swap(self, v: 'VectorDouble') -> "void":
        return _picomplex.VectorDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _picomplex.VectorDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _picomplex.VectorDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _picomplex.VectorDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _picomplex.VectorDouble_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _picomplex.VectorDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _picomplex.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _picomplex.VectorDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _picomplex.VectorDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _picomplex.VectorDouble_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _picomplex.VectorDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorDouble_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _picomplex.VectorDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _picomplex.VectorDouble_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _picomplex.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorFloat___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _picomplex.VectorFloat___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _picomplex.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _picomplex.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _picomplex.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _picomplex.VectorFloat_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _picomplex.VectorFloat_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorFloat_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _picomplex.VectorFloat_size(self)

    def swap(self, v: 'VectorFloat') -> "void":
        return _picomplex.VectorFloat_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _picomplex.VectorFloat_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _picomplex.VectorFloat_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _picomplex.VectorFloat_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _picomplex.VectorFloat_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorFloat_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _picomplex.VectorFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _picomplex.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _picomplex.VectorFloat_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _picomplex.VectorFloat_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _picomplex.VectorFloat_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _picomplex.VectorFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorFloat_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _picomplex.VectorFloat_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _picomplex.VectorFloat_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _picomplex.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorStateOne(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStateOne, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStateOne, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorStateOne_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorStateOne___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorStateOne___bool__(self)

    def __len__(self) -> "std::vector< StateOne >::size_type":
        return _picomplex.VectorStateOne___len__(self)

    def __getslice__(self, i: 'std::vector< StateOne >::difference_type', j: 'std::vector< StateOne >::difference_type') -> "std::vector< StateOne,std::allocator< StateOne > > *":
        return _picomplex.VectorStateOne___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorStateOne___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< StateOne >::difference_type', j: 'std::vector< StateOne >::difference_type') -> "void":
        return _picomplex.VectorStateOne___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorStateOne___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< StateOne >::value_type const &":
        return _picomplex.VectorStateOne___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorStateOne___setitem__(self, *args)

    def pop(self) -> "std::vector< StateOne >::value_type":
        return _picomplex.VectorStateOne_pop(self)

    def append(self, x: 'StateOne') -> "void":
        return _picomplex.VectorStateOne_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorStateOne_empty(self)

    def size(self) -> "std::vector< StateOne >::size_type":
        return _picomplex.VectorStateOne_size(self)

    def swap(self, v: 'VectorStateOne') -> "void":
        return _picomplex.VectorStateOne_swap(self, v)

    def begin(self) -> "std::vector< StateOne >::iterator":
        return _picomplex.VectorStateOne_begin(self)

    def end(self) -> "std::vector< StateOne >::iterator":
        return _picomplex.VectorStateOne_end(self)

    def rbegin(self) -> "std::vector< StateOne >::reverse_iterator":
        return _picomplex.VectorStateOne_rbegin(self)

    def rend(self) -> "std::vector< StateOne >::reverse_iterator":
        return _picomplex.VectorStateOne_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorStateOne_clear(self)

    def get_allocator(self) -> "std::vector< StateOne >::allocator_type":
        return _picomplex.VectorStateOne_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorStateOne_pop_back(self)

    def erase(self, *args) -> "std::vector< StateOne >::iterator":
        return _picomplex.VectorStateOne_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorStateOne(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StateOne') -> "void":
        return _picomplex.VectorStateOne_push_back(self, x)

    def front(self) -> "std::vector< StateOne >::value_type const &":
        return _picomplex.VectorStateOne_front(self)

    def back(self) -> "std::vector< StateOne >::value_type const &":
        return _picomplex.VectorStateOne_back(self)

    def assign(self, n: 'std::vector< StateOne >::size_type', x: 'StateOne') -> "void":
        return _picomplex.VectorStateOne_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorStateOne_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorStateOne_insert(self, *args)

    def reserve(self, n: 'std::vector< StateOne >::size_type') -> "void":
        return _picomplex.VectorStateOne_reserve(self, n)

    def capacity(self) -> "std::vector< StateOne >::size_type":
        return _picomplex.VectorStateOne_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorStateOne
    __del__ = lambda self: None
VectorStateOne_swigregister = _picomplex.VectorStateOne_swigregister
VectorStateOne_swigregister(VectorStateOne)

class VectorStateTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStateTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStateTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorStateTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorStateTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorStateTwo___bool__(self)

    def __len__(self) -> "std::vector< StateTwo >::size_type":
        return _picomplex.VectorStateTwo___len__(self)

    def __getslice__(self, i: 'std::vector< StateTwo >::difference_type', j: 'std::vector< StateTwo >::difference_type') -> "std::vector< StateTwo,std::allocator< StateTwo > > *":
        return _picomplex.VectorStateTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorStateTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< StateTwo >::difference_type', j: 'std::vector< StateTwo >::difference_type') -> "void":
        return _picomplex.VectorStateTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorStateTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< StateTwo >::value_type const &":
        return _picomplex.VectorStateTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorStateTwo___setitem__(self, *args)

    def pop(self) -> "std::vector< StateTwo >::value_type":
        return _picomplex.VectorStateTwo_pop(self)

    def append(self, x: 'StateTwo') -> "void":
        return _picomplex.VectorStateTwo_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorStateTwo_empty(self)

    def size(self) -> "std::vector< StateTwo >::size_type":
        return _picomplex.VectorStateTwo_size(self)

    def swap(self, v: 'VectorStateTwo') -> "void":
        return _picomplex.VectorStateTwo_swap(self, v)

    def begin(self) -> "std::vector< StateTwo >::iterator":
        return _picomplex.VectorStateTwo_begin(self)

    def end(self) -> "std::vector< StateTwo >::iterator":
        return _picomplex.VectorStateTwo_end(self)

    def rbegin(self) -> "std::vector< StateTwo >::reverse_iterator":
        return _picomplex.VectorStateTwo_rbegin(self)

    def rend(self) -> "std::vector< StateTwo >::reverse_iterator":
        return _picomplex.VectorStateTwo_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorStateTwo_clear(self)

    def get_allocator(self) -> "std::vector< StateTwo >::allocator_type":
        return _picomplex.VectorStateTwo_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorStateTwo_pop_back(self)

    def erase(self, *args) -> "std::vector< StateTwo >::iterator":
        return _picomplex.VectorStateTwo_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorStateTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StateTwo') -> "void":
        return _picomplex.VectorStateTwo_push_back(self, x)

    def front(self) -> "std::vector< StateTwo >::value_type const &":
        return _picomplex.VectorStateTwo_front(self)

    def back(self) -> "std::vector< StateTwo >::value_type const &":
        return _picomplex.VectorStateTwo_back(self)

    def assign(self, n: 'std::vector< StateTwo >::size_type', x: 'StateTwo') -> "void":
        return _picomplex.VectorStateTwo_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorStateTwo_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorStateTwo_insert(self, *args)

    def reserve(self, n: 'std::vector< StateTwo >::size_type') -> "void":
        return _picomplex.VectorStateTwo_reserve(self, n)

    def capacity(self) -> "std::vector< StateTwo >::size_type":
        return _picomplex.VectorStateTwo_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorStateTwo
    __del__ = lambda self: None
VectorStateTwo_swigregister = _picomplex.VectorStateTwo_swigregister
VectorStateTwo_swigregister(VectorStateTwo)

class VectorSizeT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSizeT, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorSizeT___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorSizeT___bool__(self)

    def __len__(self) -> "std::vector< size_t >::size_type":
        return _picomplex.VectorSizeT___len__(self)

    def __getslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "std::vector< size_t,std::allocator< size_t > > *":
        return _picomplex.VectorSizeT___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorSizeT___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "void":
        return _picomplex.VectorSizeT___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorSizeT___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        return _picomplex.VectorSizeT___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorSizeT___setitem__(self, *args)

    def pop(self) -> "std::vector< size_t >::value_type":
        return _picomplex.VectorSizeT_pop(self)

    def append(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        return _picomplex.VectorSizeT_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorSizeT_empty(self)

    def size(self) -> "std::vector< size_t >::size_type":
        return _picomplex.VectorSizeT_size(self)

    def swap(self, v: 'VectorSizeT') -> "void":
        return _picomplex.VectorSizeT_swap(self, v)

    def begin(self) -> "std::vector< size_t >::iterator":
        return _picomplex.VectorSizeT_begin(self)

    def end(self) -> "std::vector< size_t >::iterator":
        return _picomplex.VectorSizeT_end(self)

    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        return _picomplex.VectorSizeT_rbegin(self)

    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        return _picomplex.VectorSizeT_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorSizeT_clear(self)

    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        return _picomplex.VectorSizeT_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorSizeT_pop_back(self)

    def erase(self, *args) -> "std::vector< size_t >::iterator":
        return _picomplex.VectorSizeT_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        return _picomplex.VectorSizeT_push_back(self, x)

    def front(self) -> "std::vector< size_t >::value_type const &":
        return _picomplex.VectorSizeT_front(self)

    def back(self) -> "std::vector< size_t >::value_type const &":
        return _picomplex.VectorSizeT_back(self)

    def assign(self, n: 'std::vector< size_t >::size_type', x: 'std::vector< size_t >::value_type const &') -> "void":
        return _picomplex.VectorSizeT_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorSizeT_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorSizeT_insert(self, *args)

    def reserve(self, n: 'std::vector< size_t >::size_type') -> "void":
        return _picomplex.VectorSizeT_reserve(self, n)

    def capacity(self) -> "std::vector< size_t >::size_type":
        return _picomplex.VectorSizeT_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorSizeT
    __del__ = lambda self: None
VectorSizeT_swigregister = _picomplex.VectorSizeT_swigregister
VectorSizeT_swigregister(VectorSizeT)

class VectorComplexDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorComplexDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorComplexDouble, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorComplexDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorComplexDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorComplexDouble___bool__(self)

    def __len__(self) -> "std::vector< std::complex< double > >::size_type":
        return _picomplex.VectorComplexDouble___len__(self)

    def __getslice__(self, i: 'std::vector< std::complex< double > >::difference_type', j: 'std::vector< std::complex< double > >::difference_type') -> "std::vector< std::complex< double >,std::allocator< std::complex< double > > > *":
        return _picomplex.VectorComplexDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorComplexDouble___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::complex< double > >::difference_type', j: 'std::vector< std::complex< double > >::difference_type') -> "void":
        return _picomplex.VectorComplexDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorComplexDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::complex< double > >::value_type const &":
        return _picomplex.VectorComplexDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorComplexDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::complex< double > >::value_type":
        return _picomplex.VectorComplexDouble_pop(self)

    def append(self, x: 'std::vector< std::complex< double > >::value_type const &') -> "void":
        return _picomplex.VectorComplexDouble_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorComplexDouble_empty(self)

    def size(self) -> "std::vector< std::complex< double > >::size_type":
        return _picomplex.VectorComplexDouble_size(self)

    def swap(self, v: 'VectorComplexDouble') -> "void":
        return _picomplex.VectorComplexDouble_swap(self, v)

    def begin(self) -> "std::vector< std::complex< double > >::iterator":
        return _picomplex.VectorComplexDouble_begin(self)

    def end(self) -> "std::vector< std::complex< double > >::iterator":
        return _picomplex.VectorComplexDouble_end(self)

    def rbegin(self) -> "std::vector< std::complex< double > >::reverse_iterator":
        return _picomplex.VectorComplexDouble_rbegin(self)

    def rend(self) -> "std::vector< std::complex< double > >::reverse_iterator":
        return _picomplex.VectorComplexDouble_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorComplexDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::complex< double > >::allocator_type":
        return _picomplex.VectorComplexDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorComplexDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::complex< double > >::iterator":
        return _picomplex.VectorComplexDouble_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorComplexDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::complex< double > >::value_type const &') -> "void":
        return _picomplex.VectorComplexDouble_push_back(self, x)

    def front(self) -> "std::vector< std::complex< double > >::value_type const &":
        return _picomplex.VectorComplexDouble_front(self)

    def back(self) -> "std::vector< std::complex< double > >::value_type const &":
        return _picomplex.VectorComplexDouble_back(self)

    def assign(self, n: 'std::vector< std::complex< double > >::size_type', x: 'std::vector< std::complex< double > >::value_type const &') -> "void":
        return _picomplex.VectorComplexDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorComplexDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorComplexDouble_insert(self, *args)

    def reserve(self, n: 'std::vector< std::complex< double > >::size_type') -> "void":
        return _picomplex.VectorComplexDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::complex< double > >::size_type":
        return _picomplex.VectorComplexDouble_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorComplexDouble
    __del__ = lambda self: None
VectorComplexDouble_swigregister = _picomplex.VectorComplexDouble_swigregister
VectorComplexDouble_swigregister(VectorComplexDouble)

class ArrayBoolTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayBoolTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayBoolTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayBoolTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayBoolTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayBoolTwo___bool__(self)

    def __len__(self) -> "std::array< bool,2 >::size_type":
        return _picomplex.ArrayBoolTwo___len__(self)

    def __getslice__(self, i: 'std::array< bool,2 >::difference_type', j: 'std::array< bool,2 >::difference_type') -> "std::array< bool,2 > *":
        return _picomplex.ArrayBoolTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayBoolTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< bool,2 >::difference_type', j: 'std::array< bool,2 >::difference_type') -> "void":
        return _picomplex.ArrayBoolTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayBoolTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< bool,2 >::value_type const &":
        return _picomplex.ArrayBoolTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayBoolTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayBoolTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayBoolTwo_empty(self)

    def size(self) -> "std::array< bool,2 >::size_type":
        return _picomplex.ArrayBoolTwo_size(self)

    def swap(self, v: 'ArrayBoolTwo') -> "void":
        return _picomplex.ArrayBoolTwo_swap(self, v)

    def begin(self) -> "std::array< bool,2 >::iterator":
        return _picomplex.ArrayBoolTwo_begin(self)

    def end(self) -> "std::array< bool,2 >::iterator":
        return _picomplex.ArrayBoolTwo_end(self)

    def rbegin(self) -> "std::array< bool,2 >::reverse_iterator":
        return _picomplex.ArrayBoolTwo_rbegin(self)

    def rend(self) -> "std::array< bool,2 >::reverse_iterator":
        return _picomplex.ArrayBoolTwo_rend(self)

    def front(self) -> "std::array< bool,2 >::value_type const &":
        return _picomplex.ArrayBoolTwo_front(self)

    def back(self) -> "std::array< bool,2 >::value_type const &":
        return _picomplex.ArrayBoolTwo_back(self)

    def fill(self, u: 'std::array< bool,2 >::value_type const &') -> "void":
        return _picomplex.ArrayBoolTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayBoolTwo
    __del__ = lambda self: None
ArrayBoolTwo_swigregister = _picomplex.ArrayBoolTwo_swigregister
ArrayBoolTwo_swigregister(ArrayBoolTwo)

class ArrayStringTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStringTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStringTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayStringTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayStringTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayStringTwo___bool__(self)

    def __len__(self) -> "std::array< std::string,2 >::size_type":
        return _picomplex.ArrayStringTwo___len__(self)

    def __getslice__(self, i: 'std::array< std::string,2 >::difference_type', j: 'std::array< std::string,2 >::difference_type') -> "std::array< std::string,2 > *":
        return _picomplex.ArrayStringTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayStringTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< std::string,2 >::difference_type', j: 'std::array< std::string,2 >::difference_type') -> "void":
        return _picomplex.ArrayStringTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayStringTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< std::string,2 >::value_type const &":
        return _picomplex.ArrayStringTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayStringTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayStringTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayStringTwo_empty(self)

    def size(self) -> "std::array< std::string,2 >::size_type":
        return _picomplex.ArrayStringTwo_size(self)

    def swap(self, v: 'ArrayStringTwo') -> "void":
        return _picomplex.ArrayStringTwo_swap(self, v)

    def begin(self) -> "std::array< std::string,2 >::iterator":
        return _picomplex.ArrayStringTwo_begin(self)

    def end(self) -> "std::array< std::string,2 >::iterator":
        return _picomplex.ArrayStringTwo_end(self)

    def rbegin(self) -> "std::array< std::string,2 >::reverse_iterator":
        return _picomplex.ArrayStringTwo_rbegin(self)

    def rend(self) -> "std::array< std::string,2 >::reverse_iterator":
        return _picomplex.ArrayStringTwo_rend(self)

    def front(self) -> "std::array< std::string,2 >::value_type const &":
        return _picomplex.ArrayStringTwo_front(self)

    def back(self) -> "std::array< std::string,2 >::value_type const &":
        return _picomplex.ArrayStringTwo_back(self)

    def fill(self, u: 'std::array< std::string,2 >::value_type const &') -> "void":
        return _picomplex.ArrayStringTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayStringTwo
    __del__ = lambda self: None
ArrayStringTwo_swigregister = _picomplex.ArrayStringTwo_swigregister
ArrayStringTwo_swigregister(ArrayStringTwo)

class ArrayIntTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayIntTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayIntTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayIntTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayIntTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayIntTwo___bool__(self)

    def __len__(self) -> "std::array< int,2 >::size_type":
        return _picomplex.ArrayIntTwo___len__(self)

    def __getslice__(self, i: 'std::array< int,2 >::difference_type', j: 'std::array< int,2 >::difference_type') -> "std::array< int,2 > *":
        return _picomplex.ArrayIntTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayIntTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< int,2 >::difference_type', j: 'std::array< int,2 >::difference_type') -> "void":
        return _picomplex.ArrayIntTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayIntTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< int,2 >::value_type const &":
        return _picomplex.ArrayIntTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayIntTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayIntTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayIntTwo_empty(self)

    def size(self) -> "std::array< int,2 >::size_type":
        return _picomplex.ArrayIntTwo_size(self)

    def swap(self, v: 'ArrayIntTwo') -> "void":
        return _picomplex.ArrayIntTwo_swap(self, v)

    def begin(self) -> "std::array< int,2 >::iterator":
        return _picomplex.ArrayIntTwo_begin(self)

    def end(self) -> "std::array< int,2 >::iterator":
        return _picomplex.ArrayIntTwo_end(self)

    def rbegin(self) -> "std::array< int,2 >::reverse_iterator":
        return _picomplex.ArrayIntTwo_rbegin(self)

    def rend(self) -> "std::array< int,2 >::reverse_iterator":
        return _picomplex.ArrayIntTwo_rend(self)

    def front(self) -> "std::array< int,2 >::value_type const &":
        return _picomplex.ArrayIntTwo_front(self)

    def back(self) -> "std::array< int,2 >::value_type const &":
        return _picomplex.ArrayIntTwo_back(self)

    def fill(self, u: 'std::array< int,2 >::value_type const &') -> "void":
        return _picomplex.ArrayIntTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayIntTwo
    __del__ = lambda self: None
ArrayIntTwo_swigregister = _picomplex.ArrayIntTwo_swigregister
ArrayIntTwo_swigregister(ArrayIntTwo)

class ArrayFloatTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayFloatTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayFloatTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayFloatTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayFloatTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayFloatTwo___bool__(self)

    def __len__(self) -> "std::array< float,2 >::size_type":
        return _picomplex.ArrayFloatTwo___len__(self)

    def __getslice__(self, i: 'std::array< float,2 >::difference_type', j: 'std::array< float,2 >::difference_type') -> "std::array< float,2 > *":
        return _picomplex.ArrayFloatTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayFloatTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< float,2 >::difference_type', j: 'std::array< float,2 >::difference_type') -> "void":
        return _picomplex.ArrayFloatTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayFloatTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< float,2 >::value_type const &":
        return _picomplex.ArrayFloatTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayFloatTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayFloatTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayFloatTwo_empty(self)

    def size(self) -> "std::array< float,2 >::size_type":
        return _picomplex.ArrayFloatTwo_size(self)

    def swap(self, v: 'ArrayFloatTwo') -> "void":
        return _picomplex.ArrayFloatTwo_swap(self, v)

    def begin(self) -> "std::array< float,2 >::iterator":
        return _picomplex.ArrayFloatTwo_begin(self)

    def end(self) -> "std::array< float,2 >::iterator":
        return _picomplex.ArrayFloatTwo_end(self)

    def rbegin(self) -> "std::array< float,2 >::reverse_iterator":
        return _picomplex.ArrayFloatTwo_rbegin(self)

    def rend(self) -> "std::array< float,2 >::reverse_iterator":
        return _picomplex.ArrayFloatTwo_rend(self)

    def front(self) -> "std::array< float,2 >::value_type const &":
        return _picomplex.ArrayFloatTwo_front(self)

    def back(self) -> "std::array< float,2 >::value_type const &":
        return _picomplex.ArrayFloatTwo_back(self)

    def fill(self, u: 'std::array< float,2 >::value_type const &') -> "void":
        return _picomplex.ArrayFloatTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayFloatTwo
    __del__ = lambda self: None
ArrayFloatTwo_swigregister = _picomplex.ArrayFloatTwo_swigregister
ArrayFloatTwo_swigregister(ArrayFloatTwo)

class ArrayDoubleTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDoubleTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDoubleTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayDoubleTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayDoubleTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayDoubleTwo___bool__(self)

    def __len__(self) -> "std::array< double,2 >::size_type":
        return _picomplex.ArrayDoubleTwo___len__(self)

    def __getslice__(self, i: 'std::array< double,2 >::difference_type', j: 'std::array< double,2 >::difference_type') -> "std::array< double,2 > *":
        return _picomplex.ArrayDoubleTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayDoubleTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< double,2 >::difference_type', j: 'std::array< double,2 >::difference_type') -> "void":
        return _picomplex.ArrayDoubleTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayDoubleTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< double,2 >::value_type const &":
        return _picomplex.ArrayDoubleTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayDoubleTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayDoubleTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayDoubleTwo_empty(self)

    def size(self) -> "std::array< double,2 >::size_type":
        return _picomplex.ArrayDoubleTwo_size(self)

    def swap(self, v: 'ArrayDoubleTwo') -> "void":
        return _picomplex.ArrayDoubleTwo_swap(self, v)

    def begin(self) -> "std::array< double,2 >::iterator":
        return _picomplex.ArrayDoubleTwo_begin(self)

    def end(self) -> "std::array< double,2 >::iterator":
        return _picomplex.ArrayDoubleTwo_end(self)

    def rbegin(self) -> "std::array< double,2 >::reverse_iterator":
        return _picomplex.ArrayDoubleTwo_rbegin(self)

    def rend(self) -> "std::array< double,2 >::reverse_iterator":
        return _picomplex.ArrayDoubleTwo_rend(self)

    def front(self) -> "std::array< double,2 >::value_type const &":
        return _picomplex.ArrayDoubleTwo_front(self)

    def back(self) -> "std::array< double,2 >::value_type const &":
        return _picomplex.ArrayDoubleTwo_back(self)

    def fill(self, u: 'std::array< double,2 >::value_type const &') -> "void":
        return _picomplex.ArrayDoubleTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayDoubleTwo
    __del__ = lambda self: None
ArrayDoubleTwo_swigregister = _picomplex.ArrayDoubleTwo_swigregister
ArrayDoubleTwo_swigregister(ArrayDoubleTwo)

class ArrayDoubleThree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDoubleThree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDoubleThree, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayDoubleThree_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayDoubleThree___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayDoubleThree___bool__(self)

    def __len__(self) -> "std::array< double,3 >::size_type":
        return _picomplex.ArrayDoubleThree___len__(self)

    def __getslice__(self, i: 'std::array< double,3 >::difference_type', j: 'std::array< double,3 >::difference_type') -> "std::array< double,3 > *":
        return _picomplex.ArrayDoubleThree___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayDoubleThree___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< double,3 >::difference_type', j: 'std::array< double,3 >::difference_type') -> "void":
        return _picomplex.ArrayDoubleThree___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayDoubleThree___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< double,3 >::value_type const &":
        return _picomplex.ArrayDoubleThree___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayDoubleThree___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayDoubleThree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayDoubleThree_empty(self)

    def size(self) -> "std::array< double,3 >::size_type":
        return _picomplex.ArrayDoubleThree_size(self)

    def swap(self, v: 'ArrayDoubleThree') -> "void":
        return _picomplex.ArrayDoubleThree_swap(self, v)

    def begin(self) -> "std::array< double,3 >::iterator":
        return _picomplex.ArrayDoubleThree_begin(self)

    def end(self) -> "std::array< double,3 >::iterator":
        return _picomplex.ArrayDoubleThree_end(self)

    def rbegin(self) -> "std::array< double,3 >::reverse_iterator":
        return _picomplex.ArrayDoubleThree_rbegin(self)

    def rend(self) -> "std::array< double,3 >::reverse_iterator":
        return _picomplex.ArrayDoubleThree_rend(self)

    def front(self) -> "std::array< double,3 >::value_type const &":
        return _picomplex.ArrayDoubleThree_front(self)

    def back(self) -> "std::array< double,3 >::value_type const &":
        return _picomplex.ArrayDoubleThree_back(self)

    def fill(self, u: 'std::array< double,3 >::value_type const &') -> "void":
        return _picomplex.ArrayDoubleThree_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayDoubleThree
    __del__ = lambda self: None
ArrayDoubleThree_swigregister = _picomplex.ArrayDoubleThree_swigregister
ArrayDoubleThree_swigregister(ArrayDoubleThree)

class ArrayVectorSizeTTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayVectorSizeTTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayVectorSizeTTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayVectorSizeTTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayVectorSizeTTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayVectorSizeTTwo___bool__(self)

    def __len__(self) -> "std::array< std::vector< size_t >,2 >::size_type":
        return _picomplex.ArrayVectorSizeTTwo___len__(self)

    def __getslice__(self, i: 'std::array< std::vector< size_t >,2 >::difference_type', j: 'std::array< std::vector< size_t >,2 >::difference_type') -> "std::array< std::vector< size_t,std::allocator< size_t > >,2 > *":
        return _picomplex.ArrayVectorSizeTTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayVectorSizeTTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< std::vector< size_t >,2 >::difference_type', j: 'std::array< std::vector< size_t >,2 >::difference_type') -> "void":
        return _picomplex.ArrayVectorSizeTTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayVectorSizeTTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< std::vector< size_t >,2 >::value_type const &":
        return _picomplex.ArrayVectorSizeTTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayVectorSizeTTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayVectorSizeTTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayVectorSizeTTwo_empty(self)

    def size(self) -> "std::array< std::vector< size_t >,2 >::size_type":
        return _picomplex.ArrayVectorSizeTTwo_size(self)

    def swap(self, v: 'ArrayVectorSizeTTwo') -> "void":
        return _picomplex.ArrayVectorSizeTTwo_swap(self, v)

    def begin(self) -> "std::array< std::vector< size_t >,2 >::iterator":
        return _picomplex.ArrayVectorSizeTTwo_begin(self)

    def end(self) -> "std::array< std::vector< size_t >,2 >::iterator":
        return _picomplex.ArrayVectorSizeTTwo_end(self)

    def rbegin(self) -> "std::array< std::vector< size_t >,2 >::reverse_iterator":
        return _picomplex.ArrayVectorSizeTTwo_rbegin(self)

    def rend(self) -> "std::array< std::vector< size_t >,2 >::reverse_iterator":
        return _picomplex.ArrayVectorSizeTTwo_rend(self)

    def front(self) -> "std::array< std::vector< size_t >,2 >::value_type const &":
        return _picomplex.ArrayVectorSizeTTwo_front(self)

    def back(self) -> "std::array< std::vector< size_t >,2 >::value_type const &":
        return _picomplex.ArrayVectorSizeTTwo_back(self)

    def fill(self, u: 'VectorSizeT') -> "void":
        return _picomplex.ArrayVectorSizeTTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayVectorSizeTTwo
    __del__ = lambda self: None
ArrayVectorSizeTTwo_swigregister = _picomplex.ArrayVectorSizeTTwo_swigregister
ArrayVectorSizeTTwo_swigregister(ArrayVectorSizeTTwo)

class VectorArraySizeTTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorArraySizeTTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorArraySizeTTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.VectorArraySizeTTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.VectorArraySizeTTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.VectorArraySizeTTwo___bool__(self)

    def __len__(self) -> "std::vector< std::array< size_t,2 > >::size_type":
        return _picomplex.VectorArraySizeTTwo___len__(self)

    def __getslice__(self, i: 'std::vector< std::array< size_t,2 > >::difference_type', j: 'std::vector< std::array< size_t,2 > >::difference_type') -> "std::vector< std::array< size_t,2 >,std::allocator< std::array< size_t,2 > > > *":
        return _picomplex.VectorArraySizeTTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.VectorArraySizeTTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::array< size_t,2 > >::difference_type', j: 'std::vector< std::array< size_t,2 > >::difference_type') -> "void":
        return _picomplex.VectorArraySizeTTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.VectorArraySizeTTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::array< size_t,2 > >::value_type const &":
        return _picomplex.VectorArraySizeTTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.VectorArraySizeTTwo___setitem__(self, *args)

    def pop(self) -> "std::vector< std::array< size_t,2 > >::value_type":
        return _picomplex.VectorArraySizeTTwo_pop(self)

    def append(self, x: 'std::vector< std::array< size_t,2 > >::value_type const &') -> "void":
        return _picomplex.VectorArraySizeTTwo_append(self, x)

    def empty(self) -> "bool":
        return _picomplex.VectorArraySizeTTwo_empty(self)

    def size(self) -> "std::vector< std::array< size_t,2 > >::size_type":
        return _picomplex.VectorArraySizeTTwo_size(self)

    def swap(self, v: 'VectorArraySizeTTwo') -> "void":
        return _picomplex.VectorArraySizeTTwo_swap(self, v)

    def begin(self) -> "std::vector< std::array< size_t,2 > >::iterator":
        return _picomplex.VectorArraySizeTTwo_begin(self)

    def end(self) -> "std::vector< std::array< size_t,2 > >::iterator":
        return _picomplex.VectorArraySizeTTwo_end(self)

    def rbegin(self) -> "std::vector< std::array< size_t,2 > >::reverse_iterator":
        return _picomplex.VectorArraySizeTTwo_rbegin(self)

    def rend(self) -> "std::vector< std::array< size_t,2 > >::reverse_iterator":
        return _picomplex.VectorArraySizeTTwo_rend(self)

    def clear(self) -> "void":
        return _picomplex.VectorArraySizeTTwo_clear(self)

    def get_allocator(self) -> "std::vector< std::array< size_t,2 > >::allocator_type":
        return _picomplex.VectorArraySizeTTwo_get_allocator(self)

    def pop_back(self) -> "void":
        return _picomplex.VectorArraySizeTTwo_pop_back(self)

    def erase(self, *args) -> "std::vector< std::array< size_t,2 > >::iterator":
        return _picomplex.VectorArraySizeTTwo_erase(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_VectorArraySizeTTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::array< size_t,2 > >::value_type const &') -> "void":
        return _picomplex.VectorArraySizeTTwo_push_back(self, x)

    def front(self) -> "std::vector< std::array< size_t,2 > >::value_type const &":
        return _picomplex.VectorArraySizeTTwo_front(self)

    def back(self) -> "std::vector< std::array< size_t,2 > >::value_type const &":
        return _picomplex.VectorArraySizeTTwo_back(self)

    def assign(self, n: 'std::vector< std::array< size_t,2 > >::size_type', x: 'std::vector< std::array< size_t,2 > >::value_type const &') -> "void":
        return _picomplex.VectorArraySizeTTwo_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _picomplex.VectorArraySizeTTwo_resize(self, *args)

    def insert(self, *args) -> "void":
        return _picomplex.VectorArraySizeTTwo_insert(self, *args)

    def reserve(self, n: 'std::vector< std::array< size_t,2 > >::size_type') -> "void":
        return _picomplex.VectorArraySizeTTwo_reserve(self, n)

    def capacity(self) -> "std::vector< std::array< size_t,2 > >::size_type":
        return _picomplex.VectorArraySizeTTwo_capacity(self)
    __swig_destroy__ = _picomplex.delete_VectorArraySizeTTwo
    __del__ = lambda self: None
VectorArraySizeTTwo_swigregister = _picomplex.VectorArraySizeTTwo_swigregister
VectorArraySizeTTwo_swigregister(VectorArraySizeTTwo)

class ArrayEigenVectorDoubleTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayEigenVectorDoubleTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayEigenVectorDoubleTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.ArrayEigenVectorDoubleTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.ArrayEigenVectorDoubleTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.ArrayEigenVectorDoubleTwo___bool__(self)

    def __len__(self) -> "std::array< eigen_vector_double_t,2 >::size_type":
        return _picomplex.ArrayEigenVectorDoubleTwo___len__(self)

    def __getslice__(self, i: 'std::array< eigen_vector_double_t,2 >::difference_type', j: 'std::array< eigen_vector_double_t,2 >::difference_type') -> "std::array< eigen_vector_double_t,2 > *":
        return _picomplex.ArrayEigenVectorDoubleTwo___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo___setslice__(self, *args)

    def __delslice__(self, i: 'std::array< eigen_vector_double_t,2 >::difference_type', j: 'std::array< eigen_vector_double_t,2 >::difference_type') -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< eigen_vector_double_t,2 >::value_type const &":
        return _picomplex.ArrayEigenVectorDoubleTwo___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo___setitem__(self, *args)

    def __init__(self, *args):
        this = _picomplex.new_ArrayEigenVectorDoubleTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.ArrayEigenVectorDoubleTwo_empty(self)

    def size(self) -> "std::array< eigen_vector_double_t,2 >::size_type":
        return _picomplex.ArrayEigenVectorDoubleTwo_size(self)

    def swap(self, v: 'ArrayEigenVectorDoubleTwo') -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo_swap(self, v)

    def begin(self) -> "std::array< eigen_vector_double_t,2 >::iterator":
        return _picomplex.ArrayEigenVectorDoubleTwo_begin(self)

    def end(self) -> "std::array< eigen_vector_double_t,2 >::iterator":
        return _picomplex.ArrayEigenVectorDoubleTwo_end(self)

    def rbegin(self) -> "std::array< eigen_vector_double_t,2 >::reverse_iterator":
        return _picomplex.ArrayEigenVectorDoubleTwo_rbegin(self)

    def rend(self) -> "std::array< eigen_vector_double_t,2 >::reverse_iterator":
        return _picomplex.ArrayEigenVectorDoubleTwo_rend(self)

    def front(self) -> "std::array< eigen_vector_double_t,2 >::value_type const &":
        return _picomplex.ArrayEigenVectorDoubleTwo_front(self)

    def back(self) -> "std::array< eigen_vector_double_t,2 >::value_type const &":
        return _picomplex.ArrayEigenVectorDoubleTwo_back(self)

    def fill(self, u: 'std::array< eigen_vector_double_t,2 >::value_type const &') -> "void":
        return _picomplex.ArrayEigenVectorDoubleTwo_fill(self, u)
    __swig_destroy__ = _picomplex.delete_ArrayEigenVectorDoubleTwo
    __del__ = lambda self: None
ArrayEigenVectorDoubleTwo_swigregister = _picomplex.ArrayEigenVectorDoubleTwo_swigregister
ArrayEigenVectorDoubleTwo_swigregister(ArrayEigenVectorDoubleTwo)

class SetInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.SetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.SetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.SetInt___bool__(self)

    def __len__(self) -> "std::set< int >::size_type":
        return _picomplex.SetInt___len__(self)

    def append(self, x: 'std::set< int >::value_type') -> "void":
        return _picomplex.SetInt_append(self, x)

    def __contains__(self, x: 'std::set< int >::value_type') -> "bool":
        return _picomplex.SetInt___contains__(self, x)

    def __getitem__(self, i: 'std::set< int >::difference_type') -> "std::set< int >::value_type":
        return _picomplex.SetInt___getitem__(self, i)

    def add(self, x: 'std::set< int >::value_type') -> "void":
        return _picomplex.SetInt_add(self, x)

    def discard(self, x: 'std::set< int >::value_type') -> "void":
        return _picomplex.SetInt_discard(self, x)

    def __init__(self, *args):
        this = _picomplex.new_SetInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.SetInt_empty(self)

    def size(self) -> "std::set< int >::size_type":
        return _picomplex.SetInt_size(self)

    def clear(self) -> "void":
        return _picomplex.SetInt_clear(self)

    def swap(self, v: 'SetInt') -> "void":
        return _picomplex.SetInt_swap(self, v)

    def count(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::size_type":
        return _picomplex.SetInt_count(self, x)

    def begin(self) -> "std::set< int >::iterator":
        return _picomplex.SetInt_begin(self)

    def end(self) -> "std::set< int >::iterator":
        return _picomplex.SetInt_end(self)

    def rbegin(self) -> "std::set< int >::reverse_iterator":
        return _picomplex.SetInt_rbegin(self)

    def rend(self) -> "std::set< int >::reverse_iterator":
        return _picomplex.SetInt_rend(self)

    def erase(self, *args) -> "void":
        return _picomplex.SetInt_erase(self, *args)

    def find(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _picomplex.SetInt_find(self, x)

    def lower_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _picomplex.SetInt_lower_bound(self, x)

    def upper_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _picomplex.SetInt_upper_bound(self, x)

    def equal_range(self, x: 'std::set< int >::key_type const &') -> "std::pair< std::set< int >::iterator,std::set< int >::iterator >":
        return _picomplex.SetInt_equal_range(self, x)

    def insert(self, __x: 'std::set< int >::value_type const &') -> "std::pair< std::set< int >::iterator,bool >":
        return _picomplex.SetInt_insert(self, __x)
    __swig_destroy__ = _picomplex.delete_SetInt
    __del__ = lambda self: None
SetInt_swigregister = _picomplex.SetInt_swigregister
SetInt_swigregister(SetInt)

class SetFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetFloat, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.SetFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.SetFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.SetFloat___bool__(self)

    def __len__(self) -> "std::set< float >::size_type":
        return _picomplex.SetFloat___len__(self)

    def append(self, x: 'std::set< float >::value_type') -> "void":
        return _picomplex.SetFloat_append(self, x)

    def __contains__(self, x: 'std::set< float >::value_type') -> "bool":
        return _picomplex.SetFloat___contains__(self, x)

    def __getitem__(self, i: 'std::set< float >::difference_type') -> "std::set< float >::value_type":
        return _picomplex.SetFloat___getitem__(self, i)

    def add(self, x: 'std::set< float >::value_type') -> "void":
        return _picomplex.SetFloat_add(self, x)

    def discard(self, x: 'std::set< float >::value_type') -> "void":
        return _picomplex.SetFloat_discard(self, x)

    def __init__(self, *args):
        this = _picomplex.new_SetFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.SetFloat_empty(self)

    def size(self) -> "std::set< float >::size_type":
        return _picomplex.SetFloat_size(self)

    def clear(self) -> "void":
        return _picomplex.SetFloat_clear(self)

    def swap(self, v: 'SetFloat') -> "void":
        return _picomplex.SetFloat_swap(self, v)

    def count(self, x: 'std::set< float >::key_type const &') -> "std::set< float >::size_type":
        return _picomplex.SetFloat_count(self, x)

    def begin(self) -> "std::set< float >::iterator":
        return _picomplex.SetFloat_begin(self)

    def end(self) -> "std::set< float >::iterator":
        return _picomplex.SetFloat_end(self)

    def rbegin(self) -> "std::set< float >::reverse_iterator":
        return _picomplex.SetFloat_rbegin(self)

    def rend(self) -> "std::set< float >::reverse_iterator":
        return _picomplex.SetFloat_rend(self)

    def erase(self, *args) -> "void":
        return _picomplex.SetFloat_erase(self, *args)

    def find(self, x: 'std::set< float >::key_type const &') -> "std::set< float >::iterator":
        return _picomplex.SetFloat_find(self, x)

    def lower_bound(self, x: 'std::set< float >::key_type const &') -> "std::set< float >::iterator":
        return _picomplex.SetFloat_lower_bound(self, x)

    def upper_bound(self, x: 'std::set< float >::key_type const &') -> "std::set< float >::iterator":
        return _picomplex.SetFloat_upper_bound(self, x)

    def equal_range(self, x: 'std::set< float >::key_type const &') -> "std::pair< std::set< float >::iterator,std::set< float >::iterator >":
        return _picomplex.SetFloat_equal_range(self, x)

    def insert(self, __x: 'std::set< float >::value_type const &') -> "std::pair< std::set< float >::iterator,bool >":
        return _picomplex.SetFloat_insert(self, __x)
    __swig_destroy__ = _picomplex.delete_SetFloat
    __del__ = lambda self: None
SetFloat_swigregister = _picomplex.SetFloat_swigregister
SetFloat_swigregister(SetFloat)

class SetStateOne(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetStateOne, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetStateOne, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.SetStateOne_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.SetStateOne___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.SetStateOne___bool__(self)

    def __len__(self) -> "std::set< StateOne >::size_type":
        return _picomplex.SetStateOne___len__(self)

    def append(self, x: 'StateOne') -> "void":
        return _picomplex.SetStateOne_append(self, x)

    def __contains__(self, x: 'StateOne') -> "bool":
        return _picomplex.SetStateOne___contains__(self, x)

    def __getitem__(self, i: 'std::set< StateOne >::difference_type') -> "std::set< StateOne >::value_type":
        return _picomplex.SetStateOne___getitem__(self, i)

    def add(self, x: 'StateOne') -> "void":
        return _picomplex.SetStateOne_add(self, x)

    def discard(self, x: 'StateOne') -> "void":
        return _picomplex.SetStateOne_discard(self, x)

    def __init__(self, *args):
        this = _picomplex.new_SetStateOne(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.SetStateOne_empty(self)

    def size(self) -> "std::set< StateOne >::size_type":
        return _picomplex.SetStateOne_size(self)

    def clear(self) -> "void":
        return _picomplex.SetStateOne_clear(self)

    def swap(self, v: 'SetStateOne') -> "void":
        return _picomplex.SetStateOne_swap(self, v)

    def count(self, x: 'StateOne') -> "std::set< StateOne >::size_type":
        return _picomplex.SetStateOne_count(self, x)

    def begin(self) -> "std::set< StateOne >::iterator":
        return _picomplex.SetStateOne_begin(self)

    def end(self) -> "std::set< StateOne >::iterator":
        return _picomplex.SetStateOne_end(self)

    def rbegin(self) -> "std::set< StateOne >::reverse_iterator":
        return _picomplex.SetStateOne_rbegin(self)

    def rend(self) -> "std::set< StateOne >::reverse_iterator":
        return _picomplex.SetStateOne_rend(self)

    def erase(self, *args) -> "void":
        return _picomplex.SetStateOne_erase(self, *args)

    def find(self, x: 'StateOne') -> "std::set< StateOne >::iterator":
        return _picomplex.SetStateOne_find(self, x)

    def lower_bound(self, x: 'StateOne') -> "std::set< StateOne >::iterator":
        return _picomplex.SetStateOne_lower_bound(self, x)

    def upper_bound(self, x: 'StateOne') -> "std::set< StateOne >::iterator":
        return _picomplex.SetStateOne_upper_bound(self, x)

    def equal_range(self, x: 'StateOne') -> "std::pair< std::set< StateOne >::iterator,std::set< StateOne >::iterator >":
        return _picomplex.SetStateOne_equal_range(self, x)

    def insert(self, __x: 'StateOne') -> "std::pair< std::set< StateOne >::iterator,bool >":
        return _picomplex.SetStateOne_insert(self, __x)
    __swig_destroy__ = _picomplex.delete_SetStateOne
    __del__ = lambda self: None
SetStateOne_swigregister = _picomplex.SetStateOne_swigregister
SetStateOne_swigregister(SetStateOne)

class SetStateTwo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetStateTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetStateTwo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _picomplex.SetStateTwo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _picomplex.SetStateTwo___nonzero__(self)

    def __bool__(self) -> "bool":
        return _picomplex.SetStateTwo___bool__(self)

    def __len__(self) -> "std::set< StateTwo >::size_type":
        return _picomplex.SetStateTwo___len__(self)

    def append(self, x: 'StateTwo') -> "void":
        return _picomplex.SetStateTwo_append(self, x)

    def __contains__(self, x: 'StateTwo') -> "bool":
        return _picomplex.SetStateTwo___contains__(self, x)

    def __getitem__(self, i: 'std::set< StateTwo >::difference_type') -> "std::set< StateTwo >::value_type":
        return _picomplex.SetStateTwo___getitem__(self, i)

    def add(self, x: 'StateTwo') -> "void":
        return _picomplex.SetStateTwo_add(self, x)

    def discard(self, x: 'StateTwo') -> "void":
        return _picomplex.SetStateTwo_discard(self, x)

    def __init__(self, *args):
        this = _picomplex.new_SetStateTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _picomplex.SetStateTwo_empty(self)

    def size(self) -> "std::set< StateTwo >::size_type":
        return _picomplex.SetStateTwo_size(self)

    def clear(self) -> "void":
        return _picomplex.SetStateTwo_clear(self)

    def swap(self, v: 'SetStateTwo') -> "void":
        return _picomplex.SetStateTwo_swap(self, v)

    def count(self, x: 'StateTwo') -> "std::set< StateTwo >::size_type":
        return _picomplex.SetStateTwo_count(self, x)

    def begin(self) -> "std::set< StateTwo >::iterator":
        return _picomplex.SetStateTwo_begin(self)

    def end(self) -> "std::set< StateTwo >::iterator":
        return _picomplex.SetStateTwo_end(self)

    def rbegin(self) -> "std::set< StateTwo >::reverse_iterator":
        return _picomplex.SetStateTwo_rbegin(self)

    def rend(self) -> "std::set< StateTwo >::reverse_iterator":
        return _picomplex.SetStateTwo_rend(self)

    def erase(self, *args) -> "void":
        return _picomplex.SetStateTwo_erase(self, *args)

    def find(self, x: 'StateTwo') -> "std::set< StateTwo >::iterator":
        return _picomplex.SetStateTwo_find(self, x)

    def lower_bound(self, x: 'StateTwo') -> "std::set< StateTwo >::iterator":
        return _picomplex.SetStateTwo_lower_bound(self, x)

    def upper_bound(self, x: 'StateTwo') -> "std::set< StateTwo >::iterator":
        return _picomplex.SetStateTwo_upper_bound(self, x)

    def equal_range(self, x: 'StateTwo') -> "std::pair< std::set< StateTwo >::iterator,std::set< StateTwo >::iterator >":
        return _picomplex.SetStateTwo_equal_range(self, x)

    def insert(self, __x: 'StateTwo') -> "std::pair< std::set< StateTwo >::iterator,bool >":
        return _picomplex.SetStateTwo_insert(self, __x)
    __swig_destroy__ = _picomplex.delete_SetStateTwo
    __del__ = lambda self: None
SetStateTwo_swigregister = _picomplex.SetStateTwo_swigregister
SetStateTwo_swigregister(SetStateTwo)

NA = _picomplex.NA
EVEN = _picomplex.EVEN
ODD = _picomplex.ODD
NUMEROV = _picomplex.NUMEROV
WHITTAKER = _picomplex.WHITTAKER
class Symmetry(_object):
    """Proxy of C++ Symmetry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symmetry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symmetry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inversion"] = _picomplex.Symmetry_inversion_set
    __swig_getmethods__["inversion"] = _picomplex.Symmetry_inversion_get
    if _newclass:
        inversion = _swig_property(_picomplex.Symmetry_inversion_get, _picomplex.Symmetry_inversion_set)
    __swig_setmethods__["reflection"] = _picomplex.Symmetry_reflection_set
    __swig_getmethods__["reflection"] = _picomplex.Symmetry_reflection_get
    if _newclass:
        reflection = _swig_property(_picomplex.Symmetry_reflection_get, _picomplex.Symmetry_reflection_set)
    __swig_setmethods__["permutation"] = _picomplex.Symmetry_permutation_set
    __swig_getmethods__["permutation"] = _picomplex.Symmetry_permutation_get
    if _newclass:
        permutation = _swig_property(_picomplex.Symmetry_permutation_get, _picomplex.Symmetry_permutation_set)
    __swig_setmethods__["rotation"] = _picomplex.Symmetry_rotation_set
    __swig_getmethods__["rotation"] = _picomplex.Symmetry_rotation_get
    if _newclass:
        rotation = _swig_property(_picomplex.Symmetry_rotation_get, _picomplex.Symmetry_rotation_set)

    def __init__(self):
        """__init__(self) -> Symmetry"""
        this = _picomplex.new_Symmetry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _picomplex.delete_Symmetry
    __del__ = lambda self: None
Symmetry_swigregister = _picomplex.Symmetry_swigregister
Symmetry_swigregister(Symmetry)
cvar = _picomplex.cvar
au2GHz = cvar.au2GHz
au2Vcm = cvar.au2Vcm
au2G = cvar.au2G
au2um = cvar.au2um
inverse_electric_constant = cvar.inverse_electric_constant
sqrt_inverse_electric_constant = cvar.sqrt_inverse_electric_constant
inverse_electron_rest_mass = cvar.inverse_electron_rest_mass
coulombs_constant = cvar.coulombs_constant
electron_rest_mass = cvar.electron_rest_mass
elementary_charge = cvar.elementary_charge
bohr_magneton = cvar.bohr_magneton
reduced_planck_constant = cvar.reduced_planck_constant
speed_of_light = cvar.speed_of_light
muB = cvar.muB
gS = cvar.gS
gL = cvar.gL
ARB = cvar.ARB
mkl_enabled = cvar.mkl_enabled
gsl_enabled = cvar.gsl_enabled

def __lt__(s1: 'Symmetry', s2: 'Symmetry') -> "bool":
    """
    __lt__(s1, s2) -> bool

    Parameters
    ----------
    s1: Symmetry const &
    s2: Symmetry const &

    """
    return _picomplex.__lt__(s1, s2)


def compute(config_name: 'std::string const &', output_name: 'std::string const &') -> "int":
    """
    compute(config_name, output_name) -> int

    Parameters
    ----------
    config_name: std::string const &
    output_name: std::string const &

    """
    return _picomplex.compute(config_name, output_name)
class QuantumDefect(_object):
    """Proxy of C++ QuantumDefect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantumDefect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuantumDefect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, species, n, l, j) -> QuantumDefect

        Parameters
        ----------
        species: std::string const &
        n: int
        l: int
        j: double

        __init__(self, species, n, l, j, database) -> QuantumDefect

        Parameters
        ----------
        species: std::string const &
        n: int
        l: int
        j: double
        database: std::string const &

        """
        this = _picomplex.new_QuantumDefect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["species"] = _picomplex.QuantumDefect_species_get
    if _newclass:
        species = _swig_property(_picomplex.QuantumDefect_species_get)
    __swig_getmethods__["n"] = _picomplex.QuantumDefect_n_get
    if _newclass:
        n = _swig_property(_picomplex.QuantumDefect_n_get)
    __swig_getmethods__["l"] = _picomplex.QuantumDefect_l_get
    if _newclass:
        l = _swig_property(_picomplex.QuantumDefect_l_get)
    __swig_getmethods__["j"] = _picomplex.QuantumDefect_j_get
    if _newclass:
        j = _swig_property(_picomplex.QuantumDefect_j_get)
    __swig_getmethods__["ac"] = _picomplex.QuantumDefect_ac_get
    if _newclass:
        ac = _swig_property(_picomplex.QuantumDefect_ac_get)
    __swig_getmethods__["Z"] = _picomplex.QuantumDefect_Z_get
    if _newclass:
        Z = _swig_property(_picomplex.QuantumDefect_Z_get)
    __swig_getmethods__["a1"] = _picomplex.QuantumDefect_a1_get
    if _newclass:
        a1 = _swig_property(_picomplex.QuantumDefect_a1_get)
    __swig_getmethods__["a2"] = _picomplex.QuantumDefect_a2_get
    if _newclass:
        a2 = _swig_property(_picomplex.QuantumDefect_a2_get)
    __swig_getmethods__["a3"] = _picomplex.QuantumDefect_a3_get
    if _newclass:
        a3 = _swig_property(_picomplex.QuantumDefect_a3_get)
    __swig_getmethods__["a4"] = _picomplex.QuantumDefect_a4_get
    if _newclass:
        a4 = _swig_property(_picomplex.QuantumDefect_a4_get)
    __swig_getmethods__["rc"] = _picomplex.QuantumDefect_rc_get
    if _newclass:
        rc = _swig_property(_picomplex.QuantumDefect_rc_get)
    __swig_getmethods__["nstar"] = _picomplex.QuantumDefect_nstar_get
    if _newclass:
        nstar = _swig_property(_picomplex.QuantumDefect_nstar_get)
    __swig_getmethods__["energy"] = _picomplex.QuantumDefect_energy_get
    if _newclass:
        energy = _swig_property(_picomplex.QuantumDefect_energy_get)
    __swig_destroy__ = _picomplex.delete_QuantumDefect
    __del__ = lambda self: None
QuantumDefect_swigregister = _picomplex.QuantumDefect_swigregister
QuantumDefect_swigregister(QuantumDefect)


def energy_level(*args) -> "double":
    """
    energy_level(species, n, l, j, database) -> double

    Parameters
    ----------
    species: std::string const &
    n: int
    l: int
    j: double
    database: std::string const &

    energy_level(species, n, l, j) -> double

    Parameters
    ----------
    species: std::string const &
    n: int
    l: int
    j: double

    """
    return _picomplex.energy_level(*args)

def nstar(*args) -> "double":
    """
    nstar(species, n, l, j, database) -> double

    Parameters
    ----------
    species: std::string const &
    n: int
    l: int
    j: double
    database: std::string const &

    nstar(species, n, l, j) -> double

    Parameters
    ----------
    species: std::string const &
    n: int
    l: int
    j: double

    """
    return _picomplex.nstar(*args)

def V(qd: 'QuantumDefect', x: 'double') -> "double":
    """
    V(qd, x) -> double

    Parameters
    ----------
    qd: QuantumDefect const &
    x: double

    """
    return _picomplex.V(qd, x)

def g(qd: 'QuantumDefect', x: 'double') -> "double":
    """
    g(qd, x) -> double

    Parameters
    ----------
    qd: QuantumDefect const &
    x: double

    """
    return _picomplex.g(qd, x)
class Numerov(_object):
    """Proxy of C++ Numerov class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Numerov, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Numerov, name)
    __repr__ = _swig_repr
    dx = _picomplex.Numerov_dx

    def __init__(self, qd: 'QuantumDefect'):
        """
        __init__(self, qd) -> Numerov

        Parameters
        ----------
        qd: QuantumDefect const &

        """
        this = _picomplex.new_Numerov(qd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def integrate(self) -> "eigen_dense_double_t":
        """
        integrate(self) -> eigen_dense_double_t

        Parameters
        ----------
        self: Numerov *

        """
        return _picomplex.Numerov_integrate(self)


    def power_kernel(power: 'int') -> "int":
        """
        power_kernel(power) -> int

        Parameters
        ----------
        power: int

        """
        return _picomplex.Numerov_power_kernel(power)

    power_kernel = staticmethod(power_kernel)
    __swig_destroy__ = _picomplex.delete_Numerov
    __del__ = lambda self: None
Numerov_swigregister = _picomplex.Numerov_swigregister
Numerov_swigregister(Numerov)

def Numerov_power_kernel(power: 'int') -> "int":
    """
    Numerov_power_kernel(power) -> int

    Parameters
    ----------
    power: int

    """
    return _picomplex.Numerov_power_kernel(power)


def HypergeometricU(a: 'double', b: 'double', z: 'double') -> "double":
    """
    HypergeometricU(a, b, z) -> double

    Parameters
    ----------
    a: double
    b: double
    z: double

    """
    return _picomplex.HypergeometricU(a, b, z)

def WhittakerW(k: 'double', m: 'double', z: 'double') -> "double":
    """
    WhittakerW(k, m, z) -> double

    Parameters
    ----------
    k: double
    m: double
    z: double

    """
    return _picomplex.WhittakerW(k, m, z)

def RadialWFWhittaker(r: 'double', nu: 'double', l: 'int') -> "double":
    """
    RadialWFWhittaker(r, nu, l) -> double

    Parameters
    ----------
    r: double
    nu: double
    l: int

    """
    return _picomplex.RadialWFWhittaker(r, nu, l)
class Whittaker(_object):
    """Proxy of C++ Whittaker class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Whittaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Whittaker, name)
    __repr__ = _swig_repr
    dx = _picomplex.Whittaker_dx

    def __init__(self, qd: 'QuantumDefect'):
        """
        __init__(self, qd) -> Whittaker

        Parameters
        ----------
        qd: QuantumDefect const &

        """
        this = _picomplex.new_Whittaker(qd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def integrate(self) -> "eigen_dense_double_t":
        """
        integrate(self) -> eigen_dense_double_t

        Parameters
        ----------
        self: Whittaker *

        """
        return _picomplex.Whittaker_integrate(self)


    def power_kernel(power: 'int') -> "double":
        """
        power_kernel(power) -> double

        Parameters
        ----------
        power: int

        """
        return _picomplex.Whittaker_power_kernel(power)

    power_kernel = staticmethod(power_kernel)
    __swig_destroy__ = _picomplex.delete_Whittaker
    __del__ = lambda self: None
Whittaker_swigregister = _picomplex.Whittaker_swigregister
Whittaker_swigregister(Whittaker)

def Whittaker_power_kernel(power: 'int') -> "double":
    """
    Whittaker_power_kernel(power) -> double

    Parameters
    ----------
    power: int

    """
    return _picomplex.Whittaker_power_kernel(power)

class PerturbativeInteraction(_object):
    """Proxy of C++ PerturbativeInteraction class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerturbativeInteraction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerturbativeInteraction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, cache) -> PerturbativeInteraction

        Parameters
        ----------
        cache: MatrixElementCache &

        __init__(self, angle, cache) -> PerturbativeInteraction

        Parameters
        ----------
        angle: double
        cache: MatrixElementCache &

        """
        this = _picomplex.new_PerturbativeInteraction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getC6(self, *args) -> "eigen_dense_double_t":
        """
        getC6(self, state, deltaN) -> double

        Parameters
        ----------
        state: StateTwo const &
        deltaN: double

        getC6(self, states, deltaN) -> eigen_dense_double_t

        Parameters
        ----------
        states: std::vector< StateTwo,std::allocator< StateTwo > > const &
        deltaN: double

        """
        return _picomplex.PerturbativeInteraction_getC6(self, *args)


    def getC3(self, states: 'VectorStateTwo') -> "eigen_dense_double_t":
        """
        getC3(self, states) -> eigen_dense_double_t

        Parameters
        ----------
        states: std::vector< StateTwo,std::allocator< StateTwo > > const &

        """
        return _picomplex.PerturbativeInteraction_getC3(self, states)


    def getEnergy(self, states: 'VectorStateTwo') -> "eigen_dense_double_t":
        """
        getEnergy(self, states) -> eigen_dense_double_t

        Parameters
        ----------
        states: std::vector< StateTwo,std::allocator< StateTwo > > const &

        """
        return _picomplex.PerturbativeInteraction_getEnergy(self, states)

    __swig_destroy__ = _picomplex.delete_PerturbativeInteraction
    __del__ = lambda self: None
PerturbativeInteraction_swigregister = _picomplex.PerturbativeInteraction_swigregister
PerturbativeInteraction_swigregister(PerturbativeInteraction)

class WignerD(_object):
    """Proxy of C++ WignerD class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WignerD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WignerD, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> WignerD"""
        this = _picomplex.new_WignerD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, *args) -> "std::complex< double >":
        """
        __call__(self, j, m, mp, beta) -> double

        Parameters
        ----------
        j: float
        m: float
        mp: float
        beta: double

        __call__(self, j, m, mp, alpha, beta, gamma) -> std::complex< double >

        Parameters
        ----------
        j: float
        m: float
        mp: float
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex.WignerD___call__(self, *args)

    __swig_destroy__ = _picomplex.delete_WignerD
    __del__ = lambda self: None
WignerD_swigregister = _picomplex.WignerD_swigregister
WignerD_swigregister(WignerD)


def selectionRulesMomentumNew(*args) -> "bool":
    """
    selectionRulesMomentumNew(state1, state2, q) -> bool

    Parameters
    ----------
    state1: StateOne const &
    state2: StateOne const &
    q: int

    selectionRulesMomentumNew(state1, state2) -> bool

    Parameters
    ----------
    state1: StateOne const &
    state2: StateOne const &

    """
    return _picomplex.selectionRulesMomentumNew(*args)

def selectionRulesMultipoleNew(*args) -> "bool":
    """
    selectionRulesMultipoleNew(state1, state2, kappa, q) -> bool

    Parameters
    ----------
    state1: StateOne const &
    state2: StateOne const &
    kappa: int
    q: int

    selectionRulesMultipoleNew(state1, state2, kappa) -> bool

    Parameters
    ----------
    state1: StateOne const &
    state2: StateOne const &
    kappa: int

    """
    return _picomplex.selectionRulesMultipoleNew(*args)
class MatrixElementCache(_object):
    """Proxy of C++ MatrixElementCache class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixElementCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixElementCache, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> MatrixElementCache
        __init__(self, cachedir) -> MatrixElementCache

        Parameters
        ----------
        cachedir: std::string const &

        """
        this = _picomplex.new_MatrixElementCache(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getElectricDipole(self, state_row: 'StateOne', state_col: 'StateOne') -> "double":
        """
        getElectricDipole(self, state_row, state_col) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &

        """
        return _picomplex.MatrixElementCache_getElectricDipole(self, state_row, state_col)


    def getDiamagnetism(self, state_row: 'StateOne', state_col: 'StateOne', k: 'int') -> "double":
        """
        getDiamagnetism(self, state_row, state_col, k) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        k: int

        """
        return _picomplex.MatrixElementCache_getDiamagnetism(self, state_row, state_col, k)


    def getMagneticDipole(self, state_row: 'StateOne', state_col: 'StateOne') -> "double":
        """
        getMagneticDipole(self, state_row, state_col) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &

        """
        return _picomplex.MatrixElementCache_getMagneticDipole(self, state_row, state_col)


    def getElectricMultipole(self, *args) -> "double":
        """
        getElectricMultipole(self, state_row, state_col, k) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        k: int

        getElectricMultipole(self, state_row, state_col, kappa_radial, kappa_angular) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        kappa_radial: int
        kappa_angular: int

        """
        return _picomplex.MatrixElementCache_getElectricMultipole(self, *args)


    def getRadial(self, state_row: 'StateOne', state_col: 'StateOne', kappa: 'int') -> "double":
        """
        getRadial(self, state_row, state_col, kappa) -> double

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        kappa: int

        """
        return _picomplex.MatrixElementCache_getRadial(self, state_row, state_col, kappa)


    def precalculateElectricMomentum(self, basis_one: 'VectorStateOne', q: 'int') -> "void":
        """
        precalculateElectricMomentum(self, basis_one, q)

        Parameters
        ----------
        basis_one: std::vector< StateOne,std::allocator< StateOne > > const &
        q: int

        """
        return _picomplex.MatrixElementCache_precalculateElectricMomentum(self, basis_one, q)


    def precalculateMagneticMomentum(self, basis_one: 'VectorStateOne', q: 'int') -> "void":
        """
        precalculateMagneticMomentum(self, basis_one, q)

        Parameters
        ----------
        basis_one: std::vector< StateOne,std::allocator< StateOne > > const &
        q: int

        """
        return _picomplex.MatrixElementCache_precalculateMagneticMomentum(self, basis_one, q)


    def precalculateDiamagnetism(self, basis_one: 'VectorStateOne', k: 'int', q: 'int') -> "void":
        """
        precalculateDiamagnetism(self, basis_one, k, q)

        Parameters
        ----------
        basis_one: std::vector< StateOne,std::allocator< StateOne > > const &
        k: int
        q: int

        """
        return _picomplex.MatrixElementCache_precalculateDiamagnetism(self, basis_one, k, q)


    def precalculateMultipole(self, basis_one: 'VectorStateOne', k: 'int') -> "void":
        """
        precalculateMultipole(self, basis_one, k)

        Parameters
        ----------
        basis_one: std::vector< StateOne,std::allocator< StateOne > > const &
        k: int

        """
        return _picomplex.MatrixElementCache_precalculateMultipole(self, basis_one, k)


    def precalculateRadial(self, basis_one: 'VectorStateOne', k: 'int') -> "void":
        """
        precalculateRadial(self, basis_one, k)

        Parameters
        ----------
        basis_one: std::vector< StateOne,std::allocator< StateOne > > const &
        k: int

        """
        return _picomplex.MatrixElementCache_precalculateRadial(self, basis_one, k)


    def setDefectDB(self, path: 'std::string const &') -> "void":
        """
        setDefectDB(self, path)

        Parameters
        ----------
        path: std::string const &

        """
        return _picomplex.MatrixElementCache_setDefectDB(self, path)


    def getDefectDB(self) -> "std::string const &":
        """
        getDefectDB(self) -> std::string const &

        Parameters
        ----------
        self: MatrixElementCache const *

        """
        return _picomplex.MatrixElementCache_getDefectDB(self)


    def setMethod(self, m: 'method_t const &') -> "void":
        """
        setMethod(self, m)

        Parameters
        ----------
        m: method_t const &

        """
        return _picomplex.MatrixElementCache_setMethod(self, m)


    def loadElectricDipoleDB(self, path: 'std::string const &', species: 'std::string const &') -> "void":
        """
        loadElectricDipoleDB(self, path, species)

        Parameters
        ----------
        path: std::string const &
        species: std::string const &

        """
        return _picomplex.MatrixElementCache_loadElectricDipoleDB(self, path, species)


    def size(self) -> "size_t":
        """
        size(self) -> size_t

        Parameters
        ----------
        self: MatrixElementCache *

        """
        return _picomplex.MatrixElementCache_size(self)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(self) -> PyObject *

        Parameters
        ----------
        self: MatrixElementCache *

        """
        return _picomplex.MatrixElementCache___getstate__(self)


    def __setstate_internal(self, sState: 'PyObject *const') -> "void":
        """
        __setstate_internal(self, sState)

        Parameters
        ----------
        sState: PyObject *const

        """
        return _picomplex.MatrixElementCache___setstate_internal(self, sState)


    def __setstate__(self, sState):
      self.__init__()
      self.__setstate_internal(sState)

    __swig_destroy__ = _picomplex.delete_MatrixElementCache
    __del__ = lambda self: None
MatrixElementCache_swigregister = _picomplex.MatrixElementCache_swigregister
MatrixElementCache_swigregister(MatrixElementCache)

class StateOne(_object):
    """Proxy of C++ StateOne class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateOne, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateOne, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> StateOne
        __init__(self, species, n, l, j, m) -> StateOne

        Parameters
        ----------
        species: std::string
        n: int
        l: int
        j: float
        m: float

        __init__(self, label) -> StateOne

        Parameters
        ----------
        label: std::string

        """
        this = _picomplex.new_StateOne(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def str(self) -> "std::string":
        """
        str(self) -> std::string

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_str(self)


    def getN(self) -> "int const &":
        """
        getN(self) -> int const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getN(self)


    def getL(self) -> "int const &":
        """
        getL(self) -> int const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getL(self)


    def getJ(self) -> "float const &":
        """
        getJ(self) -> float const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getJ(self)


    def getM(self) -> "float const &":
        """
        getM(self) -> float const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getM(self)


    def getS(self) -> "float const &":
        """
        getS(self) -> float const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getS(self)


    def getSpecies(self) -> "std::string const &":
        """
        getSpecies(self) -> std::string const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getSpecies(self)


    def getElement(self) -> "std::string const &":
        """
        getElement(self) -> std::string const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getElement(self)


    def getEnergy(self, *args) -> "double":
        """
        getEnergy(self) -> double
        getEnergy(self, cache) -> double

        Parameters
        ----------
        cache: MatrixElementCache &

        """
        return _picomplex.StateOne_getEnergy(self, *args)


    def getNStar(self, *args) -> "double":
        """
        getNStar(self) -> double
        getNStar(self, cache) -> double

        Parameters
        ----------
        cache: MatrixElementCache &

        """
        return _picomplex.StateOne_getNStar(self, *args)


    def getLabel(self) -> "std::string const &":
        """
        getLabel(self) -> std::string const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getLabel(self)


    def isArtificial(self) -> "bool":
        """
        isArtificial(self) -> bool

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_isArtificial(self)


    def isGeneralized(self) -> "bool":
        """
        isGeneralized(self) -> bool

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_isGeneralized(self)


    def getHash(self) -> "size_t const &":
        """
        getHash(self) -> size_t const &

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getHash(self)


    def getReflected(self) -> "StateOne":
        """
        getReflected(self) -> StateOne

        Parameters
        ----------
        self: StateOne const *

        """
        return _picomplex.StateOne_getReflected(self)


    def __eq__(self, rhs: 'StateOne') -> "bool":
        """
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateOne const &

        """
        return _picomplex.StateOne___eq__(self, rhs)


    def __xor__(self, rhs: 'StateOne') -> "bool":
        """
        __xor__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateOne const &

        """
        return _picomplex.StateOne___xor__(self, rhs)


    def __ne__(self, rhs: 'StateOne') -> "bool":
        """
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateOne const &

        """
        return _picomplex.StateOne___ne__(self, rhs)


    def __lt__(self, rhs: 'StateOne') -> "bool":
        """
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateOne const &

        """
        return _picomplex.StateOne___lt__(self, rhs)


    def __le__(self, rhs: 'StateOne') -> "bool":
        """
        __le__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateOne const &

        """
        return _picomplex.StateOne___le__(self, rhs)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(self) -> PyObject *

        Parameters
        ----------
        self: StateOne *

        """
        return _picomplex.StateOne___getstate__(self)


    def __setstate_internal(self, sState: 'PyObject *const') -> "void":
        """
        __setstate_internal(self, sState)

        Parameters
        ----------
        sState: PyObject *const

        """
        return _picomplex.StateOne___setstate_internal(self, sState)


    def __str__(self) -> "std::string":
        """
        __str__(self) -> std::string

        Parameters
        ----------
        self: StateOne *

        """
        return _picomplex.StateOne___str__(self)


    def __setstate__(self, sState):
      self.__init__()
      self.__setstate_internal(sState)

    __swig_destroy__ = _picomplex.delete_StateOne
    __del__ = lambda self: None
StateOne_swigregister = _picomplex.StateOne_swigregister
StateOne_swigregister(StateOne)

class StateTwo(_object):
    """Proxy of C++ StateTwo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateTwo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> StateTwo
        __init__(self, species, n, l, j, m) -> StateTwo

        Parameters
        ----------
        species: std::array< std::string,2 >
        n: std::array< int,2 >
        l: std::array< int,2 >
        j: std::array< float,2 >
        m: std::array< float,2 >

        __init__(self, label) -> StateTwo

        Parameters
        ----------
        label: std::array< std::string,2 >

        __init__(self, first_state, second_state) -> StateTwo

        Parameters
        ----------
        first_state: StateOne
        second_state: StateOne

        """
        this = _picomplex.new_StateTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def str(self) -> "std::string":
        """
        str(self) -> std::string

        Parameters
        ----------
        self: StateTwo const *

        """
        return _picomplex.StateTwo_str(self)


    def getLeRoyRadius(self, cache: 'MatrixElementCache') -> "double":
        """
        getLeRoyRadius(self, cache) -> double

        Parameters
        ----------
        cache: MatrixElementCache &

        """
        return _picomplex.StateTwo_getLeRoyRadius(self, cache)


    def getN(self, *args) -> "int const &":
        """
        getN(self) -> ArrayIntTwo
        getN(self, idx) -> int const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getN(self, *args)


    def getL(self, *args) -> "int const &":
        """
        getL(self) -> ArrayIntTwo
        getL(self, idx) -> int const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getL(self, *args)


    def getJ(self, *args) -> "float const &":
        """
        getJ(self) -> ArrayFloatTwo
        getJ(self, idx) -> float const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getJ(self, *args)


    def getM(self, *args) -> "float const &":
        """
        getM(self) -> ArrayFloatTwo
        getM(self, idx) -> float const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getM(self, *args)


    def getS(self, *args) -> "float const &":
        """
        getS(self) -> ArrayFloatTwo
        getS(self, idx) -> float const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getS(self, *args)


    def getSpecies(self, *args) -> "std::string const &":
        """
        getSpecies(self) -> ArrayStringTwo
        getSpecies(self, idx) -> std::string const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getSpecies(self, *args)


    def getElement(self, *args) -> "std::string const &":
        """
        getElement(self) -> ArrayStringTwo
        getElement(self, idx) -> std::string const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getElement(self, *args)


    def getEnergy(self, *args) -> "double":
        """
        getEnergy(self) -> double
        getEnergy(self, cache) -> double

        Parameters
        ----------
        cache: MatrixElementCache &

        getEnergy(self, idx) -> double

        Parameters
        ----------
        idx: int

        getEnergy(self, idx, cache) -> double

        Parameters
        ----------
        idx: int
        cache: MatrixElementCache &

        """
        return _picomplex.StateTwo_getEnergy(self, *args)


    def getNStar(self, *args) -> "double":
        """
        getNStar(self) -> ArrayDoubleTwo
        getNStar(self, cache) -> ArrayDoubleTwo

        Parameters
        ----------
        cache: MatrixElementCache &

        getNStar(self, idx) -> double

        Parameters
        ----------
        idx: int

        getNStar(self, idx, cache) -> double

        Parameters
        ----------
        idx: int
        cache: MatrixElementCache &

        """
        return _picomplex.StateTwo_getNStar(self, *args)


    def getLabel(self, *args) -> "std::string const &":
        """
        getLabel(self) -> ArrayStringTwo
        getLabel(self, idx) -> std::string const &

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_getLabel(self, *args)


    def isArtificial(self, *args) -> "bool":
        """
        isArtificial(self) -> ArrayBoolTwo
        isArtificial(self, idx) -> bool

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_isArtificial(self, *args)


    def isGeneralized(self, *args) -> "bool":
        """
        isGeneralized(self) -> ArrayBoolTwo
        isGeneralized(self, idx) -> bool

        Parameters
        ----------
        idx: int

        """
        return _picomplex.StateTwo_isGeneralized(self, *args)


    def getFirstState(self) -> "StateOne const &":
        """
        getFirstState(self) -> StateOne

        Parameters
        ----------
        self: StateTwo const *

        """
        return _picomplex.StateTwo_getFirstState(self)


    def getSecondState(self) -> "StateOne const &":
        """
        getSecondState(self) -> StateOne

        Parameters
        ----------
        self: StateTwo const *

        """
        return _picomplex.StateTwo_getSecondState(self)


    def getHash(self) -> "size_t const &":
        """
        getHash(self) -> size_t const &

        Parameters
        ----------
        self: StateTwo const *

        """
        return _picomplex.StateTwo_getHash(self)


    def getReflected(self) -> "StateTwo":
        """
        getReflected(self) -> StateTwo

        Parameters
        ----------
        self: StateTwo const *

        """
        return _picomplex.StateTwo_getReflected(self)


    def __eq__(self, rhs: 'StateTwo') -> "bool":
        """
        __eq__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateTwo const &

        """
        return _picomplex.StateTwo___eq__(self, rhs)


    def __xor__(self, rhs: 'StateTwo') -> "bool":
        """
        __xor__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateTwo const &

        """
        return _picomplex.StateTwo___xor__(self, rhs)


    def __ne__(self, rhs: 'StateTwo') -> "bool":
        """
        __ne__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateTwo const &

        """
        return _picomplex.StateTwo___ne__(self, rhs)


    def __lt__(self, rhs: 'StateTwo') -> "bool":
        """
        __lt__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateTwo const &

        """
        return _picomplex.StateTwo___lt__(self, rhs)


    def __le__(self, rhs: 'StateTwo') -> "bool":
        """
        __le__(self, rhs) -> bool

        Parameters
        ----------
        rhs: StateTwo const &

        """
        return _picomplex.StateTwo___le__(self, rhs)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(self) -> PyObject *

        Parameters
        ----------
        self: StateTwo *

        """
        return _picomplex.StateTwo___getstate__(self)


    def __setstate_internal(self, sState: 'PyObject *const') -> "void":
        """
        __setstate_internal(self, sState)

        Parameters
        ----------
        sState: PyObject *const

        """
        return _picomplex.StateTwo___setstate_internal(self, sState)


    def __str__(self) -> "std::string":
        """
        __str__(self) -> std::string

        Parameters
        ----------
        self: StateTwo *

        """
        return _picomplex.StateTwo___str__(self)


    def __setstate__(self, sState):
      self.__init__()
      self.__setstate_internal(sState)

    __swig_destroy__ = _picomplex.delete_StateTwo
    __del__ = lambda self: None
StateTwo_swigregister = _picomplex.StateTwo_swigregister
StateTwo_swigregister(StateTwo)

def __ostream__(*args) -> "std::ostream &":
    """
    __ostream__(out, state) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    state: StateOne const &

    __ostream__(out, state) -> std::ostream &

    Parameters
    ----------
    out: std::ostream &
    state: StateTwo const &

    """
    return _picomplex.__ostream__(*args)

class _SystemStateOne(_object):
    """Proxy of C++ SystemBase<(StateOne)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SystemStateOne, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SystemStateOne, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _picomplex.delete__SystemStateOne
    __del__ = lambda self: None

    def setMinimalNorm(self, threshold: 'double const &') -> "void":
        """
        setMinimalNorm(self, threshold)

        Parameters
        ----------
        threshold: double const &

        """
        return _picomplex._SystemStateOne_setMinimalNorm(self, threshold)


    def restrictEnergy(self, e_min: 'double', e_max: 'double') -> "void":
        """
        restrictEnergy(self, e_min, e_max)

        Parameters
        ----------
        e_min: double
        e_max: double

        """
        return _picomplex._SystemStateOne_restrictEnergy(self, e_min, e_max)


    def restrictN(self, *args) -> "void":
        """
        restrictN(self, n_min, n_max)

        Parameters
        ----------
        n_min: int
        n_max: int

        restrictN(self, n)

        Parameters
        ----------
        n: std::set< int,std::less< int >,std::allocator< int > >

        """
        return _picomplex._SystemStateOne_restrictN(self, *args)


    def restrictL(self, *args) -> "void":
        """
        restrictL(self, l_min, l_max)

        Parameters
        ----------
        l_min: int
        l_max: int

        restrictL(self, l)

        Parameters
        ----------
        l: std::set< int,std::less< int >,std::allocator< int > >

        """
        return _picomplex._SystemStateOne_restrictL(self, *args)


    def restrictJ(self, *args) -> "void":
        """
        restrictJ(self, j_min, j_max)

        Parameters
        ----------
        j_min: float
        j_max: float

        restrictJ(self, j)

        Parameters
        ----------
        j: std::set< float,std::less< float >,std::allocator< float > >

        """
        return _picomplex._SystemStateOne_restrictJ(self, *args)


    def restrictM(self, *args) -> "void":
        """
        restrictM(self, m_min, m_max)

        Parameters
        ----------
        m_min: float
        m_max: float

        restrictM(self, m)

        Parameters
        ----------
        m: std::set< float,std::less< float >,std::allocator< float > >

        """
        return _picomplex._SystemStateOne_restrictM(self, *args)


    def addStates(self, *args) -> "void":
        """
        addStates(self, s)

        Parameters
        ----------
        s: StateOne const &

        addStates(self, s)

        Parameters
        ----------
        s: std::set< StateOne,std::less< StateOne >,std::allocator< StateOne > > const &

        """
        return _picomplex._SystemStateOne_addStates(self, *args)


    def getOverlap(self, *args) -> "eigen_vector_double_t":
        """
        getOverlap(self, generalizedstate) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateOne const &

        getOverlap(self, generalizedstates) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateOne,std::allocator< StateOne > > const &

        getOverlap(self, state_index) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &

        getOverlap(self, states_indices) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &

        getOverlap(self, generalizedstate, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateOne const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, generalizedstates, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateOne,std::allocator< StateOne > > const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, state_index, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, states_indices, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, generalizedstate, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateOne const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, state_index, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, generalizedstates, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateOne,std::allocator< StateOne > > const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, states_indices, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex._SystemStateOne_getOverlap(self, *args)


    def getStates(self) -> "std::vector< StateOne,std::allocator< StateOne > >":
        """
        getStates(self) -> VectorStateOne

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getStates(self)


    def getStatesMultiIndex(self) -> "states_set< StateOne >::type const &":
        """
        getStatesMultiIndex(self) -> states_set< StateOne >::type const &

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getStatesMultiIndex(self)


    def getBasisvectors(self) -> "eigen_sparse_t &":
        """
        getBasisvectors(self) -> eigen_sparse_t &

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getBasisvectors(self)


    def getHamiltonian(self) -> "eigen_sparse_t &":
        """
        getHamiltonian(self) -> eigen_sparse_t &

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getHamiltonian(self)


    def getNumBasisvectors(self) -> "size_t":
        """
        getNumBasisvectors(self) -> size_t

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getNumBasisvectors(self)


    def getNumStates(self) -> "size_t":
        """
        getNumStates(self) -> size_t

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getNumStates(self)


    def getMainStates(self) -> "std::vector< StateOne,std::allocator< StateOne > >":
        """
        getMainStates(self) -> VectorStateOne

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_getMainStates(self)


    def getConnections(self, system_to: '_SystemStateOne', threshold: 'double') -> "std::array< std::vector< size_t,std::allocator< size_t > >,2 >":
        """
        getConnections(self, system_to, threshold) -> ArrayVectorSizeTTwo

        Parameters
        ----------
        system_to: SystemBase< StateOne > &
        threshold: double

        """
        return _picomplex._SystemStateOne_getConnections(self, system_to, threshold)


    def buildHamiltonian(self) -> "void":
        """
        buildHamiltonian(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_buildHamiltonian(self)


    def buildInteraction(self) -> "void":
        """
        buildInteraction(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_buildInteraction(self)


    def buildBasis(self) -> "void":
        """
        buildBasis(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_buildBasis(self)


    def diagonalize(self, *args) -> "void":
        """
        diagonalize(self, energy_lower_bound, energy_upper_bound)

        Parameters
        ----------
        energy_lower_bound: double
        energy_upper_bound: double

        diagonalize(self, energy_lower_bound, energy_upper_bound, threshold)

        Parameters
        ----------
        energy_lower_bound: double
        energy_upper_bound: double
        threshold: double

        diagonalize(self)
        diagonalize(self, threshold)

        Parameters
        ----------
        threshold: double

        """
        return _picomplex._SystemStateOne_diagonalize(self, *args)


    def canonicalize(self) -> "void":
        """
        canonicalize(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_canonicalize(self)


    def unitarize(self) -> "void":
        """
        unitarize(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_unitarize(self)


    def rotate(self, *args) -> "void":
        """
        rotate(self, to_z_axis, to_y_axis)

        Parameters
        ----------
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        rotate(self, alpha, beta, gamma)

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex._SystemStateOne_rotate(self, *args)


    def add(self, system: '_SystemStateOne') -> "void":
        """
        add(self, system)

        Parameters
        ----------
        system: SystemBase< StateOne > &

        """
        return _picomplex._SystemStateOne_add(self, system)


    def constrainBasisvectors(self, indices_of_wanted_basisvectors: 'VectorSizeT') -> "void":
        """
        constrainBasisvectors(self, indices_of_wanted_basisvectors)

        Parameters
        ----------
        indices_of_wanted_basisvectors: std::vector< size_t,std::allocator< size_t > >

        """
        return _picomplex._SystemStateOne_constrainBasisvectors(self, indices_of_wanted_basisvectors)


    def applySchriefferWolffTransformation(self, system0: '_SystemStateOne') -> "void":
        """
        applySchriefferWolffTransformation(self, system0)

        Parameters
        ----------
        system0: SystemBase< StateOne > &

        """
        return _picomplex._SystemStateOne_applySchriefferWolffTransformation(self, system0)


    def getStateIndex(self, *args) -> "std::vector< size_t,std::allocator< size_t > >":
        """
        getStateIndex(self, searched_state) -> size_t

        Parameters
        ----------
        searched_state: StateOne const &

        getStateIndex(self, searched_states) -> VectorSizeT

        Parameters
        ----------
        searched_states: std::vector< StateOne,std::allocator< StateOne > > const &

        """
        return _picomplex._SystemStateOne_getStateIndex(self, *args)


    def getBasisvectorIndex(self, *args) -> "std::vector< size_t,std::allocator< size_t > >":
        """
        getBasisvectorIndex(self, searched_state) -> size_t

        Parameters
        ----------
        searched_state: StateOne const &

        getBasisvectorIndex(self, searched_states) -> VectorSizeT

        Parameters
        ----------
        searched_states: std::vector< StateOne,std::allocator< StateOne > > const &

        """
        return _picomplex._SystemStateOne_getBasisvectorIndex(self, *args)


    def forgetStatemixing(self) -> "void":
        """
        forgetStatemixing(self)

        Parameters
        ----------
        self: SystemBase< StateOne > *

        """
        return _picomplex._SystemStateOne_forgetStatemixing(self)


    def getHamiltonianEntry(self, state_row: 'StateOne', state_col: 'StateOne') -> "scalar_t":
        """
        getHamiltonianEntry(self, state_row, state_col) -> scalar_t

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &

        """
        return _picomplex._SystemStateOne_getHamiltonianEntry(self, state_row, state_col)


    def setHamiltonianEntry(self, state_row: 'StateOne', state_col: 'StateOne', value: 'scalar_t') -> "void":
        """
        setHamiltonianEntry(self, state_row, state_col, value)

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        value: scalar_t

        """
        return _picomplex._SystemStateOne_setHamiltonianEntry(self, state_row, state_col, value)


    def addHamiltonianEntry(self, state_row: 'StateOne', state_col: 'StateOne', value: 'scalar_t') -> "void":
        """
        addHamiltonianEntry(self, state_row, state_col, value)

        Parameters
        ----------
        state_row: StateOne const &
        state_col: StateOne const &
        value: scalar_t

        """
        return _picomplex._SystemStateOne_addHamiltonianEntry(self, state_row, state_col, value)

_SystemStateOne_swigregister = _picomplex._SystemStateOne_swigregister
_SystemStateOne_swigregister(_SystemStateOne)

class _SystemStateTwo(_object):
    """Proxy of C++ SystemBase<(StateTwo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SystemStateTwo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SystemStateTwo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _picomplex.delete__SystemStateTwo
    __del__ = lambda self: None

    def setMinimalNorm(self, threshold: 'double const &') -> "void":
        """
        setMinimalNorm(self, threshold)

        Parameters
        ----------
        threshold: double const &

        """
        return _picomplex._SystemStateTwo_setMinimalNorm(self, threshold)


    def restrictEnergy(self, e_min: 'double', e_max: 'double') -> "void":
        """
        restrictEnergy(self, e_min, e_max)

        Parameters
        ----------
        e_min: double
        e_max: double

        """
        return _picomplex._SystemStateTwo_restrictEnergy(self, e_min, e_max)


    def restrictN(self, *args) -> "void":
        """
        restrictN(self, n_min, n_max)

        Parameters
        ----------
        n_min: int
        n_max: int

        restrictN(self, n)

        Parameters
        ----------
        n: std::set< int,std::less< int >,std::allocator< int > >

        """
        return _picomplex._SystemStateTwo_restrictN(self, *args)


    def restrictL(self, *args) -> "void":
        """
        restrictL(self, l_min, l_max)

        Parameters
        ----------
        l_min: int
        l_max: int

        restrictL(self, l)

        Parameters
        ----------
        l: std::set< int,std::less< int >,std::allocator< int > >

        """
        return _picomplex._SystemStateTwo_restrictL(self, *args)


    def restrictJ(self, *args) -> "void":
        """
        restrictJ(self, j_min, j_max)

        Parameters
        ----------
        j_min: float
        j_max: float

        restrictJ(self, j)

        Parameters
        ----------
        j: std::set< float,std::less< float >,std::allocator< float > >

        """
        return _picomplex._SystemStateTwo_restrictJ(self, *args)


    def restrictM(self, *args) -> "void":
        """
        restrictM(self, m_min, m_max)

        Parameters
        ----------
        m_min: float
        m_max: float

        restrictM(self, m)

        Parameters
        ----------
        m: std::set< float,std::less< float >,std::allocator< float > >

        """
        return _picomplex._SystemStateTwo_restrictM(self, *args)


    def addStates(self, *args) -> "void":
        """
        addStates(self, s)

        Parameters
        ----------
        s: StateTwo const &

        addStates(self, s)

        Parameters
        ----------
        s: std::set< StateTwo,std::less< StateTwo >,std::allocator< StateTwo > > const &

        """
        return _picomplex._SystemStateTwo_addStates(self, *args)


    def getOverlap(self, *args) -> "eigen_vector_double_t":
        """
        getOverlap(self, generalizedstate) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateTwo const &

        getOverlap(self, generalizedstates) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateTwo,std::allocator< StateTwo > > const &

        getOverlap(self, state_index) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &

        getOverlap(self, states_indices) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &

        getOverlap(self, generalizedstate, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateTwo const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, generalizedstates, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateTwo,std::allocator< StateTwo > > const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, state_index, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, states_indices, to_z_axis, to_y_axis) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        getOverlap(self, generalizedstate, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstate: StateTwo const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, state_index, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        state_index: size_t const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, generalizedstates, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        generalizedstates: std::vector< StateTwo,std::allocator< StateTwo > > const &
        alpha: double
        beta: double
        gamma: double

        getOverlap(self, states_indices, alpha, beta, gamma) -> eigen_vector_double_t

        Parameters
        ----------
        states_indices: std::vector< size_t,std::allocator< size_t > > const &
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex._SystemStateTwo_getOverlap(self, *args)


    def getStates(self) -> "std::vector< StateTwo,std::allocator< StateTwo > >":
        """
        getStates(self) -> VectorStateTwo

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getStates(self)


    def getStatesMultiIndex(self) -> "states_set< StateTwo >::type const &":
        """
        getStatesMultiIndex(self) -> states_set< StateTwo >::type const &

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getStatesMultiIndex(self)


    def getBasisvectors(self) -> "eigen_sparse_t &":
        """
        getBasisvectors(self) -> eigen_sparse_t &

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getBasisvectors(self)


    def getHamiltonian(self) -> "eigen_sparse_t &":
        """
        getHamiltonian(self) -> eigen_sparse_t &

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getHamiltonian(self)


    def getNumBasisvectors(self) -> "size_t":
        """
        getNumBasisvectors(self) -> size_t

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getNumBasisvectors(self)


    def getNumStates(self) -> "size_t":
        """
        getNumStates(self) -> size_t

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getNumStates(self)


    def getMainStates(self) -> "std::vector< StateTwo,std::allocator< StateTwo > >":
        """
        getMainStates(self) -> VectorStateTwo

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_getMainStates(self)


    def getConnections(self, system_to: '_SystemStateTwo', threshold: 'double') -> "std::array< std::vector< size_t,std::allocator< size_t > >,2 >":
        """
        getConnections(self, system_to, threshold) -> ArrayVectorSizeTTwo

        Parameters
        ----------
        system_to: SystemBase< StateTwo > &
        threshold: double

        """
        return _picomplex._SystemStateTwo_getConnections(self, system_to, threshold)


    def buildHamiltonian(self) -> "void":
        """
        buildHamiltonian(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_buildHamiltonian(self)


    def buildInteraction(self) -> "void":
        """
        buildInteraction(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_buildInteraction(self)


    def buildBasis(self) -> "void":
        """
        buildBasis(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_buildBasis(self)


    def diagonalize(self, *args) -> "void":
        """
        diagonalize(self, energy_lower_bound, energy_upper_bound)

        Parameters
        ----------
        energy_lower_bound: double
        energy_upper_bound: double

        diagonalize(self, energy_lower_bound, energy_upper_bound, threshold)

        Parameters
        ----------
        energy_lower_bound: double
        energy_upper_bound: double
        threshold: double

        diagonalize(self)
        diagonalize(self, threshold)

        Parameters
        ----------
        threshold: double

        """
        return _picomplex._SystemStateTwo_diagonalize(self, *args)


    def canonicalize(self) -> "void":
        """
        canonicalize(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_canonicalize(self)


    def unitarize(self) -> "void":
        """
        unitarize(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_unitarize(self)


    def rotate(self, *args) -> "void":
        """
        rotate(self, to_z_axis, to_y_axis)

        Parameters
        ----------
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        rotate(self, alpha, beta, gamma)

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex._SystemStateTwo_rotate(self, *args)


    def add(self, system: '_SystemStateTwo') -> "void":
        """
        add(self, system)

        Parameters
        ----------
        system: SystemBase< StateTwo > &

        """
        return _picomplex._SystemStateTwo_add(self, system)


    def constrainBasisvectors(self, indices_of_wanted_basisvectors: 'VectorSizeT') -> "void":
        """
        constrainBasisvectors(self, indices_of_wanted_basisvectors)

        Parameters
        ----------
        indices_of_wanted_basisvectors: std::vector< size_t,std::allocator< size_t > >

        """
        return _picomplex._SystemStateTwo_constrainBasisvectors(self, indices_of_wanted_basisvectors)


    def applySchriefferWolffTransformation(self, system0: '_SystemStateTwo') -> "void":
        """
        applySchriefferWolffTransformation(self, system0)

        Parameters
        ----------
        system0: SystemBase< StateTwo > &

        """
        return _picomplex._SystemStateTwo_applySchriefferWolffTransformation(self, system0)


    def getStateIndex(self, *args) -> "std::vector< size_t,std::allocator< size_t > >":
        """
        getStateIndex(self, searched_state) -> size_t

        Parameters
        ----------
        searched_state: StateTwo const &

        getStateIndex(self, searched_states) -> VectorSizeT

        Parameters
        ----------
        searched_states: std::vector< StateTwo,std::allocator< StateTwo > > const &

        """
        return _picomplex._SystemStateTwo_getStateIndex(self, *args)


    def getBasisvectorIndex(self, *args) -> "std::vector< size_t,std::allocator< size_t > >":
        """
        getBasisvectorIndex(self, searched_state) -> size_t

        Parameters
        ----------
        searched_state: StateTwo const &

        getBasisvectorIndex(self, searched_states) -> VectorSizeT

        Parameters
        ----------
        searched_states: std::vector< StateTwo,std::allocator< StateTwo > > const &

        """
        return _picomplex._SystemStateTwo_getBasisvectorIndex(self, *args)


    def forgetStatemixing(self) -> "void":
        """
        forgetStatemixing(self)

        Parameters
        ----------
        self: SystemBase< StateTwo > *

        """
        return _picomplex._SystemStateTwo_forgetStatemixing(self)


    def getHamiltonianEntry(self, state_row: 'StateTwo', state_col: 'StateTwo') -> "scalar_t":
        """
        getHamiltonianEntry(self, state_row, state_col) -> scalar_t

        Parameters
        ----------
        state_row: StateTwo const &
        state_col: StateTwo const &

        """
        return _picomplex._SystemStateTwo_getHamiltonianEntry(self, state_row, state_col)


    def setHamiltonianEntry(self, state_row: 'StateTwo', state_col: 'StateTwo', value: 'scalar_t') -> "void":
        """
        setHamiltonianEntry(self, state_row, state_col, value)

        Parameters
        ----------
        state_row: StateTwo const &
        state_col: StateTwo const &
        value: scalar_t

        """
        return _picomplex._SystemStateTwo_setHamiltonianEntry(self, state_row, state_col, value)


    def addHamiltonianEntry(self, state_row: 'StateTwo', state_col: 'StateTwo', value: 'scalar_t') -> "void":
        """
        addHamiltonianEntry(self, state_row, state_col, value)

        Parameters
        ----------
        state_row: StateTwo const &
        state_col: StateTwo const &
        value: scalar_t

        """
        return _picomplex._SystemStateTwo_addHamiltonianEntry(self, state_row, state_col, value)

_SystemStateTwo_swigregister = _picomplex._SystemStateTwo_swigregister
_SystemStateTwo_swigregister(_SystemStateTwo)

class SystemOne(_SystemStateOne):
    """Proxy of C++ SystemOne class."""

    __swig_setmethods__ = {}
    for _s in [_SystemStateOne]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemOne, name, value)
    __swig_getmethods__ = {}
    for _s in [_SystemStateOne]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemOne, name)
    __repr__ = _swig_repr

    def getSpecies(self) -> "std::string const &":
        """
        getSpecies(self) -> std::string const &

        Parameters
        ----------
        self: SystemOne const *

        """
        return _picomplex.SystemOne_getSpecies(self)


    def setEfield(self, *args) -> "void":
        """
        setEfield(self, field)

        Parameters
        ----------
        field: std::array< double,3 >

        setEfield(self, field, to_z_axis, to_y_axis)

        Parameters
        ----------
        field: std::array< double,3 >
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        setEfield(self, field, alpha, beta, gamma)

        Parameters
        ----------
        field: std::array< double,3 >
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex.SystemOne_setEfield(self, *args)


    def setBfield(self, *args) -> "void":
        """
        setBfield(self, field)

        Parameters
        ----------
        field: std::array< double,3 >

        setBfield(self, field, to_z_axis, to_y_axis)

        Parameters
        ----------
        field: std::array< double,3 >
        to_z_axis: std::array< double,3 >
        to_y_axis: std::array< double,3 >

        setBfield(self, field, alpha, beta, gamma)

        Parameters
        ----------
        field: std::array< double,3 >
        alpha: double
        beta: double
        gamma: double

        """
        return _picomplex.SystemOne_setBfield(self, *args)


    def enableDiamagnetism(self, enable: 'bool') -> "void":
        """
        enableDiamagnetism(self, enable)

        Parameters
        ----------
        enable: bool

        """
        return _picomplex.SystemOne_enableDiamagnetism(self, enable)


    def setConservedParityUnderReflection(self, parity: 'parity_t') -> "void":
        """
        setConservedParityUnderReflection(self, parity)

        Parameters
        ----------
        parity: enum parity_t

        """
        return _picomplex.SystemOne_setConservedParityUnderReflection(self, parity)


    def setConservedMomentaUnderRotation(self, momenta: 'SetFloat') -> "void":
        """
        setConservedMomentaUnderRotation(self, momenta)

        Parameters
        ----------
        momenta: std::set< float,std::less< float >,std::allocator< float > > const &

        """
        return _picomplex.SystemOne_setConservedMomentaUnderRotation(self, momenta)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(self) -> PyObject *

        Parameters
        ----------
        self: SystemOne *

        """
        return _picomplex.SystemOne___getstate__(self)


    def __setstate_internal(self, sState: 'PyObject *const') -> "void":
        """
        __setstate_internal(self, sState)

        Parameters
        ----------
        sState: PyObject *const

        """
        return _picomplex.SystemOne___setstate_internal(self, sState)


    def __setstate__(self, sState):
      tmp = MatrixElementCache()
      self.__init__("", tmp)
      self.__setstate_internal(sState)


    def __init__(self, *args):
        """
        __init__(self, species, cache) -> SystemOne

        Parameters
        ----------
        species: std::string
        cache: MatrixElementCache &

        __init__(self, species, cache, memory_saving) -> SystemOne

        Parameters
        ----------
        species: std::string
        cache: MatrixElementCache &
        memory_saving: bool

        __init__(self, other) -> SystemOne

        Parameters
        ----------
        other: SystemOne const &

        """
        this = _picomplex.new_SystemOne(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _picomplex.delete_SystemOne
    __del__ = lambda self: None
SystemOne_swigregister = _picomplex.SystemOne_swigregister
SystemOne_swigregister(SystemOne)

class SystemTwo(_SystemStateTwo):
    """Proxy of C++ SystemTwo class."""

    __swig_setmethods__ = {}
    for _s in [_SystemStateTwo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemTwo, name, value)
    __swig_getmethods__ = {}
    for _s in [_SystemStateTwo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemTwo, name)
    __repr__ = _swig_repr

    def getSpecies(self) -> "std::array< std::string,2 > const &":
        """
        getSpecies(self) -> ArrayStringTwo

        Parameters
        ----------
        self: SystemTwo *

        """
        return _picomplex.SystemTwo_getSpecies(self)


    def getStatesFirst(self) -> "std::vector< StateOne,std::allocator< StateOne > >":
        """
        getStatesFirst(self) -> VectorStateOne

        Parameters
        ----------
        self: SystemTwo *

        """
        return _picomplex.SystemTwo_getStatesFirst(self)


    def getStatesSecond(self) -> "std::vector< StateOne,std::allocator< StateOne > >":
        """
        getStatesSecond(self) -> VectorStateOne

        Parameters
        ----------
        self: SystemTwo *

        """
        return _picomplex.SystemTwo_getStatesSecond(self)


    def enableGreenTensor(self, GTboolean: 'bool') -> "void":
        """
        enableGreenTensor(self, GTboolean)

        Parameters
        ----------
        GTboolean: bool

        """
        return _picomplex.SystemTwo_enableGreenTensor(self, GTboolean)


    def setSurfaceDistance(self, d: 'double') -> "void":
        """
        setSurfaceDistance(self, d)

        Parameters
        ----------
        d: double

        """
        return _picomplex.SystemTwo_setSurfaceDistance(self, d)


    def setAngle(self, a: 'double') -> "void":
        """
        setAngle(self, a)

        Parameters
        ----------
        a: double

        """
        return _picomplex.SystemTwo_setAngle(self, a)


    def setDistance(self, d: 'double') -> "void":
        """
        setDistance(self, d)

        Parameters
        ----------
        d: double

        """
        return _picomplex.SystemTwo_setDistance(self, d)


    def setDistanceVector(self, d: 'ArrayDoubleThree') -> "void":
        """
        setDistanceVector(self, d)

        Parameters
        ----------
        d: std::array< double,3 >

        """
        return _picomplex.SystemTwo_setDistanceVector(self, d)


    def setOrder(self, o: 'double') -> "void":
        """
        setOrder(self, o)

        Parameters
        ----------
        o: double

        """
        return _picomplex.SystemTwo_setOrder(self, o)


    def setConservedParityUnderPermutation(self, parity: 'parity_t') -> "void":
        """
        setConservedParityUnderPermutation(self, parity)

        Parameters
        ----------
        parity: enum parity_t

        """
        return _picomplex.SystemTwo_setConservedParityUnderPermutation(self, parity)


    def setConservedParityUnderInversion(self, parity: 'parity_t') -> "void":
        """
        setConservedParityUnderInversion(self, parity)

        Parameters
        ----------
        parity: enum parity_t

        """
        return _picomplex.SystemTwo_setConservedParityUnderInversion(self, parity)


    def setConservedParityUnderReflection(self, parity: 'parity_t') -> "void":
        """
        setConservedParityUnderReflection(self, parity)

        Parameters
        ----------
        parity: enum parity_t

        """
        return _picomplex.SystemTwo_setConservedParityUnderReflection(self, parity)


    def setConservedMomentaUnderRotation(self, momenta: 'SetInt') -> "void":
        """
        setConservedMomentaUnderRotation(self, momenta)

        Parameters
        ----------
        momenta: std::set< int,std::less< int >,std::allocator< int > > const &

        """
        return _picomplex.SystemTwo_setConservedMomentaUnderRotation(self, momenta)


    def setOneAtomBasisvectors(self, indices: 'VectorArraySizeTTwo') -> "void":
        """
        setOneAtomBasisvectors(self, indices)

        Parameters
        ----------
        indices: std::vector< std::array< size_t,2 >,std::allocator< std::array< size_t,2 > > > const &

        """
        return _picomplex.SystemTwo_setOneAtomBasisvectors(self, indices)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(self) -> PyObject *

        Parameters
        ----------
        self: SystemTwo *

        """
        return _picomplex.SystemTwo___getstate__(self)


    def __setstate_internal(self, sState: 'PyObject *const') -> "void":
        """
        __setstate_internal(self, sState)

        Parameters
        ----------
        sState: PyObject *const

        """
        return _picomplex.SystemTwo___setstate_internal(self, sState)


    def __setstate__(self, sState):
      tmp = MatrixElementCache()
      s1 = SystemOne("", tmp)
      s2 = SystemOne("", tmp)
      self.__init__(s1, s2, tmp)
      self.__setstate_internal(sState)


    def __init__(self, *args):
        """
        __init__(self, b1, b2, cache) -> SystemTwo

        Parameters
        ----------
        b1: SystemOne const &
        b2: SystemOne const &
        cache: MatrixElementCache &

        __init__(self, b1, b2, cache, memory_saving) -> SystemTwo

        Parameters
        ----------
        b1: SystemOne const &
        b2: SystemOne const &
        cache: MatrixElementCache &
        memory_saving: bool

        __init__(self, other) -> SystemTwo

        Parameters
        ----------
        other: SystemTwo const &

        """
        this = _picomplex.new_SystemTwo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _picomplex.delete_SystemTwo
    __del__ = lambda self: None
SystemTwo_swigregister = _picomplex.SystemTwo_swigregister
SystemTwo_swigregister(SystemTwo)

# This file is compatible with both classic and new-style classes.


