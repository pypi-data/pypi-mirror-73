# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import access_pb2 as access__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AccessServiceStub(object):
  """share resources
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GrantAccess = channel.unary_unary(
        '/apiserver.v2.AccessService/GrantAccess',
        request_serializer=access__pb2.GrantAccessReq.SerializeToString,
        response_deserializer=access__pb2.AccessRule.FromString,
        )
    self.RevokeAccess = channel.unary_unary(
        '/apiserver.v2.AccessService/RevokeAccess',
        request_serializer=access__pb2.RevokeAccessReq.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.CheckAccess = channel.unary_unary(
        '/apiserver.v2.AccessService/CheckAccess',
        request_serializer=access__pb2.CheckAccessReq.SerializeToString,
        response_deserializer=access__pb2.CheckAccessRes.FromString,
        )
    self.AccessToResource = channel.unary_unary(
        '/apiserver.v2.AccessService/AccessToResource',
        request_serializer=access__pb2.AccessToResourceReq.SerializeToString,
        response_deserializer=access__pb2.AccessRule.FromString,
        )
    self.RulesByResource = channel.unary_unary(
        '/apiserver.v2.AccessService/RulesByResource',
        request_serializer=access__pb2.RulesByResourceReq.SerializeToString,
        response_deserializer=access__pb2.RulesByResourceRes.FromString,
        )


class AccessServiceServicer(object):
  """share resources
  """

  def GrantAccess(self, request, context):
    """share resource
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RevokeAccess(self, request, context):
    """revoke resource sharing
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CheckAccess(self, request, context):
    """Can I do OP on RESOURCE  
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessToResource(self, request, context):
    """What can I do on RESOURCE
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RulesByResource(self, request, context):
    """Who can do anything on RESOURCE
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AccessServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GrantAccess': grpc.unary_unary_rpc_method_handler(
          servicer.GrantAccess,
          request_deserializer=access__pb2.GrantAccessReq.FromString,
          response_serializer=access__pb2.AccessRule.SerializeToString,
      ),
      'RevokeAccess': grpc.unary_unary_rpc_method_handler(
          servicer.RevokeAccess,
          request_deserializer=access__pb2.RevokeAccessReq.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'CheckAccess': grpc.unary_unary_rpc_method_handler(
          servicer.CheckAccess,
          request_deserializer=access__pb2.CheckAccessReq.FromString,
          response_serializer=access__pb2.CheckAccessRes.SerializeToString,
      ),
      'AccessToResource': grpc.unary_unary_rpc_method_handler(
          servicer.AccessToResource,
          request_deserializer=access__pb2.AccessToResourceReq.FromString,
          response_serializer=access__pb2.AccessRule.SerializeToString,
      ),
      'RulesByResource': grpc.unary_unary_rpc_method_handler(
          servicer.RulesByResource,
          request_deserializer=access__pb2.RulesByResourceReq.FromString,
          response_serializer=access__pb2.RulesByResourceRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'apiserver.v2.AccessService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AccessAdminServiceStub(object):
  """manage user-role groupings
  only admins (users in role:admin) are allowed to request this service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListUsers = channel.unary_unary(
        '/apiserver.v2.AccessAdminService/ListUsers',
        request_serializer=access__pb2.ListUsersReq.SerializeToString,
        response_deserializer=access__pb2.ListUsersRes.FromString,
        )
    self.ListRoles = channel.unary_unary(
        '/apiserver.v2.AccessAdminService/ListRoles',
        request_serializer=access__pb2.ListRolesReq.SerializeToString,
        response_deserializer=access__pb2.ListRolesRes.FromString,
        )
    self.DeleteRole = channel.unary_unary(
        '/apiserver.v2.AccessAdminService/DeleteRole',
        request_serializer=access__pb2.DeleteRoleReq.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.AssignRole = channel.unary_unary(
        '/apiserver.v2.AccessAdminService/AssignRole',
        request_serializer=access__pb2.AssignRoleReq.SerializeToString,
        response_deserializer=access__pb2.GroupingRule.FromString,
        )
    self.DeassignRole = channel.unary_unary(
        '/apiserver.v2.AccessAdminService/DeassignRole',
        request_serializer=access__pb2.DeassignRoleReq.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class AccessAdminServiceServicer(object):
  """manage user-role groupings
  only admins (users in role:admin) are allowed to request this service
  """

  def ListUsers(self, request, context):
    """get all users seen by apiserver
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListRoles(self, request, context):
    """get all roles seen by apiserver
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteRole(self, request, context):
    """delete a role, and all assigning to it
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AssignRole(self, request, context):
    """user grouping methods

    assign user or sub role with a role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeassignRole(self, request, context):
    """de-assign a role for a user or sub role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AccessAdminServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListUsers': grpc.unary_unary_rpc_method_handler(
          servicer.ListUsers,
          request_deserializer=access__pb2.ListUsersReq.FromString,
          response_serializer=access__pb2.ListUsersRes.SerializeToString,
      ),
      'ListRoles': grpc.unary_unary_rpc_method_handler(
          servicer.ListRoles,
          request_deserializer=access__pb2.ListRolesReq.FromString,
          response_serializer=access__pb2.ListRolesRes.SerializeToString,
      ),
      'DeleteRole': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteRole,
          request_deserializer=access__pb2.DeleteRoleReq.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'AssignRole': grpc.unary_unary_rpc_method_handler(
          servicer.AssignRole,
          request_deserializer=access__pb2.AssignRoleReq.FromString,
          response_serializer=access__pb2.GroupingRule.SerializeToString,
      ),
      'DeassignRole': grpc.unary_unary_rpc_method_handler(
          servicer.DeassignRole,
          request_deserializer=access__pb2.DeassignRoleReq.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'apiserver.v2.AccessAdminService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
