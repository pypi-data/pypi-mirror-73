### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .device_pb2_grpc import *
from . import device_pb2
from minknow_api.device_pb2 import *
from minknow_api._support import MessageWrapper, ArgumentError
import time
import logging

__all__ = [
    "DeviceService",
    "ChannelConfiguration",
    "ReturnedChannelConfiguration",
    "GetDeviceInfoRequest",
    "GetDeviceInfoResponse",
    "GetDeviceStateRequest",
    "GetDeviceStateResponse",
    "StreamDeviceStateRequest",
    "GetFlowCellInfoRequest",
    "GetFlowCellInfoResponse",
    "StreamFlowCellInfoRequest",
    "SetUserSpecifiedFlowCellIdRequest",
    "SetUserSpecifiedFlowCellIdResponse",
    "SetUserSpecifiedProductCodeRequest",
    "SetUserSpecifiedProductCodeResponse",
    "GetChannelsLayoutRequest",
    "GetChannelsLayoutResponse",
    "ChannelRecord",
    "ResetDeviceSettingsRequest",
    "ResetDeviceSettingsResponse",
    "SetCalibrationRequest",
    "SetCalibrationResponse",
    "ClearCalibrationRequest",
    "ClearCalibrationResponse",
    "GetCalibrationRequest",
    "GetCalibrationResponse",
    "SetTemperatureRequest",
    "SetTemperatureResponse",
    "GetTemperatureRequest",
    "GetTemperatureResponse",
    "UnblockRequest",
    "UnblockResponse",
    "CancelUnblocksRequest",
    "CancelUnblocksResponse",
    "GetChannelConfigurationRequest",
    "GetChannelConfigurationResponse",
    "SetChannelConfigurationRequest",
    "SetChannelConfigurationResponse",
    "SetChannelConfigurationAllRequest",
    "SetChannelConfigurationAllResponse",
    "SaturationConfig",
    "SetSaturationConfigRequest",
    "SetSaturationConfigResponse",
    "GetSaturationConfigRequest",
    "GetSaturationConfigResponse",
    "GetSampleRateRequest",
    "GetSampleRateResponse",
    "SetSampleRateRequest",
    "SetSampleRateResponse",
    "GetBiasVoltageRequest",
    "GetBiasVoltageResponse",
    "SetBiasVoltageRequest",
    "SetBiasVoltageResponse",
    "SelectedWell",
    "WELL_NONE",
    "WELL_1",
    "WELL_2",
    "WELL_3",
    "WELL_4",
    "WELL_OTHER",
]

def run_with_retry(method, message, timeout, unwraps, full_name):
    retry_count = 20
    error = None
    for i in range(retry_count):
        try:
            result = MessageWrapper(method(message, timeout=timeout), unwraps=unwraps)
            return result
        except grpc.RpcError as e:
            # Retrying unidentified grpc errors to keep clients from crashing
            retryable_error = (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details() or \
                                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()))
            if retryable_error:
                logging.info('Bypassed ({}: {}) error for grpc: {}. Attempt {}.'.format(e.code(), e.details(), full_name, i))
            else:
                raise
            error = e
        time.sleep(1)
    raise error


class DeviceService(object):
    def __init__(self, channel):
        self._stub = DeviceServiceStub(channel)
        self._pb = device_pb2

    def get_device_info(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_device_info, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetDeviceInfoRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_device_info: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_device_info, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_device_state(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_device_state, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetDeviceStateRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_device_state: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_device_state, _message, _timeout, [], "minknow_api.device.DeviceService")

    def stream_device_state(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_device_state, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = StreamDeviceStateRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_device_state: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_device_state, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_flow_cell_info(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_flow_cell_info, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetFlowCellInfoRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_flow_cell_info: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_flow_cell_info, _message, _timeout, [], "minknow_api.device.DeviceService")

    def stream_flow_cell_info(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_flow_cell_info, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = StreamFlowCellInfoRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_flow_cell_info: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_flow_cell_info, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_user_specified_flow_cell_id(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_user_specified_flow_cell_id, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetUserSpecifiedFlowCellIdRequest()

        if "id" in kwargs:
            unused_args.remove("id")
            _message.id = kwargs['id']
        else:
            raise ArgumentError("set_user_specified_flow_cell_id requires a 'id' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_user_specified_flow_cell_id: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_user_specified_flow_cell_id, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_user_specified_product_code(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_user_specified_product_code, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetUserSpecifiedProductCodeRequest()

        if "code" in kwargs:
            unused_args.remove("code")
            _message.code = kwargs['code']
        else:
            raise ArgumentError("set_user_specified_product_code requires a 'code' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_user_specified_product_code: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_user_specified_product_code, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_channels_layout(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_channels_layout, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetChannelsLayoutRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_channels_layout: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_channels_layout, _message, _timeout, [], "minknow_api.device.DeviceService")

    def reset_device_settings(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.reset_device_settings, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = ResetDeviceSettingsRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to reset_device_settings: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.reset_device_settings, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_calibration(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetCalibrationRequest()

        if "first_channel" in kwargs:
            unused_args.remove("first_channel")
            _message.first_channel = kwargs['first_channel']
        else:
            raise ArgumentError("set_calibration requires a 'first_channel' argument")

        if "last_channel" in kwargs:
            unused_args.remove("last_channel")
            _message.last_channel = kwargs['last_channel']
        else:
            raise ArgumentError("set_calibration requires a 'last_channel' argument")

        if "offsets" in kwargs:
            unused_args.remove("offsets")
            _message.offsets.extend(kwargs['offsets'])
        else:
            raise ArgumentError("set_calibration requires a 'offsets' argument")

        if "pa_ranges" in kwargs:
            unused_args.remove("pa_ranges")
            _message.pa_ranges.extend(kwargs['pa_ranges'])
        else:
            raise ArgumentError("set_calibration requires a 'pa_ranges' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_calibration: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

    def clear_calibration(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.clear_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = ClearCalibrationRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to clear_calibration: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.clear_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_calibration(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetCalibrationRequest()

        if "first_channel" in kwargs:
            unused_args.remove("first_channel")
            _message.first_channel = kwargs['first_channel']
        else:
            raise ArgumentError("get_calibration requires a 'first_channel' argument")

        if "last_channel" in kwargs:
            unused_args.remove("last_channel")
            _message.last_channel = kwargs['last_channel']
        else:
            raise ArgumentError("get_calibration requires a 'last_channel' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_calibration: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_calibration, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_temperature(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_temperature, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetTemperatureRequest()

        if "temperature" in kwargs:
            unused_args.remove("temperature")
            _message.temperature = kwargs['temperature']

        if "wait_for_temperature" in kwargs:
            unused_args.remove("wait_for_temperature")
            _message.wait_for_temperature.CopyFrom(kwargs['wait_for_temperature'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_temperature: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_temperature, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_temperature(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_temperature, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetTemperatureRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_temperature: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_temperature, _message, _timeout, [], "minknow_api.device.DeviceService")

    def unblock(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.unblock, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        # check oneof group 'duration'
        oneof_fields = set([
            "duration_in_seconds",
            "duration_in_milliseconds",
        ])

        if len(unused_args & oneof_fields) > 1:
            raise ArgumentError("unblock given multiple conflicting arguments: '{}'".format(", ".join(unused_args & oneof_fields)))

        _message = UnblockRequest()

        if "channels" in kwargs:
            unused_args.remove("channels")
            _message.channels.extend(kwargs['channels'])

        if "duration_in_seconds" in kwargs:
            unused_args.remove("duration_in_seconds")
            _message.duration_in_seconds = kwargs['duration_in_seconds']

        if "duration_in_milliseconds" in kwargs:
            unused_args.remove("duration_in_milliseconds")
            _message.duration_in_milliseconds = kwargs['duration_in_milliseconds']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to unblock: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.unblock, _message, _timeout, [], "minknow_api.device.DeviceService")

    def cancel_unblocks(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.cancel_unblocks, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = CancelUnblocksRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to cancel_unblocks: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.cancel_unblocks, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_channel_configuration(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_channel_configuration, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetChannelConfigurationRequest()

        if "channels" in kwargs:
            unused_args.remove("channels")
            _message.channels.extend(kwargs['channels'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_channel_configuration: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_channel_configuration, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_channel_configuration(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_channel_configuration, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetChannelConfigurationRequest()

        if "channel_configurations" in kwargs:
            unused_args.remove("channel_configurations")
            for key, value in kwargs['channel_configurations'].items():
                _message.channel_configurations[key].CopyFrom(value)

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_channel_configuration: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_channel_configuration, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_channel_configuration_all(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_channel_configuration_all, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetChannelConfigurationAllRequest()

        if "well" in kwargs:
            unused_args.remove("well")
            _message.channel_configuration.well = kwargs['well']

        if "test_current" in kwargs:
            unused_args.remove("test_current")
            _message.channel_configuration.test_current = kwargs['test_current']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_channel_configuration_all: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_channel_configuration_all, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_saturation_config(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_saturation_config, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetSaturationConfigRequest()

        if "thresholds" in kwargs:
            unused_args.remove("thresholds")
            _message.settings.thresholds.CopyFrom(kwargs['thresholds'])

        if "software_saturation" in kwargs:
            unused_args.remove("software_saturation")
            _message.settings.software_saturation.CopyFrom(kwargs['software_saturation'])

        if "user_threshold_saturation" in kwargs:
            unused_args.remove("user_threshold_saturation")
            _message.settings.user_threshold_saturation.CopyFrom(kwargs['user_threshold_saturation'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_saturation_config: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_saturation_config, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_saturation_config(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_saturation_config, _message, _timeout, ["settings"], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetSaturationConfigRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_saturation_config: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_saturation_config, _message, _timeout, ["settings"], "minknow_api.device.DeviceService")

    def get_sample_rate(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_sample_rate, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetSampleRateRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_sample_rate: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_sample_rate, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_sample_rate(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_sample_rate, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetSampleRateRequest()

        if "sample_rate" in kwargs:
            unused_args.remove("sample_rate")
            _message.sample_rate = kwargs['sample_rate']
        else:
            raise ArgumentError("set_sample_rate requires a 'sample_rate' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_sample_rate: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_sample_rate, _message, _timeout, [], "minknow_api.device.DeviceService")

    def get_bias_voltage(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_bias_voltage, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = GetBiasVoltageRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_bias_voltage: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_bias_voltage, _message, _timeout, [], "minknow_api.device.DeviceService")

    def set_bias_voltage(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.set_bias_voltage, _message, _timeout, [], "minknow_api.device.DeviceService")

        unused_args = set(kwargs.keys())

        _message = SetBiasVoltageRequest()

        if "bias_voltage" in kwargs:
            unused_args.remove("bias_voltage")
            _message.bias_voltage = kwargs['bias_voltage']
        else:
            raise ArgumentError("set_bias_voltage requires a 'bias_voltage' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to set_bias_voltage: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.set_bias_voltage, _message, _timeout, [], "minknow_api.device.DeviceService")