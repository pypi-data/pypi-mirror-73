### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .basecaller_pb2_grpc import *
from . import basecaller_pb2
from minknow_api.basecaller_pb2 import *
from minknow_api._support import MessageWrapper, ArgumentError
import time
import logging

__all__ = [
    "Basecaller",
    "ListConfigsByKitRequest",
    "ListConfigsByKitResponse",
    "StartBasecallingRequest",
    "StartBasecallingResponse",
    "StartBarcodingRequest",
    "StartBarcodingResponse",
    "StartAlignmentRequest",
    "StartAlignmentResponse",
    "CancelRequest",
    "CancelResponse",
    "RunInfo",
    "GetInfoRequest",
    "GetInfoResponse",
    "WatchRequest",
    "WatchResponse",
    "State",
    "STATE_RUNNING",
    "STATE_SUCCESS",
    "STATE_ERROR",
    "STATE_CANCELLED",
    "SelectionPreset",
    "PRESET_ALL_RUNNING",
    "PRESET_MOST_RECENTLY_STARTED",
    "PRESET_ALL",
]

def run_with_retry(method, message, timeout, unwraps, full_name):
    retry_count = 20
    error = None
    for i in range(retry_count):
        try:
            result = MessageWrapper(method(message, timeout=timeout), unwraps=unwraps)
            return result
        except grpc.RpcError as e:
            # Retrying unidentified grpc errors to keep clients from crashing
            retryable_error = (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details() or \
                                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()))
            if retryable_error:
                logging.info('Bypassed ({}: {}) error for grpc: {}. Attempt {}.'.format(e.code(), e.details(), full_name, i))
            else:
                raise
            error = e
        time.sleep(1)
    raise error


class Basecaller(object):
    def __init__(self, channel):
        self._stub = BasecallerStub(channel)
        self._pb = basecaller_pb2

    def list_configs_by_kit(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.list_configs_by_kit, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = ListConfigsByKitRequest()

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to list_configs_by_kit: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.list_configs_by_kit, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def start_basecalling(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.start_basecalling, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = StartBasecallingRequest()

        if "input_reads_directories" in kwargs:
            unused_args.remove("input_reads_directories")
            _message.input_reads_directories.extend(kwargs['input_reads_directories'])

        if "output_reads_directory" in kwargs:
            unused_args.remove("output_reads_directory")
            _message.output_reads_directory = kwargs['output_reads_directory']

        if "configuration" in kwargs:
            unused_args.remove("configuration")
            _message.configuration = kwargs['configuration']

        if "fast5_out" in kwargs:
            unused_args.remove("fast5_out")
            _message.fast5_out = kwargs['fast5_out']

        if "compress_fastq" in kwargs:
            unused_args.remove("compress_fastq")
            _message.compress_fastq = kwargs['compress_fastq']

        if "disable_events" in kwargs:
            unused_args.remove("disable_events")
            _message.disable_events = kwargs['disable_events']

        if "recursive" in kwargs:
            unused_args.remove("recursive")
            _message.recursive = kwargs['recursive']

        if "barcoding_configuration" in kwargs:
            unused_args.remove("barcoding_configuration")
            _message.barcoding_configuration.CopyFrom(kwargs['barcoding_configuration'])

        if "alignment_configuration" in kwargs:
            unused_args.remove("alignment_configuration")
            _message.alignment_configuration.CopyFrom(kwargs['alignment_configuration'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to start_basecalling: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.start_basecalling, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def start_barcoding(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.start_barcoding, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = StartBarcodingRequest()

        if "input_reads_directories" in kwargs:
            unused_args.remove("input_reads_directories")
            _message.input_reads_directories.extend(kwargs['input_reads_directories'])

        if "output_reads_directory" in kwargs:
            unused_args.remove("output_reads_directory")
            _message.output_reads_directory = kwargs['output_reads_directory']

        if "compress_fastq" in kwargs:
            unused_args.remove("compress_fastq")
            _message.compress_fastq = kwargs['compress_fastq']

        if "recursive" in kwargs:
            unused_args.remove("recursive")
            _message.recursive = kwargs['recursive']

        if "barcoding_configuration" in kwargs:
            unused_args.remove("barcoding_configuration")
            _message.barcoding_configuration.CopyFrom(kwargs['barcoding_configuration'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to start_barcoding: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.start_barcoding, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def start_alignment(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.start_alignment, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = StartAlignmentRequest()

        if "input_reads_directories" in kwargs:
            unused_args.remove("input_reads_directories")
            _message.input_reads_directories.extend(kwargs['input_reads_directories'])

        if "output_reads_directory" in kwargs:
            unused_args.remove("output_reads_directory")
            _message.output_reads_directory = kwargs['output_reads_directory']

        if "recursive" in kwargs:
            unused_args.remove("recursive")
            _message.recursive = kwargs['recursive']

        if "alignment_configuration" in kwargs:
            unused_args.remove("alignment_configuration")
            _message.alignment_configuration.CopyFrom(kwargs['alignment_configuration'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to start_alignment: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.start_alignment, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def cancel(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.cancel, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = CancelRequest()

        if "id" in kwargs:
            unused_args.remove("id")
            _message.id = kwargs['id']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to cancel: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.cancel, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def get_info(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_info, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        # check oneof group 'selection'
        oneof_fields = set([
            "preset",
            "id",
            "list",
        ])

        if len(unused_args & oneof_fields) > 1:
            raise ArgumentError("get_info given multiple conflicting arguments: '{}'".format(", ".join(unused_args & oneof_fields)))

        _message = GetInfoRequest()

        if "preset" in kwargs:
            unused_args.remove("preset")
            _message.preset = kwargs['preset']

        if "id" in kwargs:
            unused_args.remove("id")
            _message.id = kwargs['id']

        if "list" in kwargs:
            unused_args.remove("list")
            _message.list.CopyFrom(kwargs['list'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_info: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_info, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

    def watch(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.watch, _message, _timeout, [], "minknow_api.basecaller.Basecaller")

        unused_args = set(kwargs.keys())

        _message = WatchRequest()

        if "send_finished_runs" in kwargs:
            unused_args.remove("send_finished_runs")
            _message.send_finished_runs = kwargs['send_finished_runs']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to watch: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.watch, _message, _timeout, [], "minknow_api.basecaller.Basecaller")