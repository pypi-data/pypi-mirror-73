### THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY ###
from .statistics_pb2_grpc import *
from . import statistics_pb2
from minknow_api.statistics_pb2 import *
from minknow_api._support import MessageWrapper, ArgumentError
import time
import logging

__all__ = [
    "StatisticsService",
    "DataSelection",
    "StreamDutyTimeRequest",
    "StreamDutyTimeResponse",
    "StreamReadLengthHistogramRequest",
    "StreamReadLengthHistogramResponse",
    "GetReadLengthTypesRequest",
    "GetReadLengthTypesResponse",
    "AcquisitionOutputKey",
    "AcquisitionOutputSplit",
    "StreamAcquisitionOutputRequest",
    "AcquisitionOutputBucket",
    "StreamAcquisitionOutputResponse",
    "StreamWriterOutputRequest",
    "WriterOutputBucket",
    "StreamWriterOutputResponse",
    "StreamEncounteredAcquisitionOutputKeysRequest",
    "StreamEncounteredAcquisitionOutputKeysResponse",
    "StreamTemperatureRequest",
    "TemperaturePacket",
    "StreamTemperatureResponse",
    "BiasVoltagePacket",
    "StreamBiasVoltagesRequest",
    "StreamBiasVoltagesResponse",
    "StreamBoxplotRequest",
    "BoxplotResponse",
    "ReadLengthType",
    "MinknowEvents",
    "EstimatedBases",
    "BasecalledBases",
    "BucketValueType",
    "ReadCounts",
    "ReadLengths",
]

def run_with_retry(method, message, timeout, unwraps, full_name):
    retry_count = 20
    error = None
    for i in range(retry_count):
        try:
            result = MessageWrapper(method(message, timeout=timeout), unwraps=unwraps)
            return result
        except grpc.RpcError as e:
            # Retrying unidentified grpc errors to keep clients from crashing
            retryable_error = (e.code() == grpc.StatusCode.UNKNOWN and "Stream removed" in e.details() or \
                                (e.code() == grpc.StatusCode.INTERNAL and "RST_STREAM" in e.details()))
            if retryable_error:
                logging.info('Bypassed ({}: {}) error for grpc: {}. Attempt {}.'.format(e.code(), e.details(), full_name, i))
            else:
                raise
            error = e
        time.sleep(1)
    raise error


class StatisticsService(object):
    def __init__(self, channel):
        self._stub = StatisticsServiceStub(channel)
        self._pb = statistics_pb2

    def stream_duty_time(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_duty_time, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamDutyTimeRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_duty_time requires a 'acquisition_run_id' argument")

        if "data_selection" in kwargs:
            unused_args.remove("data_selection")
            _message.data_selection.CopyFrom(kwargs['data_selection'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_duty_time: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_duty_time, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_acquisition_output(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_acquisition_output, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamAcquisitionOutputRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_acquisition_output requires a 'acquisition_run_id' argument")

        if "data_selection" in kwargs:
            unused_args.remove("data_selection")
            _message.data_selection.CopyFrom(kwargs['data_selection'])

        if "filtering" in kwargs:
            unused_args.remove("filtering")
            _message.filtering.extend(kwargs['filtering'])

        if "split" in kwargs:
            unused_args.remove("split")
            _message.split.CopyFrom(kwargs['split'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_acquisition_output: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_acquisition_output, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_writer_output(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_writer_output, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamWriterOutputRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_writer_output requires a 'acquisition_run_id' argument")

        if "data_selection" in kwargs:
            unused_args.remove("data_selection")
            _message.data_selection.CopyFrom(kwargs['data_selection'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_writer_output: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_writer_output, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_encountered_acquisition_output_keys(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_encountered_acquisition_output_keys, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamEncounteredAcquisitionOutputKeysRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_encountered_acquisition_output_keys requires a 'acquisition_run_id' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_encountered_acquisition_output_keys: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_encountered_acquisition_output_keys, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_temperature(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_temperature, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamTemperatureRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_temperature requires a 'acquisition_run_id' argument")

        if "data_selection" in kwargs:
            unused_args.remove("data_selection")
            _message.data_selection.CopyFrom(kwargs['data_selection'])

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_temperature: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_temperature, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_bias_voltages(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_bias_voltages, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamBiasVoltagesRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_bias_voltages requires a 'acquisition_run_id' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_bias_voltages: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_bias_voltages, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_read_length_histogram(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_read_length_histogram, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamReadLengthHistogramRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_read_length_histogram requires a 'acquisition_run_id' argument")

        if "poll_time_seconds" in kwargs:
            unused_args.remove("poll_time_seconds")
            _message.poll_time_seconds = kwargs['poll_time_seconds']

        if "read_length_type" in kwargs:
            unused_args.remove("read_length_type")
            _message.read_length_type = kwargs['read_length_type']

        if "data_selection" in kwargs:
            unused_args.remove("data_selection")
            _message.data_selection.CopyFrom(kwargs['data_selection'])

        if "bucket_value_type" in kwargs:
            unused_args.remove("bucket_value_type")
            _message.bucket_value_type = kwargs['bucket_value_type']

        if "discard_outlier_percent" in kwargs:
            unused_args.remove("discard_outlier_percent")
            _message.discard_outlier_percent = kwargs['discard_outlier_percent']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_read_length_histogram: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_read_length_histogram, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def get_read_length_types(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.get_read_length_types, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = GetReadLengthTypesRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("get_read_length_types requires a 'acquisition_run_id' argument")

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to get_read_length_types: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.get_read_length_types, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

    def stream_basecall_boxplots(self, _message=None, _timeout=None, **kwargs):
        if _message is not None:
            if isinstance(_message, MessageWrapper):
                _message = _message._message
            return run_with_retry(self._stub.stream_basecall_boxplots, _message, _timeout, [], "minknow_api.statistics.StatisticsService")

        unused_args = set(kwargs.keys())

        _message = StreamBoxplotRequest()

        if "acquisition_run_id" in kwargs:
            unused_args.remove("acquisition_run_id")
            _message.acquisition_run_id = kwargs['acquisition_run_id']
        else:
            raise ArgumentError("stream_basecall_boxplots requires a 'acquisition_run_id' argument")

        if "data_type" in kwargs:
            unused_args.remove("data_type")
            _message.data_type = kwargs['data_type']

        if "dataset_width" in kwargs:
            unused_args.remove("dataset_width")
            _message.dataset_width = kwargs['dataset_width']

        if "poll_time" in kwargs:
            unused_args.remove("poll_time")
            _message.poll_time = kwargs['poll_time']

        if len(unused_args) > 0:
            raise ArgumentError("Unexpected keyword arguments to stream_basecall_boxplots: '{}'".format(", ".join(unused_args)))

        return run_with_retry(self._stub.stream_basecall_boxplots, _message, _timeout, [], "minknow_api.statistics.StatisticsService")