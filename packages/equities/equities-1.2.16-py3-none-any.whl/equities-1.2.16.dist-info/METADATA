Metadata-Version: 2.1
Name: equities
Version: 1.2.16
Summary: equities aims to democratize access to publically avaliable financial data. sec data scrapper/parser/cleaner 
Home-page: https://github.com/ljc-codes/art-engine.git
Author: Luigi Charles
Author-email: ljwcharles@gmail.com
License: UNKNOWN
Keywords: sec stock stockmarket equities equity scrapper parser pandas
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: astroid (==2.0.4)
Requires-Dist: certifi (==2018.8.24)
Requires-Dist: chardet (==3.0.4)
Requires-Dist: defusedxml (==0.5.0)
Requires-Dist: dnspython (==1.16.0)
Requires-Dist: emoji (==0.5.4)
Requires-Dist: essential-generators (==0.9.2)
Requires-Dist: firebase-admin (==4.2.0)
Requires-Dist: gunicorn (==19.7.1)
Requires-Dist: idna (==2.7)
Requires-Dist: isort (==4.3.4)
Requires-Dist: lazy-object-proxy (==1.3.1)
Requires-Dist: mccabe (==0.6.1)
Requires-Dist: numpy (==1.18.0)
Requires-Dist: oauthlib (==2.1.0)
Requires-Dist: pandas (==1.0.1)
Requires-Dist: psutil (==5.6.2)
Requires-Dist: pylint (==2.1.1)
Requires-Dist: python3-openid (==3.1.0)
Requires-Dist: pytz (==2018.5)
Requires-Dist: Pyrebase (==3.0.27)
Requires-Dist: requests (==2.21.0)
Requires-Dist: requests-oauthlib (==1.0.0)
Requires-Dist: seaborn (==0.9.0)
Requires-Dist: six (==1.11.0)
Requires-Dist: sqlparse (==0.3.0)
Requires-Dist: sseclient (==0.0.26)
Requires-Dist: tqdm (==4.43.0)
Requires-Dist: typed-ast (==1.1.0)
Requires-Dist: urllib3 (==1.24.2)
Requires-Dist: whitenoise (==3.3.1)
Requires-Dist: wrapt (==1.10.11)


# ðŸ¦… Equities

## Overview: 

    equities is a python library that allows easy access to the SEC's XLBR dataset.
    Parsed data is stored locally for ease of use. Data is returned in pandas
    dataframes. 

## TUTORIAL: 

The equities library consists of two central objects, Universe and Company. 

## Universe: 

A Universe should be thought of as a set of Companies. The universe object gives us the ability to download,
access and purge our data. 

    from equities.objects import Universe

    universe = Universe()

#### Downloading Data:

On first use the universe is empty as we have not downloaded data. Before calling the download function we can 
optionally supply the universe with an array of quarters and limit to the number of companies parsed. 

    quarters = ["2019q1","2019q2","2019q3","2019q4","2020q1"] # quarters to be downloaded
    ciks = 50 # limits parsing to first 50 companies. 

If no optional arguments are supplied, we will proceed to download the entire dataset and parse all companies. 

To download data we call

    universe.download(quarters=quarters,ciks=num_companies)

The requested data will then be downloaded and saved locally. This means that anytime you reinstantiate the 
universe object, python remembers what you have already parsed.

#### Core Functionality:

To see the number of companies in the universe we can do: 

    print(len(universe))

Universe objects are indexable by a "CIK" or "Central Index Key" number. This is the unique identifier used by 
the sec to identify companies. To get a full list of the cik numbers in the universe one can do: 

    print(universe.ciks)

A dataframe summary of all companies in the universe is included in:

    print(universe.properties())

To access the first company in the above list you can do: 

    first_cik = universe.ciks[0]
    print(universe[first_cik])

This returns a Company Object.


## Company: 

A Company object should be thought of as an abstract representation of a real company. Every 
company must have an associated Universe of origin. 

    from equities.object import Company

#### Accessing the Financial Statements

Consider the first Company in our universe, universe[first_cik]. It is a Company object. 

    company = universe[first_cik]

Dataframes of the company's financial statements over the universe in question is given by: 

    company.income()      # income statement dataframe

    company.balance()     # Balancesheet dataframe

    company.cash()        # Cash Flow Statement dataframe

    company.equity()      # Consolidatad Equity dataframe


#### Additional Company Methods

    company.name()        # Returns company name
    company.sic()         # Returns company sic group









