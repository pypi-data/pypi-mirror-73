name: Run InVEST Tests

on:
    push:
    pull_request:

jobs:
    # This job will check for obvious syntax errors.
    # The other jobs in this file depend on this one and won't show up in the
    # jobs list on actions until this one completes successfully.
    # Best to run in linux ... windows won't honor nonzero exit statuses
    # by default.
    check-syntax-errors:
        name: "Check for syntax errors"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  # Fetch complete history for accurate versioning
                  fetch-depth: 0

            - name: Set up python 3.7
              uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - name: Set up environment
              run: python -m pip install --upgrade pip setuptools setuptools_scm flake8

            - name: Lint with flake8
              run: |
                # stop the build if there are Python syntax errors or undefined names
                python -m flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                python -m flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    run-model-tests:
        name: "Run model tests"
        runs-on: ${{ matrix.os }}
        needs: check-syntax-errors
        strategy:
            fail-fast: false
            max-parallel: 4
            matrix:
                python-version: [3.6, 3.7]
                python-architecture: [x86, x64]
                os: [windows-latest, macos-latest]
                exclude:
                    - os: macos-latest
                      python-architecture: x86

        steps:
            - uses: actions/checkout@v2
              with:
                  # Fetch complete history for accurate versioning
                  fetch-depth: 0

              # Taken from https://github.com/actions/cache/blob/master/examples.md#python---pip
            - name: Restore pip cache
              uses: actions/cache@v1
              with:
                  path: ~\AppData\Local\pip\Cache
                  key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.python-architecture }}-pip-${{ hashFiles('**/requirements*.txt') }}-model-tests

            # NOTE: It takes twice as long to save the sample data cache
            # as it does to do a fresh clone (almost 5 minutes vs. 2.5 minutes)
            # Test data is way, way faster by contrast (on the order of a few
            # seconds to archive).
            - name: Restore git-LFS test data cache
              uses: actions/cache@v1
              with:
                  path: data/invest-test-data
                  key: git-lfs-testdata-${{ hashfiles('Makefile') }}

            - name: Set up Windows python
              if: matrix.os == 'windows-latest'
              uses: actions/setup-python@v1
              with:
                python-version: ${{ matrix.python-version }}
                architecture: ${{ matrix.python-architecture }}

            - name: Install dependencies Windows
              if: matrix.os == 'windows-latest'
              env:
                  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
                  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
                  PIP_PREFER_BINARY: 1
              run: |
                  python -m pip install --upgrade pip nose setuptools
                  python -m pip install -r requirements.txt -r requirements-dev.txt
                  python setup.py install

            - name: Set up MacOS python
              if: matrix.os != 'windows-latest'
              uses: goanpeca/setup-miniconda@v1.1.2
              with:
                  activate-environment: mac-env
                  auto-update-conda: true
                  python-version: ${{ matrix.python-version }}
                  channels: conda-forge

            - name: Install dependencies MacOS
              if: matrix.os != 'windows-latest'
              shell: bash -l {0}
              run: |
                  conda upgrade -y pip setuptools
                  conda install Cython requests numpy
                  python ./scripts/convert-requirements-to-conda-yml.py requirements.txt requirements-dev.txt requirements-gui.txt > requirements-all.yml
                  conda env update --file requirements-all.yml
                  python setup.py install

            - name: Run model tests
              shell: bash -l {0}
              run: |
                  make test

    validate-sampledata:
        name: "Validate sample datastacks"
        runs-on: windows-latest
        needs: check-syntax-errors
        steps:
            - uses: actions/checkout@v2
              with:
                  # Fetch complete history for accurate versioning
                  fetch-depth: 0

            - name: Restore pip cache
              uses: actions/cache@v1
              with:
                  path: ~\AppData\Local\pip\Cache
                  key: windows-py37-pipcache-sampledata-${{ hashfiles('requirements.txt') }}

            - name: Set up python
              uses: actions/setup-python@v1
              with:
                  python-version: 3.7
                  python-architecture: x64

            - name: Install dependencies
              env:
                  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
                  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
                  PIP_PREFER_BINARY: 1
              run: |
                  python -m pip install --upgrade pip wheel nose
                  python -m pip install -r requirements.txt
                  python setup.py install

            - name: Validate sample data
              run: make validate_sampledata

    run-ui-tests:
        name: "Run UI Tests"
        runs-on: ${{ matrix.os }}
        needs: check-syntax-errors
        strategy:
            fail-fast: False
            max-parallel: 4
            matrix:
                python-version: [3.6, 3.7]
                python-architecture: [x86, x64]
                os: [windows-latest]

        steps:
            - uses: actions/checkout@v2
              with:
                  # Fetch complete history for accurate versioning
                  fetch-depth: 0

              # Taken from https://github.com/actions/cache/blob/master/examples.md#python---pip
            - name: Restore pip cache
              uses: actions/cache@v1
              with:
                  path: ~\AppData\Local\pip\Cache
                  key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.python-architecture }}-pip-${{ hashFiles('**/requirements*.txt') }}-ui-tests

            - name: Restore git-LFS test data cache
              uses: actions/cache@v1
              with:
                  path: data/invest-test-data
                  key: git-lfs-testdata-${{ hashfiles('Makefile') }}

            - name: Set up python
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}
                  architecture: ${{ matrix.python-architecture }}

            - name: Install dependencies
              env:
                  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
                  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
                  PIP_PREFER_BINARY: 1
              run: |
                  python -m pip install --upgrade pip nose setuptools
                  python -m pip install -r requirements.txt -r requirements-dev.txt -r requirements-gui.txt
                  python setup.py install

            - name: Run UI tests
              timeout-minutes: 10  # tests usually take < 2 minutes, so 10 is generous.
              run: make test_ui
