# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netbox_client.api_client import ApiClient


class SecretsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def secrets_generate_rsa_key_pair_list(self, **kwargs):  # noqa: E501
        """This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.  # noqa: E501

        {         \"public_key\": \"<public key>\",         \"private_key\": \"<private key>\"     }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_generate_rsa_key_pair_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_generate_rsa_key_pair_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secrets_generate_rsa_key_pair_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def secrets_generate_rsa_key_pair_list_with_http_info(self, **kwargs):  # noqa: E501
        """This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.  # noqa: E501

        {         \"public_key\": \"<public key>\",         \"private_key\": \"<private key>\"     }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_generate_rsa_key_pair_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_generate_rsa_key_pair_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/generate-rsa-key-pair/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_get_session_key_create(self, **kwargs):  # noqa: E501
        """secrets_get_session_key_create  # noqa: E501

        Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA key is POSTed with the name `private_key`. An example:      curl -v -X POST -H \"Authorization: Token <token>\" -H \"Accept: application/json; indent=4\" \\     --data-urlencode \"private_key@<filename>\" https://netbox/api/secrets/get-session-key/  This request will yield a base64-encoded session key to be included in an `X-Session-Key` header in future requests:      {         \"session_key\": \"+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf=\"     }  This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session key will be returned instead of a new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_get_session_key_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_get_session_key_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secrets_get_session_key_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def secrets_get_session_key_create_with_http_info(self, **kwargs):  # noqa: E501
        """secrets_get_session_key_create  # noqa: E501

        Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA key is POSTed with the name `private_key`. An example:      curl -v -X POST -H \"Authorization: Token <token>\" -H \"Accept: application/json; indent=4\" \\     --data-urlencode \"private_key@<filename>\" https://netbox/api/secrets/get-session-key/  This request will yield a base64-encoded session key to be included in an `X-Session-Key` header in future requests:      {         \"session_key\": \"+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf=\"     }  This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session key will be returned instead of a new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_get_session_key_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_get_session_key_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/get-session-key/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_create(self, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secret_roles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_delete(self, id, **kwargs):  # noqa: E501
        """secrets_secret_roles_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """secrets_secret_roles_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secret_roles_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_list(self, **kwargs):  # noqa: E501
        """secrets_secret_roles_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_list_with_http_info(self, **kwargs):  # noqa: E501
        """secrets_secret_roles_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'q', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_partial_update(self, id, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secret_roles_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secret_roles_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_read(self, id, **kwargs):  # noqa: E501
        """secrets_secret_roles_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """secrets_secret_roles_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secret_roles_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secret_roles_update(self, id, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secret_roles_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secret_roles_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def secrets_secret_roles_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """secrets_secret_roles_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secret_roles_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret role. (required)
        :param SecretRole data: (required)
        :return: SecretRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secret_roles_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secret_roles_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secret_roles_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secret-roles/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecretRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_create(self, data, **kwargs):  # noqa: E501
        """secrets_secrets_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def secrets_secrets_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """secrets_secrets_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secrets_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Secret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_delete(self, id, **kwargs):  # noqa: E501
        """secrets_secrets_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def secrets_secrets_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """secrets_secrets_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secrets_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_list(self, **kwargs):  # noqa: E501
        """secrets_secrets_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str role_id: 
        :param str role: 
        :param str device_id: 
        :param str device: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str role_id__n: 
        :param str role__n: 
        :param str device_id__n: 
        :param str device__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def secrets_secrets_list_with_http_info(self, **kwargs):  # noqa: E501
        """secrets_secrets_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str role_id: 
        :param str role: 
        :param str device_id: 
        :param str device: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str role_id__n: 
        :param str role__n: 
        :param str device_id__n: 
        :param str device__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'role_id', 'role', 'device_id', 'device', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'role_id__n', 'role__n', 'device_id__n', 'device__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('device_id', params['device_id']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'role_id__n' in params:
            query_params.append(('role_id__n', params['role_id__n']))  # noqa: E501
        if 'role__n' in params:
            query_params.append(('role__n', params['role__n']))  # noqa: E501
        if 'device_id__n' in params:
            query_params.append(('device_id__n', params['device_id__n']))  # noqa: E501
        if 'device__n' in params:
            query_params.append(('device__n', params['device__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_partial_update(self, id, data, **kwargs):  # noqa: E501
        """secrets_secrets_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def secrets_secrets_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """secrets_secrets_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secrets_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secrets_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Secret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_read(self, id, **kwargs):  # noqa: E501
        """secrets_secrets_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def secrets_secrets_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """secrets_secrets_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secrets_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Secret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secrets_secrets_update(self, id, data, **kwargs):  # noqa: E501
        """secrets_secrets_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secrets_secrets_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.secrets_secrets_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def secrets_secrets_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """secrets_secrets_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secrets_secrets_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this secret. (required)
        :param WritableSecret data: (required)
        :return: Secret
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secrets_secrets_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `secrets_secrets_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `secrets_secrets_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/secrets/secrets/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Secret',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
