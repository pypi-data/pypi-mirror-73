# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netbox_client.api_client import ApiClient


class IpamApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ipam_aggregates_create(self, data, **kwargs):  # noqa: E501
        """ipam_aggregates_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_aggregates_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_aggregates_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_aggregates_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aggregate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_aggregates_delete(self, id, **kwargs):  # noqa: E501
        """ipam_aggregates_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_aggregates_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_aggregates_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_aggregates_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_aggregates_list(self, **kwargs):  # noqa: E501
        """ipam_aggregates_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str date_added: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str prefix: 
        :param str rir_id: 
        :param str rir: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str date_added__n: 
        :param str date_added__lte: 
        :param str date_added__lt: 
        :param str date_added__gte: 
        :param str date_added__gt: 
        :param str rir_id__n: 
        :param str rir__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_aggregates_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_aggregates_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str date_added: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str prefix: 
        :param str rir_id: 
        :param str rir: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str date_added__n: 
        :param str date_added__lte: 
        :param str date_added__lt: 
        :param str date_added__gte: 
        :param str date_added__gt: 
        :param str rir_id__n: 
        :param str rir__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'date_added', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'family', 'prefix', 'rir_id', 'rir', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'date_added__n', 'date_added__lte', 'date_added__lt', 'date_added__gte', 'date_added__gt', 'rir_id__n', 'rir__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'date_added' in params:
            query_params.append(('date_added', params['date_added']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'rir_id' in params:
            query_params.append(('rir_id', params['rir_id']))  # noqa: E501
        if 'rir' in params:
            query_params.append(('rir', params['rir']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'date_added__n' in params:
            query_params.append(('date_added__n', params['date_added__n']))  # noqa: E501
        if 'date_added__lte' in params:
            query_params.append(('date_added__lte', params['date_added__lte']))  # noqa: E501
        if 'date_added__lt' in params:
            query_params.append(('date_added__lt', params['date_added__lt']))  # noqa: E501
        if 'date_added__gte' in params:
            query_params.append(('date_added__gte', params['date_added__gte']))  # noqa: E501
        if 'date_added__gt' in params:
            query_params.append(('date_added__gt', params['date_added__gt']))  # noqa: E501
        if 'rir_id__n' in params:
            query_params.append(('rir_id__n', params['rir_id__n']))  # noqa: E501
        if 'rir__n' in params:
            query_params.append(('rir__n', params['rir__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_aggregates_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_aggregates_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_aggregates_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_aggregates_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_aggregates_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_aggregates_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aggregate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_aggregates_read(self, id, **kwargs):  # noqa: E501
        """ipam_aggregates_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_aggregates_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_aggregates_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_aggregates_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aggregate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_aggregates_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_aggregates_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_aggregates_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_aggregates_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_aggregates_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_aggregates_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_aggregates_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this aggregate. (required)
        :param WritableAggregate data: (required)
        :return: Aggregate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_aggregates_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_aggregates_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_aggregates_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/aggregates/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aggregate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_create(self, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_ip_addresses_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_delete(self, id, **kwargs):  # noqa: E501
        """ipam_ip_addresses_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_ip_addresses_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_ip_addresses_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_list(self, **kwargs):  # noqa: E501
        """ipam_ip_addresses_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str dns_name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str parent: 
        :param str address: 
        :param float mask_length: 
        :param str vrf_id: 
        :param str vrf: 
        :param str device: 
        :param str device_id: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str interface: 
        :param str interface_id: 
        :param str assigned_to_interface: 
        :param str status: 
        :param str role: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str dns_name__n: 
        :param str dns_name__ic: 
        :param str dns_name__nic: 
        :param str dns_name__iew: 
        :param str dns_name__niew: 
        :param str dns_name__isw: 
        :param str dns_name__nisw: 
        :param str dns_name__ie: 
        :param str dns_name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str vrf_id__n: 
        :param str vrf__n: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str interface__n: 
        :param str interface_id__n: 
        :param str status__n: 
        :param str role__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_ip_addresses_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str dns_name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str parent: 
        :param str address: 
        :param float mask_length: 
        :param str vrf_id: 
        :param str vrf: 
        :param str device: 
        :param str device_id: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str interface: 
        :param str interface_id: 
        :param str assigned_to_interface: 
        :param str status: 
        :param str role: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str dns_name__n: 
        :param str dns_name__ic: 
        :param str dns_name__nic: 
        :param str dns_name__iew: 
        :param str dns_name__niew: 
        :param str dns_name__isw: 
        :param str dns_name__nisw: 
        :param str dns_name__ie: 
        :param str dns_name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str vrf_id__n: 
        :param str vrf__n: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str interface__n: 
        :param str interface_id__n: 
        :param str status__n: 
        :param str role__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dns_name', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'family', 'parent', 'address', 'mask_length', 'vrf_id', 'vrf', 'device', 'device_id', 'virtual_machine_id', 'virtual_machine', 'interface', 'interface_id', 'assigned_to_interface', 'status', 'role', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'dns_name__n', 'dns_name__ic', 'dns_name__nic', 'dns_name__iew', 'dns_name__niew', 'dns_name__isw', 'dns_name__nisw', 'dns_name__ie', 'dns_name__nie', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'vrf_id__n', 'vrf__n', 'virtual_machine_id__n', 'virtual_machine__n', 'interface__n', 'interface_id__n', 'status__n', 'role__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'dns_name' in params:
            query_params.append(('dns_name', params['dns_name']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'mask_length' in params:
            query_params.append(('mask_length', params['mask_length']))  # noqa: E501
        if 'vrf_id' in params:
            query_params.append(('vrf_id', params['vrf_id']))  # noqa: E501
        if 'vrf' in params:
            query_params.append(('vrf', params['vrf']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('device_id', params['device_id']))  # noqa: E501
        if 'virtual_machine_id' in params:
            query_params.append(('virtual_machine_id', params['virtual_machine_id']))  # noqa: E501
        if 'virtual_machine' in params:
            query_params.append(('virtual_machine', params['virtual_machine']))  # noqa: E501
        if 'interface' in params:
            query_params.append(('interface', params['interface']))  # noqa: E501
        if 'interface_id' in params:
            query_params.append(('interface_id', params['interface_id']))  # noqa: E501
        if 'assigned_to_interface' in params:
            query_params.append(('assigned_to_interface', params['assigned_to_interface']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'dns_name__n' in params:
            query_params.append(('dns_name__n', params['dns_name__n']))  # noqa: E501
        if 'dns_name__ic' in params:
            query_params.append(('dns_name__ic', params['dns_name__ic']))  # noqa: E501
        if 'dns_name__nic' in params:
            query_params.append(('dns_name__nic', params['dns_name__nic']))  # noqa: E501
        if 'dns_name__iew' in params:
            query_params.append(('dns_name__iew', params['dns_name__iew']))  # noqa: E501
        if 'dns_name__niew' in params:
            query_params.append(('dns_name__niew', params['dns_name__niew']))  # noqa: E501
        if 'dns_name__isw' in params:
            query_params.append(('dns_name__isw', params['dns_name__isw']))  # noqa: E501
        if 'dns_name__nisw' in params:
            query_params.append(('dns_name__nisw', params['dns_name__nisw']))  # noqa: E501
        if 'dns_name__ie' in params:
            query_params.append(('dns_name__ie', params['dns_name__ie']))  # noqa: E501
        if 'dns_name__nie' in params:
            query_params.append(('dns_name__nie', params['dns_name__nie']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'vrf_id__n' in params:
            query_params.append(('vrf_id__n', params['vrf_id__n']))  # noqa: E501
        if 'vrf__n' in params:
            query_params.append(('vrf__n', params['vrf__n']))  # noqa: E501
        if 'virtual_machine_id__n' in params:
            query_params.append(('virtual_machine_id__n', params['virtual_machine_id__n']))  # noqa: E501
        if 'virtual_machine__n' in params:
            query_params.append(('virtual_machine__n', params['virtual_machine__n']))  # noqa: E501
        if 'interface__n' in params:
            query_params.append(('interface__n', params['interface__n']))  # noqa: E501
        if 'interface_id__n' in params:
            query_params.append(('interface_id__n', params['interface_id__n']))  # noqa: E501
        if 'status__n' in params:
            query_params.append(('status__n', params['status__n']))  # noqa: E501
        if 'role__n' in params:
            query_params.append(('role__n', params['role__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_ip_addresses_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_ip_addresses_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_read(self, id, **kwargs):  # noqa: E501
        """ipam_ip_addresses_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_ip_addresses_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_ip_addresses_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_ip_addresses_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_ip_addresses_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_ip_addresses_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_ip_addresses_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_ip_addresses_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_ip_addresses_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this IP address. (required)
        :param WritableIPAddress data: (required)
        :return: IPAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_ip_addresses_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_ip_addresses_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_ip_addresses_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/ip-addresses/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_available_ips_create(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_available_ips_create  # noqa: E501

        A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_ips_create(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: list[AvailableIP]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_available_ips_create_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_available_ips_create_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_available_ips_create_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_available_ips_create  # noqa: E501

        A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_ips_create_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: list[AvailableIP]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_available_ips_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_available_ips_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_prefixes_available_ips_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/available-ips/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvailableIP]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_available_ips_read(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_available_ips_read  # noqa: E501

        A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_ips_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: list[AvailableIP]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_available_ips_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_available_ips_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_available_ips_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_available_ips_read  # noqa: E501

        A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_ips_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: list[AvailableIP]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_available_ips_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_available_ips_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/available-ips/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvailableIP]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_available_prefixes_create(self, id, data, **kwargs):  # noqa: E501
        """A convenience method for returning available child prefixes within a parent.  # noqa: E501

        The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_prefixes_create(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: list[AvailablePrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_available_prefixes_create_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_available_prefixes_create_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_available_prefixes_create_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """A convenience method for returning available child prefixes within a parent.  # noqa: E501

        The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_prefixes_create_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: list[AvailablePrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_available_prefixes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_available_prefixes_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_prefixes_available_prefixes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/available-prefixes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvailablePrefix]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_available_prefixes_read(self, id, **kwargs):  # noqa: E501
        """A convenience method for returning available child prefixes within a parent.  # noqa: E501

        The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_prefixes_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: list[AvailablePrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_available_prefixes_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_available_prefixes_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_available_prefixes_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """A convenience method for returning available child prefixes within a parent.  # noqa: E501

        The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_available_prefixes_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: list[AvailablePrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_available_prefixes_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_available_prefixes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/available-prefixes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvailablePrefix]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_create(self, data, **kwargs):  # noqa: E501
        """ipam_prefixes_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_prefixes_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_prefixes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prefix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_delete(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_list(self, **kwargs):  # noqa: E501
        """ipam_prefixes_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str is_pool: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str prefix: 
        :param str within: 
        :param str within_include: 
        :param str contains: 
        :param float mask_length: 
        :param str vrf_id: 
        :param str vrf: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str vlan_id: 
        :param float vlan_vid: 
        :param str role_id: 
        :param str role: 
        :param str status: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str vrf_id__n: 
        :param str vrf__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str vlan_id__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str status__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_prefixes_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_prefixes_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str is_pool: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param float family: 
        :param str prefix: 
        :param str within: 
        :param str within_include: 
        :param str contains: 
        :param float mask_length: 
        :param str vrf_id: 
        :param str vrf: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str vlan_id: 
        :param float vlan_vid: 
        :param str role_id: 
        :param str role: 
        :param str status: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str vrf_id__n: 
        :param str vrf__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str vlan_id__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str status__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'is_pool', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'family', 'prefix', 'within', 'within_include', 'contains', 'mask_length', 'vrf_id', 'vrf', 'region_id', 'region', 'site_id', 'site', 'vlan_id', 'vlan_vid', 'role_id', 'role', 'status', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'vrf_id__n', 'vrf__n', 'region_id__n', 'region__n', 'site_id__n', 'site__n', 'vlan_id__n', 'role_id__n', 'role__n', 'status__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'is_pool' in params:
            query_params.append(('is_pool', params['is_pool']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'within' in params:
            query_params.append(('within', params['within']))  # noqa: E501
        if 'within_include' in params:
            query_params.append(('within_include', params['within_include']))  # noqa: E501
        if 'contains' in params:
            query_params.append(('contains', params['contains']))  # noqa: E501
        if 'mask_length' in params:
            query_params.append(('mask_length', params['mask_length']))  # noqa: E501
        if 'vrf_id' in params:
            query_params.append(('vrf_id', params['vrf_id']))  # noqa: E501
        if 'vrf' in params:
            query_params.append(('vrf', params['vrf']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501
        if 'vlan_id' in params:
            query_params.append(('vlan_id', params['vlan_id']))  # noqa: E501
        if 'vlan_vid' in params:
            query_params.append(('vlan_vid', params['vlan_vid']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'vrf_id__n' in params:
            query_params.append(('vrf_id__n', params['vrf_id__n']))  # noqa: E501
        if 'vrf__n' in params:
            query_params.append(('vrf__n', params['vrf__n']))  # noqa: E501
        if 'region_id__n' in params:
            query_params.append(('region_id__n', params['region_id__n']))  # noqa: E501
        if 'region__n' in params:
            query_params.append(('region__n', params['region__n']))  # noqa: E501
        if 'site_id__n' in params:
            query_params.append(('site_id__n', params['site_id__n']))  # noqa: E501
        if 'site__n' in params:
            query_params.append(('site__n', params['site__n']))  # noqa: E501
        if 'vlan_id__n' in params:
            query_params.append(('vlan_id__n', params['vlan_id__n']))  # noqa: E501
        if 'role_id__n' in params:
            query_params.append(('role_id__n', params['role_id__n']))  # noqa: E501
        if 'role__n' in params:
            query_params.append(('role__n', params['role__n']))  # noqa: E501
        if 'status__n' in params:
            query_params.append(('status__n', params['status__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_prefixes_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prefix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_read(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_prefixes_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prefix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_prefixes_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_prefixes_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_prefixes_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_prefixes_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_prefixes_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_prefixes_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this prefix. (required)
        :param WritablePrefix data: (required)
        :return: Prefix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_prefixes_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_prefixes_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_prefixes_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/prefixes/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Prefix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_create(self, data, **kwargs):  # noqa: E501
        """ipam_rirs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_rirs_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_rirs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_rirs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RIR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_delete(self, id, **kwargs):  # noqa: E501
        """ipam_rirs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_rirs_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_rirs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_rirs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_list(self, **kwargs):  # noqa: E501
        """ipam_rirs_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str is_private: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_rirs_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_rirs_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str is_private: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'is_private', 'description', 'q', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'description__n', 'description__ic', 'description__nic', 'description__iew', 'description__niew', 'description__isw', 'description__nisw', 'description__ie', 'description__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'is_private' in params:
            query_params.append(('is_private', params['is_private']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'description__n' in params:
            query_params.append(('description__n', params['description__n']))  # noqa: E501
        if 'description__ic' in params:
            query_params.append(('description__ic', params['description__ic']))  # noqa: E501
        if 'description__nic' in params:
            query_params.append(('description__nic', params['description__nic']))  # noqa: E501
        if 'description__iew' in params:
            query_params.append(('description__iew', params['description__iew']))  # noqa: E501
        if 'description__niew' in params:
            query_params.append(('description__niew', params['description__niew']))  # noqa: E501
        if 'description__isw' in params:
            query_params.append(('description__isw', params['description__isw']))  # noqa: E501
        if 'description__nisw' in params:
            query_params.append(('description__nisw', params['description__nisw']))  # noqa: E501
        if 'description__ie' in params:
            query_params.append(('description__ie', params['description__ie']))  # noqa: E501
        if 'description__nie' in params:
            query_params.append(('description__nie', params['description__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_rirs_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_rirs_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_rirs_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_rirs_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_rirs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RIR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_read(self, id, **kwargs):  # noqa: E501
        """ipam_rirs_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_rirs_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_rirs_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_rirs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RIR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_rirs_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_rirs_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_rirs_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_rirs_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_rirs_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_rirs_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_rirs_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this RIR. (required)
        :param RIR data: (required)
        :return: RIR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_rirs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_rirs_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_rirs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/rirs/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RIR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_create(self, data, **kwargs):  # noqa: E501
        """ipam_roles_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_roles_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_roles_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_roles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_delete(self, id, **kwargs):  # noqa: E501
        """ipam_roles_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_roles_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_roles_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_roles_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_list(self, **kwargs):  # noqa: E501
        """ipam_roles_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_roles_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_roles_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'q', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_roles_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_roles_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_roles_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_roles_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_roles_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_read(self, id, **kwargs):  # noqa: E501
        """ipam_roles_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_roles_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_roles_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_roles_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_roles_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_roles_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_roles_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_roles_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_roles_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_roles_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_roles_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this role. (required)
        :param Role data: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_roles_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_roles_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_roles_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/roles/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_create(self, data, **kwargs):  # noqa: E501
        """ipam_services_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_services_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_services_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_services_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Service',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_delete(self, id, **kwargs):  # noqa: E501
        """ipam_services_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_services_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_services_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_services_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_list(self, **kwargs):  # noqa: E501
        """ipam_services_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str protocol: 
        :param str port: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str device_id: 
        :param str device: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str protocol__n: 
        :param str port__n: 
        :param str port__lte: 
        :param str port__lt: 
        :param str port__gte: 
        :param str port__gt: 
        :param str device_id__n: 
        :param str device__n: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_services_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_services_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str protocol: 
        :param str port: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str device_id: 
        :param str device: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str protocol__n: 
        :param str port__n: 
        :param str port__lte: 
        :param str port__lt: 
        :param str port__gte: 
        :param str port__gt: 
        :param str device_id__n: 
        :param str device__n: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'protocol', 'port', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'device_id', 'device', 'virtual_machine_id', 'virtual_machine', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'protocol__n', 'port__n', 'port__lte', 'port__lt', 'port__gte', 'port__gt', 'device_id__n', 'device__n', 'virtual_machine_id__n', 'virtual_machine__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))  # noqa: E501
        if 'port' in params:
            query_params.append(('port', params['port']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('device_id', params['device_id']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'virtual_machine_id' in params:
            query_params.append(('virtual_machine_id', params['virtual_machine_id']))  # noqa: E501
        if 'virtual_machine' in params:
            query_params.append(('virtual_machine', params['virtual_machine']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'protocol__n' in params:
            query_params.append(('protocol__n', params['protocol__n']))  # noqa: E501
        if 'port__n' in params:
            query_params.append(('port__n', params['port__n']))  # noqa: E501
        if 'port__lte' in params:
            query_params.append(('port__lte', params['port__lte']))  # noqa: E501
        if 'port__lt' in params:
            query_params.append(('port__lt', params['port__lt']))  # noqa: E501
        if 'port__gte' in params:
            query_params.append(('port__gte', params['port__gte']))  # noqa: E501
        if 'port__gt' in params:
            query_params.append(('port__gt', params['port__gt']))  # noqa: E501
        if 'device_id__n' in params:
            query_params.append(('device_id__n', params['device_id__n']))  # noqa: E501
        if 'device__n' in params:
            query_params.append(('device__n', params['device__n']))  # noqa: E501
        if 'virtual_machine_id__n' in params:
            query_params.append(('virtual_machine_id__n', params['virtual_machine_id__n']))  # noqa: E501
        if 'virtual_machine__n' in params:
            query_params.append(('virtual_machine__n', params['virtual_machine__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_services_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_services_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_services_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_services_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_services_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Service',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_read(self, id, **kwargs):  # noqa: E501
        """ipam_services_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_services_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_services_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_services_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Service',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_services_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_services_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_services_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_services_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_services_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_services_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_services_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this service. (required)
        :param WritableService data: (required)
        :return: Service
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_services_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_services_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_services_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/services/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Service',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_create(self, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlan_groups_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLANGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_delete(self, id, **kwargs):  # noqa: E501
        """ipam_vlan_groups_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vlan_groups_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlan_groups_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_list(self, **kwargs):  # noqa: E501
        """ipam_vlan_groups_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_vlan_groups_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'description', 'q', 'region_id', 'region', 'site_id', 'site', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'description__n', 'description__ic', 'description__nic', 'description__iew', 'description__niew', 'description__isw', 'description__nisw', 'description__ie', 'description__nie', 'region_id__n', 'region__n', 'site_id__n', 'site__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'description__n' in params:
            query_params.append(('description__n', params['description__n']))  # noqa: E501
        if 'description__ic' in params:
            query_params.append(('description__ic', params['description__ic']))  # noqa: E501
        if 'description__nic' in params:
            query_params.append(('description__nic', params['description__nic']))  # noqa: E501
        if 'description__iew' in params:
            query_params.append(('description__iew', params['description__iew']))  # noqa: E501
        if 'description__niew' in params:
            query_params.append(('description__niew', params['description__niew']))  # noqa: E501
        if 'description__isw' in params:
            query_params.append(('description__isw', params['description__isw']))  # noqa: E501
        if 'description__nisw' in params:
            query_params.append(('description__nisw', params['description__nisw']))  # noqa: E501
        if 'description__ie' in params:
            query_params.append(('description__ie', params['description__ie']))  # noqa: E501
        if 'description__nie' in params:
            query_params.append(('description__nie', params['description__nie']))  # noqa: E501
        if 'region_id__n' in params:
            query_params.append(('region_id__n', params['region_id__n']))  # noqa: E501
        if 'region__n' in params:
            query_params.append(('region__n', params['region__n']))  # noqa: E501
        if 'site_id__n' in params:
            query_params.append(('site_id__n', params['site_id__n']))  # noqa: E501
        if 'site__n' in params:
            query_params.append(('site__n', params['site__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlan_groups_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlan_groups_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLANGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_read(self, id, **kwargs):  # noqa: E501
        """ipam_vlan_groups_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vlan_groups_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlan_groups_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLANGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlan_groups_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlan_groups_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlan_groups_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vlan_groups_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlan_groups_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlan_groups_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN group. (required)
        :param WritableVLANGroup data: (required)
        :return: VLANGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlan_groups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlan_groups_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlan_groups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlan-groups/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLANGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_create(self, data, **kwargs):  # noqa: E501
        """ipam_vlans_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_vlans_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_vlans_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlans_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLAN',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_delete(self, id, **kwargs):  # noqa: E501
        """ipam_vlans_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vlans_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vlans_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlans_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_list(self, **kwargs):  # noqa: E501
        """ipam_vlans_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str vid: 
        :param str name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str group_id: 
        :param str group: 
        :param str role_id: 
        :param str role: 
        :param str status: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str vid__n: 
        :param str vid__lte: 
        :param str vid__lt: 
        :param str vid__gte: 
        :param str vid__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str group_id__n: 
        :param str group__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str status__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_vlans_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_vlans_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str vid: 
        :param str name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str group_id: 
        :param str group: 
        :param str role_id: 
        :param str role: 
        :param str status: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str vid__n: 
        :param str vid__lte: 
        :param str vid__lt: 
        :param str vid__gte: 
        :param str vid__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str group_id__n: 
        :param str group__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str status__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vid', 'name', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'region_id', 'region', 'site_id', 'site', 'group_id', 'group', 'role_id', 'role', 'status', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'vid__n', 'vid__lte', 'vid__lt', 'vid__gte', 'vid__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'region_id__n', 'region__n', 'site_id__n', 'site__n', 'group_id__n', 'group__n', 'role_id__n', 'role__n', 'status__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'vid' in params:
            query_params.append(('vid', params['vid']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'vid__n' in params:
            query_params.append(('vid__n', params['vid__n']))  # noqa: E501
        if 'vid__lte' in params:
            query_params.append(('vid__lte', params['vid__lte']))  # noqa: E501
        if 'vid__lt' in params:
            query_params.append(('vid__lt', params['vid__lt']))  # noqa: E501
        if 'vid__gte' in params:
            query_params.append(('vid__gte', params['vid__gte']))  # noqa: E501
        if 'vid__gt' in params:
            query_params.append(('vid__gt', params['vid__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'region_id__n' in params:
            query_params.append(('region_id__n', params['region_id__n']))  # noqa: E501
        if 'region__n' in params:
            query_params.append(('region__n', params['region__n']))  # noqa: E501
        if 'site_id__n' in params:
            query_params.append(('site_id__n', params['site_id__n']))  # noqa: E501
        if 'site__n' in params:
            query_params.append(('site__n', params['site__n']))  # noqa: E501
        if 'group_id__n' in params:
            query_params.append(('group_id__n', params['group_id__n']))  # noqa: E501
        if 'group__n' in params:
            query_params.append(('group__n', params['group__n']))  # noqa: E501
        if 'role_id__n' in params:
            query_params.append(('role_id__n', params['role_id__n']))  # noqa: E501
        if 'role__n' in params:
            query_params.append(('role__n', params['role__n']))  # noqa: E501
        if 'status__n' in params:
            query_params.append(('status__n', params['status__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlans_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vlans_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlans_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlans_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlans_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLAN',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_read(self, id, **kwargs):  # noqa: E501
        """ipam_vlans_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vlans_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vlans_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlans_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLAN',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vlans_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlans_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vlans_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vlans_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vlans_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vlans_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vlans_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VLAN. (required)
        :param WritableVLAN data: (required)
        :return: VLAN
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vlans_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vlans_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vlans_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vlans/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VLAN',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_create(self, data, **kwargs):  # noqa: E501
        """ipam_vrfs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def ipam_vrfs_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """ipam_vrfs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vrfs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_delete(self, id, **kwargs):  # noqa: E501
        """ipam_vrfs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vrfs_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vrfs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vrfs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_list(self, **kwargs):  # noqa: E501
        """ipam_vrfs_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str rd: 
        :param str enforce_unique: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str rd__n: 
        :param str rd__ic: 
        :param str rd__nic: 
        :param str rd__iew: 
        :param str rd__niew: 
        :param str rd__isw: 
        :param str rd__nisw: 
        :param str rd__ie: 
        :param str rd__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipam_vrfs_list_with_http_info(self, **kwargs):  # noqa: E501
        """ipam_vrfs_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str rd: 
        :param str enforce_unique: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str rd__n: 
        :param str rd__ic: 
        :param str rd__nic: 
        :param str rd__iew: 
        :param str rd__niew: 
        :param str rd__isw: 
        :param str rd__nisw: 
        :param str rd__ie: 
        :param str rd__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'rd', 'enforce_unique', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'rd__n', 'rd__ic', 'rd__nic', 'rd__iew', 'rd__niew', 'rd__isw', 'rd__nisw', 'rd__ie', 'rd__nie', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'rd' in params:
            query_params.append(('rd', params['rd']))  # noqa: E501
        if 'enforce_unique' in params:
            query_params.append(('enforce_unique', params['enforce_unique']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'rd__n' in params:
            query_params.append(('rd__n', params['rd__n']))  # noqa: E501
        if 'rd__ic' in params:
            query_params.append(('rd__ic', params['rd__ic']))  # noqa: E501
        if 'rd__nic' in params:
            query_params.append(('rd__nic', params['rd__nic']))  # noqa: E501
        if 'rd__iew' in params:
            query_params.append(('rd__iew', params['rd__iew']))  # noqa: E501
        if 'rd__niew' in params:
            query_params.append(('rd__niew', params['rd__niew']))  # noqa: E501
        if 'rd__isw' in params:
            query_params.append(('rd__isw', params['rd__isw']))  # noqa: E501
        if 'rd__nisw' in params:
            query_params.append(('rd__nisw', params['rd__nisw']))  # noqa: E501
        if 'rd__ie' in params:
            query_params.append(('rd__ie', params['rd__ie']))  # noqa: E501
        if 'rd__nie' in params:
            query_params.append(('rd__nie', params['rd__nie']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_partial_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vrfs_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vrfs_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vrfs_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vrfs_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vrfs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_read(self, id, **kwargs):  # noqa: E501
        """ipam_vrfs_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ipam_vrfs_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """ipam_vrfs_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vrfs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipam_vrfs_update(self, id, data, **kwargs):  # noqa: E501
        """ipam_vrfs_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipam_vrfs_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.ipam_vrfs_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def ipam_vrfs_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """ipam_vrfs_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipam_vrfs_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this VRF. (required)
        :param WritableVRF data: (required)
        :return: VRF
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipam_vrfs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ipam_vrfs_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `ipam_vrfs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ipam/vrfs/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
