# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CircuitCircuitTermination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'url': 'str',
        'site': 'NestedSite',
        'connected_endpoint': 'NestedInterface',
        'port_speed': 'int',
        'upstream_speed': 'int',
        'xconnect_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'site': 'site',
        'connected_endpoint': 'connected_endpoint',
        'port_speed': 'port_speed',
        'upstream_speed': 'upstream_speed',
        'xconnect_id': 'xconnect_id'
    }

    def __init__(self, id=None, url=None, site=None, connected_endpoint=None, port_speed=None, upstream_speed=None, xconnect_id=None):  # noqa: E501
        """CircuitCircuitTermination - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._url = None
        self._site = None
        self._connected_endpoint = None
        self._port_speed = None
        self._upstream_speed = None
        self._xconnect_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        self.site = site
        if connected_endpoint is not None:
            self.connected_endpoint = connected_endpoint
        self.port_speed = port_speed
        if upstream_speed is not None:
            self.upstream_speed = upstream_speed
        if xconnect_id is not None:
            self.xconnect_id = xconnect_id

    @property
    def id(self):
        """Gets the id of this CircuitCircuitTermination.  # noqa: E501


        :return: The id of this CircuitCircuitTermination.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CircuitCircuitTermination.


        :param id: The id of this CircuitCircuitTermination.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this CircuitCircuitTermination.  # noqa: E501


        :return: The url of this CircuitCircuitTermination.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CircuitCircuitTermination.


        :param url: The url of this CircuitCircuitTermination.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def site(self):
        """Gets the site of this CircuitCircuitTermination.  # noqa: E501


        :return: The site of this CircuitCircuitTermination.  # noqa: E501
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this CircuitCircuitTermination.


        :param site: The site of this CircuitCircuitTermination.  # noqa: E501
        :type: NestedSite
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def connected_endpoint(self):
        """Gets the connected_endpoint of this CircuitCircuitTermination.  # noqa: E501


        :return: The connected_endpoint of this CircuitCircuitTermination.  # noqa: E501
        :rtype: NestedInterface
        """
        return self._connected_endpoint

    @connected_endpoint.setter
    def connected_endpoint(self, connected_endpoint):
        """Sets the connected_endpoint of this CircuitCircuitTermination.


        :param connected_endpoint: The connected_endpoint of this CircuitCircuitTermination.  # noqa: E501
        :type: NestedInterface
        """

        self._connected_endpoint = connected_endpoint

    @property
    def port_speed(self):
        """Gets the port_speed of this CircuitCircuitTermination.  # noqa: E501


        :return: The port_speed of this CircuitCircuitTermination.  # noqa: E501
        :rtype: int
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed):
        """Sets the port_speed of this CircuitCircuitTermination.


        :param port_speed: The port_speed of this CircuitCircuitTermination.  # noqa: E501
        :type: int
        """
        if port_speed is None:
            raise ValueError("Invalid value for `port_speed`, must not be `None`")  # noqa: E501
        if port_speed is not None and port_speed > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `port_speed`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if port_speed is not None and port_speed < 0:  # noqa: E501
            raise ValueError("Invalid value for `port_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port_speed = port_speed

    @property
    def upstream_speed(self):
        """Gets the upstream_speed of this CircuitCircuitTermination.  # noqa: E501

        Upstream speed, if different from port speed  # noqa: E501

        :return: The upstream_speed of this CircuitCircuitTermination.  # noqa: E501
        :rtype: int
        """
        return self._upstream_speed

    @upstream_speed.setter
    def upstream_speed(self, upstream_speed):
        """Sets the upstream_speed of this CircuitCircuitTermination.

        Upstream speed, if different from port speed  # noqa: E501

        :param upstream_speed: The upstream_speed of this CircuitCircuitTermination.  # noqa: E501
        :type: int
        """
        if upstream_speed is not None and upstream_speed > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `upstream_speed`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if upstream_speed is not None and upstream_speed < 0:  # noqa: E501
            raise ValueError("Invalid value for `upstream_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._upstream_speed = upstream_speed

    @property
    def xconnect_id(self):
        """Gets the xconnect_id of this CircuitCircuitTermination.  # noqa: E501


        :return: The xconnect_id of this CircuitCircuitTermination.  # noqa: E501
        :rtype: str
        """
        return self._xconnect_id

    @xconnect_id.setter
    def xconnect_id(self, xconnect_id):
        """Sets the xconnect_id of this CircuitCircuitTermination.


        :param xconnect_id: The xconnect_id of this CircuitCircuitTermination.  # noqa: E501
        :type: str
        """
        if xconnect_id is not None and len(xconnect_id) > 50:
            raise ValueError("Invalid value for `xconnect_id`, length must be less than or equal to `50`")  # noqa: E501

        self._xconnect_id = xconnect_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CircuitCircuitTermination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CircuitCircuitTermination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
