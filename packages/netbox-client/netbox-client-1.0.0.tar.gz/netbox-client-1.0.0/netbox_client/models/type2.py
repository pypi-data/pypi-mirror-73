# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Type2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'value': 'str'
    }

    attribute_map = {
        'label': 'label',
        'value': 'value'
    }

    def __init__(self, label=None, value=None):  # noqa: E501
        """Type2 - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._value = None
        self.discriminator = None

        self.label = label
        self.value = value

    @property
    def label(self):
        """Gets the label of this Type2.  # noqa: E501


        :return: The label of this Type2.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Type2.


        :param label: The label of this Type2.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        allowed_values = ["Virtual", "Link Aggregation Group (LAG)", "100BASE-TX (10/100ME)", "1000BASE-T (1GE)", "2.5GBASE-T (2.5GE)", "5GBASE-T (5GE)", "10GBASE-T (10GE)", "10GBASE-CX4 (10GE)", "GBIC (1GE)", "SFP (1GE)", "SFP+ (10GE)", "XFP (10GE)", "XENPAK (10GE)", "X2 (10GE)", "SFP28 (25GE)", "QSFP+ (40GE)", "QSFP28 (50GE)", "CFP (100GE)", "CFP2 (100GE)", "CFP2 (200GE)", "CFP4 (100GE)", "Cisco CPAK (100GE)", "QSFP28 (100GE)", "QSFP56 (200GE)", "QSFP-DD (400GE)", "OSFP (400GE)", "IEEE 802.11a", "IEEE 802.11b/g", "IEEE 802.11n", "IEEE 802.11ac", "IEEE 802.11ad", "IEEE 802.11ax", "GSM", "CDMA", "LTE", "OC-3/STM-1", "OC-12/STM-4", "OC-48/STM-16", "OC-192/STM-64", "OC-768/STM-256", "OC-1920/STM-640", "OC-3840/STM-1234", "SFP (1GFC)", "SFP (2GFC)", "SFP (4GFC)", "SFP+ (8GFC)", "SFP+ (16GFC)", "SFP28 (32GFC)", "QSFP28 (128GFC)", "SDR (2 Gbps)", "DDR (4 Gbps)", "QDR (8 Gbps)", "FDR10 (10 Gbps)", "FDR (13.5 Gbps)", "EDR (25 Gbps)", "HDR (50 Gbps)", "NDR (100 Gbps)", "XDR (250 Gbps)", "T1 (1.544 Mbps)", "E1 (2.048 Mbps)", "T3 (45 Mbps)", "E3 (34 Mbps)", "Cisco StackWise", "Cisco StackWise Plus", "Cisco FlexStack", "Cisco FlexStack Plus", "Juniper VCP", "Extreme SummitStack", "Extreme SummitStack-128", "Extreme SummitStack-256", "Extreme SummitStack-512", "Other"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"  # noqa: E501
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this Type2.  # noqa: E501


        :return: The value of this Type2.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Type2.


        :param value: The value of this Type2.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        allowed_values = ["virtual", "lag", "100base-tx", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "128gfc-sfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"  # noqa: E501
                .format(value, allowed_values)
            )

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Type2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Type2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
