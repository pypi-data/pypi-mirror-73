# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netbox_client.api_client import ApiClient


class VirtualizationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def virtualization_cluster_groups_create(self, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_groups_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_groups_delete(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_groups_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_groups_list(self, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_list_with_http_info(self, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'description', 'q', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'description__n', 'description__ic', 'description__nic', 'description__iew', 'description__niew', 'description__isw', 'description__nisw', 'description__ie', 'description__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'description__n' in params:
            query_params.append(('description__n', params['description__n']))  # noqa: E501
        if 'description__ic' in params:
            query_params.append(('description__ic', params['description__ic']))  # noqa: E501
        if 'description__nic' in params:
            query_params.append(('description__nic', params['description__nic']))  # noqa: E501
        if 'description__iew' in params:
            query_params.append(('description__iew', params['description__iew']))  # noqa: E501
        if 'description__niew' in params:
            query_params.append(('description__niew', params['description__niew']))  # noqa: E501
        if 'description__isw' in params:
            query_params.append(('description__isw', params['description__isw']))  # noqa: E501
        if 'description__nisw' in params:
            query_params.append(('description__nisw', params['description__nisw']))  # noqa: E501
        if 'description__ie' in params:
            query_params.append(('description__ie', params['description__ie']))  # noqa: E501
        if 'description__nie' in params:
            query_params.append(('description__nie', params['description__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_groups_partial_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_groups_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_groups_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_groups_read(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_groups_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_groups_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_groups_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_groups_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_groups_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_groups_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_groups_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster group. (required)
        :param ClusterGroup data: (required)
        :return: ClusterGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_groups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_groups_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_groups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-groups/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_create(self, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_types_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_delete(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_types_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_types_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_types_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_list(self, **kwargs):  # noqa: E501
        """virtualization_cluster_types_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_list_with_http_info(self, **kwargs):  # noqa: E501
        """virtualization_cluster_types_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str slug: 
        :param str description: 
        :param str q: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str slug__n: 
        :param str slug__ic: 
        :param str slug__nic: 
        :param str slug__iew: 
        :param str slug__niew: 
        :param str slug__isw: 
        :param str slug__nisw: 
        :param str slug__ie: 
        :param str slug__nie: 
        :param str description__n: 
        :param str description__ic: 
        :param str description__nic: 
        :param str description__iew: 
        :param str description__niew: 
        :param str description__isw: 
        :param str description__nisw: 
        :param str description__ie: 
        :param str description__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'slug', 'description', 'q', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'slug__n', 'slug__ic', 'slug__nic', 'slug__iew', 'slug__niew', 'slug__isw', 'slug__nisw', 'slug__ie', 'slug__nie', 'description__n', 'description__ic', 'description__nic', 'description__iew', 'description__niew', 'description__isw', 'description__nisw', 'description__ie', 'description__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'slug' in params:
            query_params.append(('slug', params['slug']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'slug__n' in params:
            query_params.append(('slug__n', params['slug__n']))  # noqa: E501
        if 'slug__ic' in params:
            query_params.append(('slug__ic', params['slug__ic']))  # noqa: E501
        if 'slug__nic' in params:
            query_params.append(('slug__nic', params['slug__nic']))  # noqa: E501
        if 'slug__iew' in params:
            query_params.append(('slug__iew', params['slug__iew']))  # noqa: E501
        if 'slug__niew' in params:
            query_params.append(('slug__niew', params['slug__niew']))  # noqa: E501
        if 'slug__isw' in params:
            query_params.append(('slug__isw', params['slug__isw']))  # noqa: E501
        if 'slug__nisw' in params:
            query_params.append(('slug__nisw', params['slug__nisw']))  # noqa: E501
        if 'slug__ie' in params:
            query_params.append(('slug__ie', params['slug__ie']))  # noqa: E501
        if 'slug__nie' in params:
            query_params.append(('slug__nie', params['slug__nie']))  # noqa: E501
        if 'description__n' in params:
            query_params.append(('description__n', params['description__n']))  # noqa: E501
        if 'description__ic' in params:
            query_params.append(('description__ic', params['description__ic']))  # noqa: E501
        if 'description__nic' in params:
            query_params.append(('description__nic', params['description__nic']))  # noqa: E501
        if 'description__iew' in params:
            query_params.append(('description__iew', params['description__iew']))  # noqa: E501
        if 'description__niew' in params:
            query_params.append(('description__niew', params['description__niew']))  # noqa: E501
        if 'description__isw' in params:
            query_params.append(('description__isw', params['description__isw']))  # noqa: E501
        if 'description__nisw' in params:
            query_params.append(('description__nisw', params['description__nisw']))  # noqa: E501
        if 'description__ie' in params:
            query_params.append(('description__ie', params['description__ie']))  # noqa: E501
        if 'description__nie' in params:
            query_params.append(('description__nie', params['description__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_partial_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_types_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_types_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_read(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_types_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_cluster_types_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_types_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_cluster_types_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_cluster_types_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_cluster_types_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_cluster_types_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_cluster_types_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_cluster_types_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster type. (required)
        :param ClusterType data: (required)
        :return: ClusterType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_cluster_types_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_cluster_types_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_cluster_types_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/cluster-types/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_create(self, data, **kwargs):  # noqa: E501
        """virtualization_clusters_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def virtualization_clusters_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """virtualization_clusters_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_clusters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_delete(self, id, **kwargs):  # noqa: E501
        """virtualization_clusters_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_clusters_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_clusters_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_clusters_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_list(self, **kwargs):  # noqa: E501
        """virtualization_clusters_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str group_id: 
        :param str group: 
        :param str type_id: 
        :param str type: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str group_id__n: 
        :param str group__n: 
        :param str type_id__n: 
        :param str type__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def virtualization_clusters_list_with_http_info(self, **kwargs):  # noqa: E501
        """virtualization_clusters_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str group_id: 
        :param str group: 
        :param str type_id: 
        :param str type: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str group_id__n: 
        :param str group__n: 
        :param str type_id__n: 
        :param str type__n: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'region_id', 'region', 'site_id', 'site', 'group_id', 'group', 'type_id', 'type', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'region_id__n', 'region__n', 'site_id__n', 'site__n', 'group_id__n', 'group__n', 'type_id__n', 'type__n', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'type_id' in params:
            query_params.append(('type_id', params['type_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'region_id__n' in params:
            query_params.append(('region_id__n', params['region_id__n']))  # noqa: E501
        if 'region__n' in params:
            query_params.append(('region__n', params['region__n']))  # noqa: E501
        if 'site_id__n' in params:
            query_params.append(('site_id__n', params['site_id__n']))  # noqa: E501
        if 'site__n' in params:
            query_params.append(('site__n', params['site__n']))  # noqa: E501
        if 'group_id__n' in params:
            query_params.append(('group_id__n', params['group_id__n']))  # noqa: E501
        if 'group__n' in params:
            query_params.append(('group__n', params['group__n']))  # noqa: E501
        if 'type_id__n' in params:
            query_params.append(('type_id__n', params['type_id__n']))  # noqa: E501
        if 'type__n' in params:
            query_params.append(('type__n', params['type__n']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_partial_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_clusters_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_clusters_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_clusters_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_clusters_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_clusters_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_read(self, id, **kwargs):  # noqa: E501
        """virtualization_clusters_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_clusters_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_clusters_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_clusters_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_clusters_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_clusters_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_clusters_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_clusters_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_clusters_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_clusters_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_clusters_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this cluster. (required)
        :param WritableCluster data: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_clusters_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_clusters_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_clusters_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/clusters/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_create(self, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_interfaces_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_delete(self, id, **kwargs):  # noqa: E501
        """virtualization_interfaces_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_interfaces_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_interfaces_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_list(self, **kwargs):  # noqa: E501
        """virtualization_interfaces_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str enabled: 
        :param str mtu: 
        :param str q: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str mac_address: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str mtu__n: 
        :param str mtu__lte: 
        :param str mtu__lt: 
        :param str mtu__gte: 
        :param str mtu__gt: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str mac_address__n: 
        :param str mac_address__ic: 
        :param str mac_address__nic: 
        :param str mac_address__iew: 
        :param str mac_address__niew: 
        :param str mac_address__isw: 
        :param str mac_address__nisw: 
        :param str mac_address__ie: 
        :param str mac_address__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_list_with_http_info(self, **kwargs):  # noqa: E501
        """virtualization_interfaces_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str enabled: 
        :param str mtu: 
        :param str q: 
        :param str virtual_machine_id: 
        :param str virtual_machine: 
        :param str mac_address: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str mtu__n: 
        :param str mtu__lte: 
        :param str mtu__lt: 
        :param str mtu__gte: 
        :param str mtu__gt: 
        :param str virtual_machine_id__n: 
        :param str virtual_machine__n: 
        :param str mac_address__n: 
        :param str mac_address__ic: 
        :param str mac_address__nic: 
        :param str mac_address__iew: 
        :param str mac_address__niew: 
        :param str mac_address__isw: 
        :param str mac_address__nisw: 
        :param str mac_address__ie: 
        :param str mac_address__nie: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'enabled', 'mtu', 'q', 'virtual_machine_id', 'virtual_machine', 'mac_address', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'mtu__n', 'mtu__lte', 'mtu__lt', 'mtu__gte', 'mtu__gt', 'virtual_machine_id__n', 'virtual_machine__n', 'mac_address__n', 'mac_address__ic', 'mac_address__nic', 'mac_address__iew', 'mac_address__niew', 'mac_address__isw', 'mac_address__nisw', 'mac_address__ie', 'mac_address__nie', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'mtu' in params:
            query_params.append(('mtu', params['mtu']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'virtual_machine_id' in params:
            query_params.append(('virtual_machine_id', params['virtual_machine_id']))  # noqa: E501
        if 'virtual_machine' in params:
            query_params.append(('virtual_machine', params['virtual_machine']))  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('mac_address', params['mac_address']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'mtu__n' in params:
            query_params.append(('mtu__n', params['mtu__n']))  # noqa: E501
        if 'mtu__lte' in params:
            query_params.append(('mtu__lte', params['mtu__lte']))  # noqa: E501
        if 'mtu__lt' in params:
            query_params.append(('mtu__lt', params['mtu__lt']))  # noqa: E501
        if 'mtu__gte' in params:
            query_params.append(('mtu__gte', params['mtu__gte']))  # noqa: E501
        if 'mtu__gt' in params:
            query_params.append(('mtu__gt', params['mtu__gt']))  # noqa: E501
        if 'virtual_machine_id__n' in params:
            query_params.append(('virtual_machine_id__n', params['virtual_machine_id__n']))  # noqa: E501
        if 'virtual_machine__n' in params:
            query_params.append(('virtual_machine__n', params['virtual_machine__n']))  # noqa: E501
        if 'mac_address__n' in params:
            query_params.append(('mac_address__n', params['mac_address__n']))  # noqa: E501
        if 'mac_address__ic' in params:
            query_params.append(('mac_address__ic', params['mac_address__ic']))  # noqa: E501
        if 'mac_address__nic' in params:
            query_params.append(('mac_address__nic', params['mac_address__nic']))  # noqa: E501
        if 'mac_address__iew' in params:
            query_params.append(('mac_address__iew', params['mac_address__iew']))  # noqa: E501
        if 'mac_address__niew' in params:
            query_params.append(('mac_address__niew', params['mac_address__niew']))  # noqa: E501
        if 'mac_address__isw' in params:
            query_params.append(('mac_address__isw', params['mac_address__isw']))  # noqa: E501
        if 'mac_address__nisw' in params:
            query_params.append(('mac_address__nisw', params['mac_address__nisw']))  # noqa: E501
        if 'mac_address__ie' in params:
            query_params.append(('mac_address__ie', params['mac_address__ie']))  # noqa: E501
        if 'mac_address__nie' in params:
            query_params.append(('mac_address__nie', params['mac_address__nie']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_partial_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_interfaces_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_interfaces_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_read(self, id, **kwargs):  # noqa: E501
        """virtualization_interfaces_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_interfaces_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_interfaces_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_interfaces_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_interfaces_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_interfaces_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_interfaces_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_interfaces_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_interfaces_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this interface. (required)
        :param WritableVirtualMachineInterface data: (required)
        :return: VirtualMachineInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_interfaces_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_interfaces_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_interfaces_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/interfaces/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_create(self, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_virtual_machines_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineWithConfigContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_delete(self, id, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_virtual_machines_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_list(self, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str cluster: 
        :param str vcpus: 
        :param str memory: 
        :param str disk: 
        :param str local_context_data: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str status: 
        :param str cluster_group_id: 
        :param str cluster_group: 
        :param str cluster_type_id: 
        :param str cluster_type: 
        :param str cluster_id: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str role_id: 
        :param str role: 
        :param str platform_id: 
        :param str platform: 
        :param str mac_address: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str cluster__n: 
        :param str vcpus__n: 
        :param str vcpus__lte: 
        :param str vcpus__lt: 
        :param str vcpus__gte: 
        :param str vcpus__gt: 
        :param str memory__n: 
        :param str memory__lte: 
        :param str memory__lt: 
        :param str memory__gte: 
        :param str memory__gt: 
        :param str disk__n: 
        :param str disk__lte: 
        :param str disk__lt: 
        :param str disk__gte: 
        :param str disk__gt: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str status__n: 
        :param str cluster_group_id__n: 
        :param str cluster_group__n: 
        :param str cluster_type_id__n: 
        :param str cluster_type__n: 
        :param str cluster_id__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str platform_id__n: 
        :param str platform__n: 
        :param str mac_address__n: 
        :param str mac_address__ic: 
        :param str mac_address__nic: 
        :param str mac_address__iew: 
        :param str mac_address__niew: 
        :param str mac_address__isw: 
        :param str mac_address__nisw: 
        :param str mac_address__ie: 
        :param str mac_address__nie: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_list_with_http_info(self, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_list  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 
        :param str name: 
        :param str cluster: 
        :param str vcpus: 
        :param str memory: 
        :param str disk: 
        :param str local_context_data: 
        :param str tenant_group_id: 
        :param str tenant_group: 
        :param str tenant_id: 
        :param str tenant: 
        :param str created: 
        :param str created__gte: 
        :param str created__lte: 
        :param str last_updated: 
        :param str last_updated__gte: 
        :param str last_updated__lte: 
        :param str q: 
        :param str status: 
        :param str cluster_group_id: 
        :param str cluster_group: 
        :param str cluster_type_id: 
        :param str cluster_type: 
        :param str cluster_id: 
        :param str region_id: 
        :param str region: 
        :param str site_id: 
        :param str site: 
        :param str role_id: 
        :param str role: 
        :param str platform_id: 
        :param str platform: 
        :param str mac_address: 
        :param str tag: 
        :param str id__n: 
        :param str id__lte: 
        :param str id__lt: 
        :param str id__gte: 
        :param str id__gt: 
        :param str name__n: 
        :param str name__ic: 
        :param str name__nic: 
        :param str name__iew: 
        :param str name__niew: 
        :param str name__isw: 
        :param str name__nisw: 
        :param str name__ie: 
        :param str name__nie: 
        :param str cluster__n: 
        :param str vcpus__n: 
        :param str vcpus__lte: 
        :param str vcpus__lt: 
        :param str vcpus__gte: 
        :param str vcpus__gt: 
        :param str memory__n: 
        :param str memory__lte: 
        :param str memory__lt: 
        :param str memory__gte: 
        :param str memory__gt: 
        :param str disk__n: 
        :param str disk__lte: 
        :param str disk__lt: 
        :param str disk__gte: 
        :param str disk__gt: 
        :param str tenant_group_id__n: 
        :param str tenant_group__n: 
        :param str tenant_id__n: 
        :param str tenant__n: 
        :param str status__n: 
        :param str cluster_group_id__n: 
        :param str cluster_group__n: 
        :param str cluster_type_id__n: 
        :param str cluster_type__n: 
        :param str cluster_id__n: 
        :param str region_id__n: 
        :param str region__n: 
        :param str site_id__n: 
        :param str site__n: 
        :param str role_id__n: 
        :param str role__n: 
        :param str platform_id__n: 
        :param str platform__n: 
        :param str mac_address__n: 
        :param str mac_address__ic: 
        :param str mac_address__nic: 
        :param str mac_address__iew: 
        :param str mac_address__niew: 
        :param str mac_address__isw: 
        :param str mac_address__nisw: 
        :param str mac_address__ie: 
        :param str mac_address__nie: 
        :param str tag__n: 
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'cluster', 'vcpus', 'memory', 'disk', 'local_context_data', 'tenant_group_id', 'tenant_group', 'tenant_id', 'tenant', 'created', 'created__gte', 'created__lte', 'last_updated', 'last_updated__gte', 'last_updated__lte', 'q', 'status', 'cluster_group_id', 'cluster_group', 'cluster_type_id', 'cluster_type', 'cluster_id', 'region_id', 'region', 'site_id', 'site', 'role_id', 'role', 'platform_id', 'platform', 'mac_address', 'tag', 'id__n', 'id__lte', 'id__lt', 'id__gte', 'id__gt', 'name__n', 'name__ic', 'name__nic', 'name__iew', 'name__niew', 'name__isw', 'name__nisw', 'name__ie', 'name__nie', 'cluster__n', 'vcpus__n', 'vcpus__lte', 'vcpus__lt', 'vcpus__gte', 'vcpus__gt', 'memory__n', 'memory__lte', 'memory__lt', 'memory__gte', 'memory__gt', 'disk__n', 'disk__lte', 'disk__lt', 'disk__gte', 'disk__gt', 'tenant_group_id__n', 'tenant_group__n', 'tenant_id__n', 'tenant__n', 'status__n', 'cluster_group_id__n', 'cluster_group__n', 'cluster_type_id__n', 'cluster_type__n', 'cluster_id__n', 'region_id__n', 'region__n', 'site_id__n', 'site__n', 'role_id__n', 'role__n', 'platform_id__n', 'platform__n', 'mac_address__n', 'mac_address__ic', 'mac_address__nic', 'mac_address__iew', 'mac_address__niew', 'mac_address__isw', 'mac_address__nisw', 'mac_address__ie', 'mac_address__nie', 'tag__n', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'cluster' in params:
            query_params.append(('cluster', params['cluster']))  # noqa: E501
        if 'vcpus' in params:
            query_params.append(('vcpus', params['vcpus']))  # noqa: E501
        if 'memory' in params:
            query_params.append(('memory', params['memory']))  # noqa: E501
        if 'disk' in params:
            query_params.append(('disk', params['disk']))  # noqa: E501
        if 'local_context_data' in params:
            query_params.append(('local_context_data', params['local_context_data']))  # noqa: E501
        if 'tenant_group_id' in params:
            query_params.append(('tenant_group_id', params['tenant_group_id']))  # noqa: E501
        if 'tenant_group' in params:
            query_params.append(('tenant_group', params['tenant_group']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'tenant' in params:
            query_params.append(('tenant', params['tenant']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'last_updated' in params:
            query_params.append(('last_updated', params['last_updated']))  # noqa: E501
        if 'last_updated__gte' in params:
            query_params.append(('last_updated__gte', params['last_updated__gte']))  # noqa: E501
        if 'last_updated__lte' in params:
            query_params.append(('last_updated__lte', params['last_updated__lte']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'cluster_group_id' in params:
            query_params.append(('cluster_group_id', params['cluster_group_id']))  # noqa: E501
        if 'cluster_group' in params:
            query_params.append(('cluster_group', params['cluster_group']))  # noqa: E501
        if 'cluster_type_id' in params:
            query_params.append(('cluster_type_id', params['cluster_type_id']))  # noqa: E501
        if 'cluster_type' in params:
            query_params.append(('cluster_type', params['cluster_type']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'platform_id' in params:
            query_params.append(('platform_id', params['platform_id']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('mac_address', params['mac_address']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'id__n' in params:
            query_params.append(('id__n', params['id__n']))  # noqa: E501
        if 'id__lte' in params:
            query_params.append(('id__lte', params['id__lte']))  # noqa: E501
        if 'id__lt' in params:
            query_params.append(('id__lt', params['id__lt']))  # noqa: E501
        if 'id__gte' in params:
            query_params.append(('id__gte', params['id__gte']))  # noqa: E501
        if 'id__gt' in params:
            query_params.append(('id__gt', params['id__gt']))  # noqa: E501
        if 'name__n' in params:
            query_params.append(('name__n', params['name__n']))  # noqa: E501
        if 'name__ic' in params:
            query_params.append(('name__ic', params['name__ic']))  # noqa: E501
        if 'name__nic' in params:
            query_params.append(('name__nic', params['name__nic']))  # noqa: E501
        if 'name__iew' in params:
            query_params.append(('name__iew', params['name__iew']))  # noqa: E501
        if 'name__niew' in params:
            query_params.append(('name__niew', params['name__niew']))  # noqa: E501
        if 'name__isw' in params:
            query_params.append(('name__isw', params['name__isw']))  # noqa: E501
        if 'name__nisw' in params:
            query_params.append(('name__nisw', params['name__nisw']))  # noqa: E501
        if 'name__ie' in params:
            query_params.append(('name__ie', params['name__ie']))  # noqa: E501
        if 'name__nie' in params:
            query_params.append(('name__nie', params['name__nie']))  # noqa: E501
        if 'cluster__n' in params:
            query_params.append(('cluster__n', params['cluster__n']))  # noqa: E501
        if 'vcpus__n' in params:
            query_params.append(('vcpus__n', params['vcpus__n']))  # noqa: E501
        if 'vcpus__lte' in params:
            query_params.append(('vcpus__lte', params['vcpus__lte']))  # noqa: E501
        if 'vcpus__lt' in params:
            query_params.append(('vcpus__lt', params['vcpus__lt']))  # noqa: E501
        if 'vcpus__gte' in params:
            query_params.append(('vcpus__gte', params['vcpus__gte']))  # noqa: E501
        if 'vcpus__gt' in params:
            query_params.append(('vcpus__gt', params['vcpus__gt']))  # noqa: E501
        if 'memory__n' in params:
            query_params.append(('memory__n', params['memory__n']))  # noqa: E501
        if 'memory__lte' in params:
            query_params.append(('memory__lte', params['memory__lte']))  # noqa: E501
        if 'memory__lt' in params:
            query_params.append(('memory__lt', params['memory__lt']))  # noqa: E501
        if 'memory__gte' in params:
            query_params.append(('memory__gte', params['memory__gte']))  # noqa: E501
        if 'memory__gt' in params:
            query_params.append(('memory__gt', params['memory__gt']))  # noqa: E501
        if 'disk__n' in params:
            query_params.append(('disk__n', params['disk__n']))  # noqa: E501
        if 'disk__lte' in params:
            query_params.append(('disk__lte', params['disk__lte']))  # noqa: E501
        if 'disk__lt' in params:
            query_params.append(('disk__lt', params['disk__lt']))  # noqa: E501
        if 'disk__gte' in params:
            query_params.append(('disk__gte', params['disk__gte']))  # noqa: E501
        if 'disk__gt' in params:
            query_params.append(('disk__gt', params['disk__gt']))  # noqa: E501
        if 'tenant_group_id__n' in params:
            query_params.append(('tenant_group_id__n', params['tenant_group_id__n']))  # noqa: E501
        if 'tenant_group__n' in params:
            query_params.append(('tenant_group__n', params['tenant_group__n']))  # noqa: E501
        if 'tenant_id__n' in params:
            query_params.append(('tenant_id__n', params['tenant_id__n']))  # noqa: E501
        if 'tenant__n' in params:
            query_params.append(('tenant__n', params['tenant__n']))  # noqa: E501
        if 'status__n' in params:
            query_params.append(('status__n', params['status__n']))  # noqa: E501
        if 'cluster_group_id__n' in params:
            query_params.append(('cluster_group_id__n', params['cluster_group_id__n']))  # noqa: E501
        if 'cluster_group__n' in params:
            query_params.append(('cluster_group__n', params['cluster_group__n']))  # noqa: E501
        if 'cluster_type_id__n' in params:
            query_params.append(('cluster_type_id__n', params['cluster_type_id__n']))  # noqa: E501
        if 'cluster_type__n' in params:
            query_params.append(('cluster_type__n', params['cluster_type__n']))  # noqa: E501
        if 'cluster_id__n' in params:
            query_params.append(('cluster_id__n', params['cluster_id__n']))  # noqa: E501
        if 'region_id__n' in params:
            query_params.append(('region_id__n', params['region_id__n']))  # noqa: E501
        if 'region__n' in params:
            query_params.append(('region__n', params['region__n']))  # noqa: E501
        if 'site_id__n' in params:
            query_params.append(('site_id__n', params['site_id__n']))  # noqa: E501
        if 'site__n' in params:
            query_params.append(('site__n', params['site__n']))  # noqa: E501
        if 'role_id__n' in params:
            query_params.append(('role_id__n', params['role_id__n']))  # noqa: E501
        if 'role__n' in params:
            query_params.append(('role__n', params['role__n']))  # noqa: E501
        if 'platform_id__n' in params:
            query_params.append(('platform_id__n', params['platform_id__n']))  # noqa: E501
        if 'platform__n' in params:
            query_params.append(('platform__n', params['platform__n']))  # noqa: E501
        if 'mac_address__n' in params:
            query_params.append(('mac_address__n', params['mac_address__n']))  # noqa: E501
        if 'mac_address__ic' in params:
            query_params.append(('mac_address__ic', params['mac_address__ic']))  # noqa: E501
        if 'mac_address__nic' in params:
            query_params.append(('mac_address__nic', params['mac_address__nic']))  # noqa: E501
        if 'mac_address__iew' in params:
            query_params.append(('mac_address__iew', params['mac_address__iew']))  # noqa: E501
        if 'mac_address__niew' in params:
            query_params.append(('mac_address__niew', params['mac_address__niew']))  # noqa: E501
        if 'mac_address__isw' in params:
            query_params.append(('mac_address__isw', params['mac_address__isw']))  # noqa: E501
        if 'mac_address__nisw' in params:
            query_params.append(('mac_address__nisw', params['mac_address__nisw']))  # noqa: E501
        if 'mac_address__ie' in params:
            query_params.append(('mac_address__ie', params['mac_address__ie']))  # noqa: E501
        if 'mac_address__nie' in params:
            query_params.append(('mac_address__nie', params['mac_address__nie']))  # noqa: E501
        if 'tag__n' in params:
            query_params.append(('tag__n', params['tag__n']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_partial_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_virtual_machines_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_virtual_machines_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineWithConfigContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_read(self, id, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_read  # noqa: E501

        Call to super to allow for caching  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_virtual_machines_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineWithConfigContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def virtualization_virtual_machines_update(self, id, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.virtualization_virtual_machines_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.virtualization_virtual_machines_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def virtualization_virtual_machines_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """virtualization_virtual_machines_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.virtualization_virtual_machines_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this virtual machine. (required)
        :param WritableVirtualMachineWithConfigContext data: (required)
        :return: VirtualMachineWithConfigContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtualization_virtual_machines_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `virtualization_virtual_machines_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `virtualization_virtual_machines_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/virtualization/virtual-machines/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineWithConfigContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
