# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WritablePowerPortTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'device_type': 'int',
        'name': 'str',
        'type': 'str',
        'maximum_draw': 'int',
        'allocated_draw': 'int'
    }

    attribute_map = {
        'id': 'id',
        'device_type': 'device_type',
        'name': 'name',
        'type': 'type',
        'maximum_draw': 'maximum_draw',
        'allocated_draw': 'allocated_draw'
    }

    def __init__(self, id=None, device_type=None, name=None, type=None, maximum_draw=None, allocated_draw=None):  # noqa: E501
        """WritablePowerPortTemplate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device_type = None
        self._name = None
        self._type = None
        self._maximum_draw = None
        self._allocated_draw = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.device_type = device_type
        self.name = name
        if type is not None:
            self.type = type
        if maximum_draw is not None:
            self.maximum_draw = maximum_draw
        if allocated_draw is not None:
            self.allocated_draw = allocated_draw

    @property
    def id(self):
        """Gets the id of this WritablePowerPortTemplate.  # noqa: E501


        :return: The id of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePowerPortTemplate.


        :param id: The id of this WritablePowerPortTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device_type(self):
        """Gets the device_type of this WritablePowerPortTemplate.  # noqa: E501


        :return: The device_type of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WritablePowerPortTemplate.


        :param device_type: The device_type of this WritablePowerPortTemplate.  # noqa: E501
        :type: int
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def name(self):
        """Gets the name of this WritablePowerPortTemplate.  # noqa: E501


        :return: The name of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePowerPortTemplate.


        :param name: The name of this WritablePowerPortTemplate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this WritablePowerPortTemplate.  # noqa: E501


        :return: The type of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritablePowerPortTemplate.


        :param type: The type of this WritablePowerPortTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["iec-60320-c6", "iec-60320-c8", "iec-60320-c14", "iec-60320-c16", "iec-60320-c20", "iec-60309-p-n-e-4h", "iec-60309-p-n-e-6h", "iec-60309-p-n-e-9h", "iec-60309-2p-e-4h", "iec-60309-2p-e-6h", "iec-60309-2p-e-9h", "iec-60309-3p-e-4h", "iec-60309-3p-e-6h", "iec-60309-3p-e-9h", "iec-60309-3p-n-e-4h", "iec-60309-3p-n-e-6h", "iec-60309-3p-n-e-9h", "nema-5-15p", "nema-5-20p", "nema-5-30p", "nema-5-50p", "nema-6-15p", "nema-6-20p", "nema-6-30p", "nema-6-50p", "nema-l5-15p", "nema-l5-20p", "nema-l5-30p", "nema-l5-50p", "nema-l6-20p", "nema-l6-30p", "nema-l6-50p", "nema-l14-20p", "nema-l14-30p", "nema-l21-20p", "nema-l21-30p", "cs6361c", "cs6365c", "cs8165c", "cs8265c", "cs8365c", "cs8465c", "ita-e", "ita-f", "ita-ef", "ita-g", "ita-h", "ita-i", "ita-j", "ita-k", "ita-l", "ita-m", "ita-n", "ita-o"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def maximum_draw(self):
        """Gets the maximum_draw of this WritablePowerPortTemplate.  # noqa: E501

        Maximum power draw (watts)  # noqa: E501

        :return: The maximum_draw of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: int
        """
        return self._maximum_draw

    @maximum_draw.setter
    def maximum_draw(self, maximum_draw):
        """Sets the maximum_draw of this WritablePowerPortTemplate.

        Maximum power draw (watts)  # noqa: E501

        :param maximum_draw: The maximum_draw of this WritablePowerPortTemplate.  # noqa: E501
        :type: int
        """
        if maximum_draw is not None and maximum_draw > 32767:  # noqa: E501
            raise ValueError("Invalid value for `maximum_draw`, must be a value less than or equal to `32767`")  # noqa: E501
        if maximum_draw is not None and maximum_draw < 1:  # noqa: E501
            raise ValueError("Invalid value for `maximum_draw`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_draw = maximum_draw

    @property
    def allocated_draw(self):
        """Gets the allocated_draw of this WritablePowerPortTemplate.  # noqa: E501

        Allocated power draw (watts)  # noqa: E501

        :return: The allocated_draw of this WritablePowerPortTemplate.  # noqa: E501
        :rtype: int
        """
        return self._allocated_draw

    @allocated_draw.setter
    def allocated_draw(self, allocated_draw):
        """Sets the allocated_draw of this WritablePowerPortTemplate.

        Allocated power draw (watts)  # noqa: E501

        :param allocated_draw: The allocated_draw of this WritablePowerPortTemplate.  # noqa: E501
        :type: int
        """
        if allocated_draw is not None and allocated_draw > 32767:  # noqa: E501
            raise ValueError("Invalid value for `allocated_draw`, must be a value less than or equal to `32767`")  # noqa: E501
        if allocated_draw is not None and allocated_draw < 1:  # noqa: E501
            raise ValueError("Invalid value for `allocated_draw`, must be a value greater than or equal to `1`")  # noqa: E501

        self._allocated_draw = allocated_draw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritablePowerPortTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritablePowerPortTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
