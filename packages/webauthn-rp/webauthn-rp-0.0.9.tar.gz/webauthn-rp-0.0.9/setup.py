# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['webauthn_rp']

package_data = \
{'': ['*']}

install_requires = \
['cbor2>=5.1.0,<5.2.0', 'cryptography>=2.9.2,<2.10.0', 'pyasn1>=0.4.8,<0.5.0']

setup_kwargs = {
    'name': 'webauthn-rp',
    'version': '0.0.9',
    'description': 'WebAuthn-RP is a Python 3 library to manage credentials that conform to the Web Authentication specification.',
    'long_description': "WebAuthn-RP is a Python 3 library to manage credentials that conform to the \n`Web Authentication specification <https://www.w3.org/TR/webauthn/>`_.\n\nThe following is an overview and some highlights of the library. To see the autogenerated docs and\nthe getting started guide (which covers the Flask example under ``/examples/flask``)\nplease visit the `readthedocs <https://webauthn-rp.readthedocs.io/en/latest/>`_ page.\n\nOverview\n^^^^^^^^\n\nThe aim of this project is to enable Relying Parties to easily use public key credentials\nin Python backend web applications. Support is only for Python 3.x considering that \nPython 2.x reached its end of life in early 2020. This allows for the use of many \nfeatures of Python 3 such as built-in type hinting and static type checking with mypy.\n\nThe general flow diagram for web authentication is shown in the diagrams below (from the spec):\n\n.. figure:: https://raw.githubusercontent.com/enceladus-rex/webauthn-rp/master/docs/source/_static/webauthn-registration-flow-01.svg\n  :width: 750\n  :alt: WebAuthn Registration Flow\n  :align: center\n  \n  WebAuthn Registration Flow (Figure 1 of WebAuthn Standard)\n\nIn the case of registration, the Relying Party server must send a challenge along with\ninformation about the user that is to be registered and the specific Relying Party to\nwhich that user is associated. This library is meant to aid in the generation of messages\nused in step 1 and the validation performed in step 6. Steps 0 and 5 are typically\nhandled by an application-specific client library while the routing and parsing operations\nof steps 1 and 6 will need to be managed by the application-specific backend although\nsome utilities are provided. Steps 2, 3, and 4, however, are completely managed by the\nbrowser and authenticator and are not part of this library. In fact, they are\nmostly covered by a different specification (the Client To Authenticator Protocol, or CTAP).\n\n\n.. figure:: https://raw.githubusercontent.com/enceladus-rex/webauthn-rp/master/docs/source/_static/webauthn-authentication-flow-01.svg\n  :width: 750\n  :alt: WebAuthn Authentication Flow\n  :align: center\n  \n  WebAuthn Authentication Flow (Figure 2 of WebAuthn Standard)\n\nAuthentication is very much like registration, however some of the message formats are\ndifferent and consequently the parsing and validation operations as well. The steps\nand how they are handled mirror those of the registration flow.\n\nThe WebAuthn specification is designed for modern browsers and so most of the data\ntypes and functions have JavaScript and JSON in mind. Although all of the necessary\ndata types are provided as Python objects in the ``types`` module, these objects need\nto be convertable into JSON for use in the browser. The ``jsonify`` function provided \nin the ``converters`` module does this for all available data types and\nallows one to work directly with typed Python objects. There is also a ``parsers`` module that provides functions\nthat can take JSON objects of specific types of data and parse them into their \nPython object counterparts. Note that given JSON cannot represent raw bytes\ndirectly, bytes are base64 encoded when converted into JSON and base64 decoded\nwhen being parsed from JSON. This becomes important when passing data\nto the browser API functions described below because there, JavaScript ArrayBuffers\nare expected in place of base64 encoded strings.\n\nBoth the registration and authentication ceremonies have corresponding API functions\navailable in the browser as part of the ``Navigator`` interface. The available\nfunctions are ``navigator.credentials.create()`` and ``navigator.credentials.get()`` \nrespectively. These functions take a single options argument which corresponds to \nthe data types ``CredentialCreationOptions`` and ``CredentialRequestOptions`` \nrespectively. These data types have a number of configurable options that may \nneed to be set using nested objects. To simply their construction there are\nbuilder classes available which can also provide a way to encapsulate\nshared options across different users (see the ``builders`` module).\n\nAll of this is summarized in the following two tables which describe\nsome of the different functions and types that'll need to be considered\nwhen performing user registration and user authentication.\n\n.. table:: **User Registration Ceremony**\n    :align: center\n\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn Browser API Function*            | navigator.credentials.create()                        |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options Python Data Type*     | webauthn_rp.types.CredentialCreationOptions           |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options Builder*              | webauthn_rp.builders.CredentialCreationOptionsBuilder |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options JSON Converter*       | webauthn_rp.converters.jsonify                        |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Public Key Credential Parser* | webauthn_rp.parsers.parse_public_key_credential       |\n    +--------------------------------------------+-------------------------------------------------------+\n\n.. table:: **User Authentication Ceremony**\n    :align: center\n\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn Browser API Function*            | navigator.credentials.get()                           |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options Python Data Type*     | webauthn_rp.types.CredentialRequestOptions            |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options Builder*              | webauthn_rp.builders.CredentialRequestOptionsBuilder  |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Options JSON Converter*       | webauthn_rp.converters.jsonify                        |\n    +--------------------------------------------+-------------------------------------------------------+\n    | *WebAuthn-RP Public Key Credential Parser* | webauthn_rp.parsers.parse_public_key_credential       |\n    +--------------------------------------------+-------------------------------------------------------+\n\nNote that ``parse_public_key_credential`` takes a ``Dict`` type corresponding to\na JSON-encoded version of the public key credential JavaScript object returned by the \nWebAuthn browser function. Data that was originally bytes is expected to have been \nencoded using standard base64. Please see the Flask example ``app.html`` file to\nsee how this conversion is done in JavaScript.\n\n\nExamples\n^^^^^^^^\n\nAs mentioned, the `readthedocs <https://webauthn-rp.readthedocs.io/en/latest/>`_ page has\na getting started guide that goes into depth with the Flask example, however, if you want\nto be able to directly run the example from this GitHub repository follow these steps\nafter cloning this project locally:\n\n1. Make sure you have a version of Python >= 3.6.1.\n2. Install poetry by following the `guide <https://python-poetry.org/docs/#installation>`_.\n3. Open a poetry shell and install the dependencies from the project root using::\n    \n    $ poetry shell\n    $ poetry install\n\n4. Run the Flask example from the root using::\n    \n    $ python -m examples.flask.app\n\n5. Open a browser to ``localhost:5000`` and register a credential to a username.\n6. Authenticate using the same username and credential.\n7. Remove the temporary database ``/tmp/webauthn_rp.db``.\n\n\nReferences\n^^^^^^^^^^\n* `WebAuthn Standard <https://www.w3.org/TR/webauthn/>`_\n* `WebAuthn Browser API <https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API>`_\n* `Navigator Interface <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>`_\n",
    'author': 'enceladus-rex',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/enceladus-rex/webauthn-rp',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
