# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cm_client
from cm_client.rest import ApiException
from cm_client.apis.clusters_resource_api import ClustersResourceApi


class TestClustersResourceApi(unittest.TestCase):
    """ ClustersResourceApi unit test stubs """

    def setUp(self):
        self.api = cm_client.apis.clusters_resource_api.ClustersResourceApi()

    def tearDown(self):
        pass

    def test_add_hosts(self):
        """
        Test case for add_hosts

        
        """
        pass

    def test_add_tags(self):
        """
        Test case for add_tags

        Attach tags to the cluster.
        """
        pass

    def test_auto_assign_roles(self):
        """
        Test case for auto_assign_roles

        Automatically assign roles to hosts and create the roles for all the services in a cluster.
        """
        pass

    def test_auto_configure(self):
        """
        Test case for auto_configure

        Automatically configures roles and services in a cluster.
        """
        pass

    def test_configure_auto_tls_services_command(self):
        """
        Test case for configure_auto_tls_services_command

        Configures all services in a cluster to use Auto-TLS.
        """
        pass

    def test_configure_for_kerberos(self):
        """
        Test case for configure_for_kerberos

        Command to configure the cluster to use Kerberos for authentication.
        """
        pass

    def test_create_clusters(self):
        """
        Test case for create_clusters

        Creates a collection of clusters.
        """
        pass

    def test_delete_cluster(self):
        """
        Test case for delete_cluster

        Deletes a cluster.
        """
        pass

    def test_delete_cluster_credentials_command(self):
        """
        Test case for delete_cluster_credentials_command

        Delete existing Kerberos credentials for the cluster.
        """
        pass

    def test_delete_tags(self):
        """
        Test case for delete_tags

        Remove the tags associated with the cluster.
        """
        pass

    def test_deploy_client_config(self):
        """
        Test case for deploy_client_config

        Deploy the cluster-wide client configuration.
        """
        pass

    def test_deploy_client_configs_and_refresh(self):
        """
        Test case for deploy_client_configs_and_refresh

        Performs a command with the 2 steps - deploy cc - cluster refresh  This orchestration is needed for the staleness wizard, so it can invoke a single command at wizard finish.
        """
        pass

    def test_deploy_cluster_client_config(self):
        """
        Test case for deploy_cluster_client_config

        Deploy the Cluster's Kerberos client configuration.
        """
        pass

    def test_disable_tls(self):
        """
        Test case for disable_tls

        Disables TLS settings on a cluster.
        """
        pass

    def test_enter_maintenance_mode(self):
        """
        Test case for enter_maintenance_mode

        Put the cluster into maintenance mode.
        """
        pass

    def test_exit_maintenance_mode(self):
        """
        Test case for exit_maintenance_mode

        Take the cluster out of maintenance mode.
        """
        pass

    def test_expire_logs(self):
        """
        Test case for expire_logs

        Remove backup and disaster related log files in hdfs.
        """
        pass

    def test_export(self):
        """
        Test case for export

        Export the cluster template for the given cluster.
        """
        pass

    def test_first_run(self):
        """
        Test case for first_run

        Prepare and start services in a cluster.
        """
        pass

    def test_get_client_config(self):
        """
        Test case for get_client_config

        Download a zip-compressed archive of the client configuration, of a specific cluster.
        """
        pass

    def test_get_kerberos_info(self):
        """
        Test case for get_kerberos_info

        Provides Cluster Kerberos information.
        """
        pass

    def test_get_utilization_report(self):
        """
        Test case for get_utilization_report

        Provides the resource utilization of the entire cluster as well as the resource utilization per tenant.
        """
        pass

    def test_inspect_hosts_command(self):
        """
        Test case for inspect_hosts_command

        Runs the host inspector on the configured hosts in the specified cluster.
        """
        pass

    def test_is_tls_enabled(self):
        """
        Test case for is_tls_enabled

        Returns whether a cluster has any TLS settings enabled.
        """
        pass

    def test_list_active_commands(self):
        """
        Test case for list_active_commands

        List active cluster commands.
        """
        pass

    def test_list_dfs_services(self):
        """
        Test case for list_dfs_services

        List the services that can provide distributed file system (DFS) capabilities in this cluster.
        """
        pass

    def test_list_hosts(self):
        """
        Test case for list_hosts

        Returns the hosts associated with the cluster filtered by optional host configuration parameter, if specified.
        """
        pass

    def test_list_service_types(self):
        """
        Test case for list_service_types

        List the supported service types for a cluster.
        """
        pass

    def test_list_upgrade_domains(self):
        """
        Test case for list_upgrade_domains

        Returns the Upgrade Domains associated with the cluster and the host names that belong to each Upgrade Domain.
        """
        pass

    def test_perf_inspector_command(self):
        """
        Test case for perf_inspector_command

        Run cluster performance diagnostics test.
        """
        pass

    def test_pools_refresh(self):
        """
        Test case for pools_refresh

        Updates all refreshable configuration files for services with Dynamic Resource Pools.
        """
        pass

    def test_pre_upgrade_check_command(self):
        """
        Test case for pre_upgrade_check_command

        Run cluster pre-upgrade check(s) when upgrading from specified version of CDH to the other.
        """
        pass

    def test_read_cluster(self):
        """
        Test case for read_cluster

        Reads information about a cluster.
        """
        pass

    def test_read_clusters(self):
        """
        Test case for read_clusters

        List all known clusters.
        """
        pass

    def test_read_tags(self):
        """
        Test case for read_tags

        Returns the tags associated with this cluster.
        """
        pass

    def test_refresh(self):
        """
        Test case for refresh

        Updates all refreshable configuration files in the cluster.
        """
        pass

    def test_remove_all_hosts(self):
        """
        Test case for remove_all_hosts

        
        """
        pass

    def test_remove_host(self):
        """
        Test case for remove_host

        
        """
        pass

    def test_restart_command(self):
        """
        Test case for restart_command

        Restart all services in the cluster.
        """
        pass

    def test_rolling_restart(self):
        """
        Test case for rolling_restart

        Command to do a \"best-effort\" rolling restart of the given cluster, i.
        """
        pass

    def test_rolling_upgrade(self):
        """
        Test case for rolling_upgrade

        Command to do a rolling upgrade of specific services in the given cluster  This command does not handle any services that don't support rolling upgrades.
        """
        pass

    def test_start_command(self):
        """
        Test case for start_command

        Start all services in the cluster.
        """
        pass

    def test_stop_command(self):
        """
        Test case for stop_command

        Stop all services in the cluster.
        """
        pass

    def test_update_cluster(self):
        """
        Test case for update_cluster

        Update an existing cluster.
        """
        pass

    def test_upgrade_cdh_command(self):
        """
        Test case for upgrade_cdh_command

        Perform CDH upgrade to the specified version.
        """
        pass

    def test_upgrade_services_command(self):
        """
        Test case for upgrade_services_command

        Upgrades the services in the cluster to the CDH5 version.
        """
        pass


if __name__ == '__main__':
    unittest.main()
