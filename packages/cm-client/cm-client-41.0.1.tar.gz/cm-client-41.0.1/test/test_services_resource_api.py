# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cm_client
from cm_client.rest import ApiException
from cm_client.apis.services_resource_api import ServicesResourceApi


class TestServicesResourceApi(unittest.TestCase):
    """ ServicesResourceApi unit test stubs """

    def setUp(self):
        self.api = cm_client.apis.services_resource_api.ServicesResourceApi()

    def tearDown(self):
        pass

    def test_add_tags(self):
        """
        Test case for add_tags

        Attach tags to the service.
        """
        pass

    def test_collect_yarn_application_diagnostics(self):
        """
        Test case for collect_yarn_application_diagnostics

        Collect the Diagnostics data for Yarn applications.
        """
        pass

    def test_create_beeswax_warehouse_command(self):
        """
        Test case for create_beeswax_warehouse_command

        Create the Beeswax role's Hive warehouse directory, on Hue services.
        """
        pass

    def test_create_h_base_root_command(self):
        """
        Test case for create_h_base_root_command

        Creates the root directory of an HBase service.
        """
        pass

    def test_create_hive_user_dir_command(self):
        """
        Test case for create_hive_user_dir_command

        Create the Hive user directory.
        """
        pass

    def test_create_hive_warehouse_command(self):
        """
        Test case for create_hive_warehouse_command

        Create the Hive warehouse directory, on Hive services.
        """
        pass

    def test_create_impala_user_dir_command(self):
        """
        Test case for create_impala_user_dir_command

        Create the Impala user directory.
        """
        pass

    def test_create_oozie_db(self):
        """
        Test case for create_oozie_db

        Creates the Oozie Database Schema in the configured database.
        """
        pass

    def test_create_services(self):
        """
        Test case for create_services

        Creates a list of services.
        """
        pass

    def test_create_solr_hdfs_home_dir_command(self):
        """
        Test case for create_solr_hdfs_home_dir_command

        Creates the home directory of a Solr service in HDFS.
        """
        pass

    def test_create_sqoop_user_dir_command(self):
        """
        Test case for create_sqoop_user_dir_command

        Creates the user directory of a Sqoop service in HDFS.
        """
        pass

    def test_create_yarn_cm_container_usage_input_dir_command(self):
        """
        Test case for create_yarn_cm_container_usage_input_dir_command

        Creates the HDFS directory where YARN container usage metrics are stored by NodeManagers for CM to read and aggregate into app usage metrics.
        """
        pass

    def test_create_yarn_job_history_dir_command(self):
        """
        Test case for create_yarn_job_history_dir_command

        Create the Yarn job history directory.
        """
        pass

    def test_create_yarn_node_manager_remote_app_log_dir_command(self):
        """
        Test case for create_yarn_node_manager_remote_app_log_dir_command

        Create the Yarn NodeManager remote application log directory.
        """
        pass

    def test_decommission_command(self):
        """
        Test case for decommission_command

        Decommission roles of a service.
        """
        pass

    def test_delete_service(self):
        """
        Test case for delete_service

        Deletes a service from the system.
        """
        pass

    def test_delete_tags(self):
        """
        Test case for delete_tags

        Remove the tags associated with the service.
        """
        pass

    def test_deploy_client_config_command(self):
        """
        Test case for deploy_client_config_command

        Deploy a service's client configuration.
        """
        pass

    def test_disable_jt_ha_command(self):
        """
        Test case for disable_jt_ha_command

        Disable high availability (HA) for JobTracker.
        """
        pass

    def test_disable_llama_ha_command(self):
        """
        Test case for disable_llama_ha_command

        Not Supported.
        """
        pass

    def test_disable_llama_rm_command(self):
        """
        Test case for disable_llama_rm_command

        Not Supported.
        """
        pass

    def test_disable_oozie_ha_command(self):
        """
        Test case for disable_oozie_ha_command

        Disable high availability (HA) for Oozie.
        """
        pass

    def test_disable_rm_ha_command(self):
        """
        Test case for disable_rm_ha_command

        Disable high availability (HA) for ResourceManager.
        """
        pass

    def test_disable_sentry_ha_command(self):
        """
        Test case for disable_sentry_ha_command

        Disable high availability (HA) for Sentry service.
        """
        pass

    def test_enable_jt_ha_command(self):
        """
        Test case for enable_jt_ha_command

        Enable high availability (HA) for a JobTracker.
        """
        pass

    def test_enable_llama_ha_command(self):
        """
        Test case for enable_llama_ha_command

        Not Supported.
        """
        pass

    def test_enable_llama_rm_command(self):
        """
        Test case for enable_llama_rm_command

        Not Supported.
        """
        pass

    def test_enable_oozie_ha_command(self):
        """
        Test case for enable_oozie_ha_command

        Enable high availability (HA) for Oozie service.
        """
        pass

    def test_enable_rm_ha_command(self):
        """
        Test case for enable_rm_ha_command

        Enable high availability (HA) for a YARN ResourceManager.
        """
        pass

    def test_enable_sentry_ha_command(self):
        """
        Test case for enable_sentry_ha_command

        Enable high availability (HA) for Sentry service.
        """
        pass

    def test_enter_maintenance_mode(self):
        """
        Test case for enter_maintenance_mode

        Put the service into maintenance mode.
        """
        pass

    def test_exit_maintenance_mode(self):
        """
        Test case for exit_maintenance_mode

        Take the service out of maintenance mode.
        """
        pass

    def test_first_run(self):
        """
        Test case for first_run

        Prepare and start a service.
        """
        pass

    def test_get_client_config(self):
        """
        Test case for get_client_config

        Download a zip-compressed archive of the client configuration, of a specific service.
        """
        pass

    def test_get_hdfs_usage_report(self):
        """
        Test case for get_hdfs_usage_report

        Fetch the HDFS usage report.
        """
        pass

    def test_get_impala_utilization(self):
        """
        Test case for get_impala_utilization

        Provides the resource utilization of the Impala service as well as the resource utilization per tenant.
        """
        pass

    def test_get_metrics(self):
        """
        Test case for get_metrics

        Fetch metric readings for a particular service.
        """
        pass

    def test_get_mr_usage_report(self):
        """
        Test case for get_mr_usage_report

        Fetch the MR usage report.
        """
        pass

    def test_get_yarn_utilization(self):
        """
        Test case for get_yarn_utilization

        Provides the resource utilization of the yarn service as well as the resource utilization per tenant.
        """
        pass

    def test_hbase_shell_command(self):
        """
        Test case for hbase_shell_command

        Execute a hbase shell command.
        """
        pass

    def test_hbase_upgrade_command(self):
        """
        Test case for hbase_upgrade_command

        Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from CDH4 to CDH5.
        """
        pass

    def test_hdfs_create_tmp_dir(self):
        """
        Test case for hdfs_create_tmp_dir

        Creates a tmp directory on the HDFS filesystem.
        """
        pass

    def test_hdfs_disable_auto_failover_command(self):
        """
        Test case for hdfs_disable_auto_failover_command

        Disable auto-failover for a highly available HDFS nameservice.
        """
        pass

    def test_hdfs_disable_ha_command(self):
        """
        Test case for hdfs_disable_ha_command

        Disable high availability (HA) for an HDFS NameNode.
        """
        pass

    def test_hdfs_disable_nn_ha_command(self):
        """
        Test case for hdfs_disable_nn_ha_command

        Disable High Availability (HA) with Automatic Failover for an HDFS NameNode.
        """
        pass

    def test_hdfs_enable_auto_failover_command(self):
        """
        Test case for hdfs_enable_auto_failover_command

        Enable auto-failover for an HDFS nameservice.
        """
        pass

    def test_hdfs_enable_ha_command(self):
        """
        Test case for hdfs_enable_ha_command

        Enable high availability (HA) for an HDFS NameNode.
        """
        pass

    def test_hdfs_enable_nn_ha_command(self):
        """
        Test case for hdfs_enable_nn_ha_command

        Enable High Availability (HA) with Automatic Failover for an HDFS NameNode.
        """
        pass

    def test_hdfs_failover_command(self):
        """
        Test case for hdfs_failover_command

        Initiate a failover in an HDFS HA NameNode pair.
        """
        pass

    def test_hdfs_finalize_rolling_upgrade(self):
        """
        Test case for hdfs_finalize_rolling_upgrade

        Finalizes the rolling upgrade for HDFS by updating the NameNode metadata permanently to the next version.
        """
        pass

    def test_hdfs_roll_edits_command(self):
        """
        Test case for hdfs_roll_edits_command

        Roll the edits of an HDFS NameNode or Nameservice.
        """
        pass

    def test_hdfs_upgrade_metadata_command(self):
        """
        Test case for hdfs_upgrade_metadata_command

        Upgrade HDFS Metadata as part of a major version upgrade.
        """
        pass

    def test_hive_create_metastore_database_command(self):
        """
        Test case for hive_create_metastore_database_command

        Create the Hive Metastore Database.
        """
        pass

    def test_hive_create_metastore_database_tables_command(self):
        """
        Test case for hive_create_metastore_database_tables_command

        Create the Hive Metastore Database tables.
        """
        pass

    def test_hive_update_metastore_namenodes_command(self):
        """
        Test case for hive_update_metastore_namenodes_command

        Update Hive Metastore to point to a NameNode's Nameservice name instead of hostname.
        """
        pass

    def test_hive_upgrade_metastore_command(self):
        """
        Test case for hive_upgrade_metastore_command

        Upgrade Hive Metastore as part of a major version upgrade.
        """
        pass

    def test_hive_validate_metastore_schema_command(self):
        """
        Test case for hive_validate_metastore_schema_command

        Validate the Hive Metastore Schema.
        """
        pass

    def test_hue_dump_db_command(self):
        """
        Test case for hue_dump_db_command

        Runs Hue's dumpdata command.
        """
        pass

    def test_hue_load_db_command(self):
        """
        Test case for hue_load_db_command

        Runs Hue's loaddata command.
        """
        pass

    def test_hue_sync_db_command(self):
        """
        Test case for hue_sync_db_command

        Runs Hue's syncdb command.
        """
        pass

    def test_impala_create_catalog_database_command(self):
        """
        Test case for impala_create_catalog_database_command

        .
        """
        pass

    def test_impala_create_catalog_database_tables_command(self):
        """
        Test case for impala_create_catalog_database_tables_command

        .
        """
        pass

    def test_import_mr_configs_into_yarn(self):
        """
        Test case for import_mr_configs_into_yarn

        Import MapReduce configuration into Yarn, overwriting Yarn configuration.
        """
        pass

    def test_init_solr_command(self):
        """
        Test case for init_solr_command

        Initializes the Solr service in Zookeeper.
        """
        pass

    def test_install_mr_framework_jars(self):
        """
        Test case for install_mr_framework_jars

        Creates an HDFS directory to hold the MapReduce2 framework JARs (if necessary), and uploads the framework JARs to it.
        """
        pass

    def test_install_oozie_share_lib(self):
        """
        Test case for install_oozie_share_lib

        Creates directory for Oozie user in HDFS and installs the ShareLib in it.
        """
        pass

    def test_ks_migrate_to_sentry(self):
        """
        Test case for ks_migrate_to_sentry

        Migrates the HBase Indexer policy-based permissions to Sentry, by invoking the SentryConfigToolIndexer.
        """
        pass

    def test_list_active_commands(self):
        """
        Test case for list_active_commands

        List active service commands.
        """
        pass

    def test_list_role_types(self):
        """
        Test case for list_role_types

        List the supported role types for a service.
        """
        pass

    def test_list_service_commands(self):
        """
        Test case for list_service_commands

        Lists all the commands that can be executed by name on the provided service.
        """
        pass

    def test_offline_command(self):
        """
        Test case for offline_command

        Offline roles of a service.
        """
        pass

    def test_oozie_create_embedded_database_command(self):
        """
        Test case for oozie_create_embedded_database_command

        Create the Oozie Server Database.
        """
        pass

    def test_oozie_dump_database_command(self):
        """
        Test case for oozie_dump_database_command

        Dump the Oozie Server Database.
        """
        pass

    def test_oozie_load_database_command(self):
        """
        Test case for oozie_load_database_command

        Load the Oozie Server Database from dump.
        """
        pass

    def test_oozie_upgrade_db_command(self):
        """
        Test case for oozie_upgrade_db_command

        Upgrade Oozie Database schema as part of a major version upgrade.
        """
        pass

    def test_read_service(self):
        """
        Test case for read_service

        Retrieves details information about a service.
        """
        pass

    def test_read_service_config(self):
        """
        Test case for read_service_config

        Retrieves the configuration of a specific service.
        """
        pass

    def test_read_services(self):
        """
        Test case for read_services

        Lists all services registered in the cluster.
        """
        pass

    def test_read_tags(self):
        """
        Test case for read_tags

        Returns the tags associated with this service.
        """
        pass

    def test_recommission_command(self):
        """
        Test case for recommission_command

        Recommission roles of a service.
        """
        pass

    def test_recommission_with_start_command(self):
        """
        Test case for recommission_with_start_command

        Start and recommission roles of a service.
        """
        pass

    def test_restart_command(self):
        """
        Test case for restart_command

        Restart the service.
        """
        pass

    def test_rolling_restart(self):
        """
        Test case for rolling_restart

        Command to run rolling restart of roles in a service.
        """
        pass

    def test_sentry_create_database_command(self):
        """
        Test case for sentry_create_database_command

        Create the Sentry Server Database.
        """
        pass

    def test_sentry_create_database_tables_command(self):
        """
        Test case for sentry_create_database_tables_command

        Create the Sentry Server Database tables.
        """
        pass

    def test_sentry_upgrade_database_tables_command(self):
        """
        Test case for sentry_upgrade_database_tables_command

        Upgrade the Sentry Server Database tables.
        """
        pass

    def test_service_command_by_name(self):
        """
        Test case for service_command_by_name

        Executes a command on the service specified by name.
        """
        pass

    def test_solr_bootstrap_collections_command(self):
        """
        Test case for solr_bootstrap_collections_command

        Bootstraps Solr Collections after the CDH upgrade.
        """
        pass

    def test_solr_bootstrap_config_command(self):
        """
        Test case for solr_bootstrap_config_command

        Bootstraps Solr config during the CDH upgrade.
        """
        pass

    def test_solr_config_backup_command(self):
        """
        Test case for solr_config_backup_command

        Backs up Solr configuration metadata before CDH upgrade.
        """
        pass

    def test_solr_migrate_sentry_privileges_command(self):
        """
        Test case for solr_migrate_sentry_privileges_command

        Migrates Sentry privileges to new model compatible to support more granular permissions if Solr is configured with a Sentry service.
        """
        pass

    def test_solr_reinitialize_state_for_upgrade_command(self):
        """
        Test case for solr_reinitialize_state_for_upgrade_command

        Reinitializes the Solr state by clearing the Solr HDFS data directory, the Solr data directory, and the Zookeeper state.
        """
        pass

    def test_solr_validate_metadata_command(self):
        """
        Test case for solr_validate_metadata_command

        Validates Solr metadata and configurations.
        """
        pass

    def test_sqoop_create_database_tables_command(self):
        """
        Test case for sqoop_create_database_tables_command

        Create the Sqoop2 Server Database tables.
        """
        pass

    def test_sqoop_upgrade_db_command(self):
        """
        Test case for sqoop_upgrade_db_command

        Upgrade Sqoop Database schema as part of a major version upgrade.
        """
        pass

    def test_start_command(self):
        """
        Test case for start_command

        Start the service.
        """
        pass

    def test_stop_command(self):
        """
        Test case for stop_command

        Stop the service.
        """
        pass

    def test_switch_to_mr2(self):
        """
        Test case for switch_to_mr2

        Change the cluster to use MR2 instead of MR1.
        """
        pass

    def test_update_service(self):
        """
        Test case for update_service

        Updates service information.
        """
        pass

    def test_update_service_config(self):
        """
        Test case for update_service_config

        Updates the service configuration with the given values.
        """
        pass

    def test_yarn_format_state_store(self):
        """
        Test case for yarn_format_state_store

        Formats the state store in ZooKeeper used for Resource Manager High Availability.
        """
        pass

    def test_zoo_keeper_cleanup_command(self):
        """
        Test case for zoo_keeper_cleanup_command

        Clean up all running server instances of a ZooKeeper service.
        """
        pass

    def test_zoo_keeper_init_command(self):
        """
        Test case for zoo_keeper_init_command

        Initializes all the server instances of a ZooKeeper service.
        """
        pass


if __name__ == '__main__':
    unittest.main()
