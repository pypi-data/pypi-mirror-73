# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiParcelUsageHost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_ref': 'ApiHostRef',
        'roles': 'list[ApiParcelUsageRole]'
    }

    attribute_map = {
        'host_ref': 'hostRef',
        'roles': 'roles'
    }

    def __init__(self, host_ref=None, roles=None):
        """
        ApiParcelUsageHost - a model defined in Swagger
        """

        self._host_ref = None
        self._roles = None

        if host_ref is not None:
          self.host_ref = host_ref
        if roles is not None:
          self.roles = roles

    @property
    def host_ref(self):
        """
        Gets the host_ref of this ApiParcelUsageHost.
        A reference to the corresponding Host object.

        :return: The host_ref of this ApiParcelUsageHost.
        :rtype: ApiHostRef
        """
        return self._host_ref

    @host_ref.setter
    def host_ref(self, host_ref):
        """
        Sets the host_ref of this ApiParcelUsageHost.
        A reference to the corresponding Host object.

        :param host_ref: The host_ref of this ApiParcelUsageHost.
        :type: ApiHostRef
        """

        self._host_ref = host_ref

    @property
    def roles(self):
        """
        Gets the roles of this ApiParcelUsageHost.
        A collection of the roles present on the host.

        :return: The roles of this ApiParcelUsageHost.
        :rtype: list[ApiParcelUsageRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this ApiParcelUsageHost.
        A collection of the roles present on the host.

        :param roles: The roles of this ApiParcelUsageHost.
        :type: list[ApiParcelUsageRole]
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiParcelUsageHost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
