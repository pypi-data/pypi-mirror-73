# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiDataContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'nameservice': 'str',
        'created_time': 'str',
        'last_modified_time': 'str',
        'services': 'list[ApiServiceRef]',
        'services_details': 'list[ApiService]',
        'supported_service_types': 'list[str]',
        'allowed_cluster_versions': 'list[ApiMapEntry]',
        'config_staleness_status': 'ApiConfigStalenessStatus',
        'client_config_staleness_status': 'ApiConfigStalenessStatus',
        'health_summary': 'ApiHealthSummary'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'nameservice': 'nameservice',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'services': 'services',
        'services_details': 'servicesDetails',
        'supported_service_types': 'supportedServiceTypes',
        'allowed_cluster_versions': 'allowedClusterVersions',
        'config_staleness_status': 'configStalenessStatus',
        'client_config_staleness_status': 'clientConfigStalenessStatus',
        'health_summary': 'healthSummary'
    }

    def __init__(self, name=None, display_name=None, nameservice=None, created_time=None, last_modified_time=None, services=None, services_details=None, supported_service_types=None, allowed_cluster_versions=None, config_staleness_status=None, client_config_staleness_status=None, health_summary=None):
        """
        ApiDataContext - a model defined in Swagger
        """

        self._name = None
        self._display_name = None
        self._nameservice = None
        self._created_time = None
        self._last_modified_time = None
        self._services = None
        self._services_details = None
        self._supported_service_types = None
        self._allowed_cluster_versions = None
        self._config_staleness_status = None
        self._client_config_staleness_status = None
        self._health_summary = None

        if name is not None:
          self.name = name
        if display_name is not None:
          self.display_name = display_name
        if nameservice is not None:
          self.nameservice = nameservice
        if created_time is not None:
          self.created_time = created_time
        if last_modified_time is not None:
          self.last_modified_time = last_modified_time
        if services is not None:
          self.services = services
        if services_details is not None:
          self.services_details = services_details
        if supported_service_types is not None:
          self.supported_service_types = supported_service_types
        if allowed_cluster_versions is not None:
          self.allowed_cluster_versions = allowed_cluster_versions
        if config_staleness_status is not None:
          self.config_staleness_status = config_staleness_status
        if client_config_staleness_status is not None:
          self.client_config_staleness_status = client_config_staleness_status
        if health_summary is not None:
          self.health_summary = health_summary

    @property
    def name(self):
        """
        Gets the name of this ApiDataContext.
        

        :return: The name of this ApiDataContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiDataContext.
        

        :param name: The name of this ApiDataContext.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this ApiDataContext.
        

        :return: The display_name of this ApiDataContext.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ApiDataContext.
        

        :param display_name: The display_name of this ApiDataContext.
        :type: str
        """

        self._display_name = display_name

    @property
    def nameservice(self):
        """
        Gets the nameservice of this ApiDataContext.
        

        :return: The nameservice of this ApiDataContext.
        :rtype: str
        """
        return self._nameservice

    @nameservice.setter
    def nameservice(self, nameservice):
        """
        Sets the nameservice of this ApiDataContext.
        

        :param nameservice: The nameservice of this ApiDataContext.
        :type: str
        """

        self._nameservice = nameservice

    @property
    def created_time(self):
        """
        Gets the created_time of this ApiDataContext.
        

        :return: The created_time of this ApiDataContext.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this ApiDataContext.
        

        :param created_time: The created_time of this ApiDataContext.
        :type: str
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """
        Gets the last_modified_time of this ApiDataContext.
        

        :return: The last_modified_time of this ApiDataContext.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """
        Sets the last_modified_time of this ApiDataContext.
        

        :param last_modified_time: The last_modified_time of this ApiDataContext.
        :type: str
        """

        self._last_modified_time = last_modified_time

    @property
    def services(self):
        """
        Gets the services of this ApiDataContext.
        

        :return: The services of this ApiDataContext.
        :rtype: list[ApiServiceRef]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this ApiDataContext.
        

        :param services: The services of this ApiDataContext.
        :type: list[ApiServiceRef]
        """

        self._services = services

    @property
    def services_details(self):
        """
        Gets the services_details of this ApiDataContext.
        

        :return: The services_details of this ApiDataContext.
        :rtype: list[ApiService]
        """
        return self._services_details

    @services_details.setter
    def services_details(self, services_details):
        """
        Sets the services_details of this ApiDataContext.
        

        :param services_details: The services_details of this ApiDataContext.
        :type: list[ApiService]
        """

        self._services_details = services_details

    @property
    def supported_service_types(self):
        """
        Gets the supported_service_types of this ApiDataContext.
        

        :return: The supported_service_types of this ApiDataContext.
        :rtype: list[str]
        """
        return self._supported_service_types

    @supported_service_types.setter
    def supported_service_types(self, supported_service_types):
        """
        Sets the supported_service_types of this ApiDataContext.
        

        :param supported_service_types: The supported_service_types of this ApiDataContext.
        :type: list[str]
        """

        self._supported_service_types = supported_service_types

    @property
    def allowed_cluster_versions(self):
        """
        Gets the allowed_cluster_versions of this ApiDataContext.
        

        :return: The allowed_cluster_versions of this ApiDataContext.
        :rtype: list[ApiMapEntry]
        """
        return self._allowed_cluster_versions

    @allowed_cluster_versions.setter
    def allowed_cluster_versions(self, allowed_cluster_versions):
        """
        Sets the allowed_cluster_versions of this ApiDataContext.
        

        :param allowed_cluster_versions: The allowed_cluster_versions of this ApiDataContext.
        :type: list[ApiMapEntry]
        """

        self._allowed_cluster_versions = allowed_cluster_versions

    @property
    def config_staleness_status(self):
        """
        Gets the config_staleness_status of this ApiDataContext.
        

        :return: The config_staleness_status of this ApiDataContext.
        :rtype: ApiConfigStalenessStatus
        """
        return self._config_staleness_status

    @config_staleness_status.setter
    def config_staleness_status(self, config_staleness_status):
        """
        Sets the config_staleness_status of this ApiDataContext.
        

        :param config_staleness_status: The config_staleness_status of this ApiDataContext.
        :type: ApiConfigStalenessStatus
        """

        self._config_staleness_status = config_staleness_status

    @property
    def client_config_staleness_status(self):
        """
        Gets the client_config_staleness_status of this ApiDataContext.
        

        :return: The client_config_staleness_status of this ApiDataContext.
        :rtype: ApiConfigStalenessStatus
        """
        return self._client_config_staleness_status

    @client_config_staleness_status.setter
    def client_config_staleness_status(self, client_config_staleness_status):
        """
        Sets the client_config_staleness_status of this ApiDataContext.
        

        :param client_config_staleness_status: The client_config_staleness_status of this ApiDataContext.
        :type: ApiConfigStalenessStatus
        """

        self._client_config_staleness_status = client_config_staleness_status

    @property
    def health_summary(self):
        """
        Gets the health_summary of this ApiDataContext.
        

        :return: The health_summary of this ApiDataContext.
        :rtype: ApiHealthSummary
        """
        return self._health_summary

    @health_summary.setter
    def health_summary(self, health_summary):
        """
        Sets the health_summary of this ApiDataContext.
        

        :param health_summary: The health_summary of this ApiDataContext.
        :type: ApiHealthSummary
        """

        self._health_summary = health_summary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiDataContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
