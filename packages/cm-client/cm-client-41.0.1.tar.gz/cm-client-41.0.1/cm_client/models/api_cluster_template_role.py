# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiClusterTemplateRole(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref_name': 'str',
        'role_type': 'str'
    }

    attribute_map = {
        'ref_name': 'refName',
        'role_type': 'roleType'
    }

    def __init__(self, ref_name=None, role_type=None):
        """
        ApiClusterTemplateRole - a model defined in Swagger
        """

        self._ref_name = None
        self._role_type = None

        if ref_name is not None:
          self.ref_name = ref_name
        if role_type is not None:
          self.role_type = role_type

    @property
    def ref_name(self):
        """
        Gets the ref_name of this ApiClusterTemplateRole.
        Role reference name

        :return: The ref_name of this ApiClusterTemplateRole.
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """
        Sets the ref_name of this ApiClusterTemplateRole.
        Role reference name

        :param ref_name: The ref_name of this ApiClusterTemplateRole.
        :type: str
        """

        self._ref_name = ref_name

    @property
    def role_type(self):
        """
        Gets the role_type of this ApiClusterTemplateRole.
        Role type

        :return: The role_type of this ApiClusterTemplateRole.
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """
        Sets the role_type of this ApiClusterTemplateRole.
        Role type

        :param role_type: The role_type of this ApiClusterTemplateRole.
        :type: str
        """

        self._role_type = role_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiClusterTemplateRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
