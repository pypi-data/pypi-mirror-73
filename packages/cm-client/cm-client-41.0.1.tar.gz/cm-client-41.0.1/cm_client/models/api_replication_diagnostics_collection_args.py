# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiReplicationDiagnosticsCollectionArgs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commands': 'ApiCommandList',
        'ticket_number': 'str',
        'comments': 'str',
        'phone_home': 'bool'
    }

    attribute_map = {
        'commands': 'commands',
        'ticket_number': 'ticketNumber',
        'comments': 'comments',
        'phone_home': 'phoneHome'
    }

    def __init__(self, commands=None, ticket_number=None, comments=None, phone_home=None):
        """
        ApiReplicationDiagnosticsCollectionArgs - a model defined in Swagger
        """

        self._commands = None
        self._ticket_number = None
        self._comments = None
        self._phone_home = None

        if commands is not None:
          self.commands = commands
        if ticket_number is not None:
          self.ticket_number = ticket_number
        if comments is not None:
          self.comments = comments
        if phone_home is not None:
          self.phone_home = phone_home

    @property
    def commands(self):
        """
        Gets the commands of this ApiReplicationDiagnosticsCollectionArgs.
        Commands to limit diagnostics to. By default, the most recent 10 commands on the schedule will be used.

        :return: The commands of this ApiReplicationDiagnosticsCollectionArgs.
        :rtype: ApiCommandList
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """
        Sets the commands of this ApiReplicationDiagnosticsCollectionArgs.
        Commands to limit diagnostics to. By default, the most recent 10 commands on the schedule will be used.

        :param commands: The commands of this ApiReplicationDiagnosticsCollectionArgs.
        :type: ApiCommandList
        """

        self._commands = commands

    @property
    def ticket_number(self):
        """
        Gets the ticket_number of this ApiReplicationDiagnosticsCollectionArgs.
        Ticket number to which this bundle must be associated with.

        :return: The ticket_number of this ApiReplicationDiagnosticsCollectionArgs.
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """
        Sets the ticket_number of this ApiReplicationDiagnosticsCollectionArgs.
        Ticket number to which this bundle must be associated with.

        :param ticket_number: The ticket_number of this ApiReplicationDiagnosticsCollectionArgs.
        :type: str
        """

        self._ticket_number = ticket_number

    @property
    def comments(self):
        """
        Gets the comments of this ApiReplicationDiagnosticsCollectionArgs.
        Additional comments for the bundle.

        :return: The comments of this ApiReplicationDiagnosticsCollectionArgs.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this ApiReplicationDiagnosticsCollectionArgs.
        Additional comments for the bundle.

        :param comments: The comments of this ApiReplicationDiagnosticsCollectionArgs.
        :type: str
        """

        self._comments = comments

    @property
    def phone_home(self):
        """
        Gets the phone_home of this ApiReplicationDiagnosticsCollectionArgs.
        Whether the diagnostics bundle must be uploaded to Cloudera.

        :return: The phone_home of this ApiReplicationDiagnosticsCollectionArgs.
        :rtype: bool
        """
        return self._phone_home

    @phone_home.setter
    def phone_home(self, phone_home):
        """
        Sets the phone_home of this ApiReplicationDiagnosticsCollectionArgs.
        Whether the diagnostics bundle must be uploaded to Cloudera.

        :param phone_home: The phone_home of this ApiReplicationDiagnosticsCollectionArgs.
        :type: bool
        """

        self._phone_home = phone_home

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiReplicationDiagnosticsCollectionArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
