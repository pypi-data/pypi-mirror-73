# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiEventQueryResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_results': 'float',
        'items': 'list[ApiEvent]'
    }

    attribute_map = {
        'total_results': 'totalResults',
        'items': 'items'
    }

    def __init__(self, total_results=None, items=None):
        """
        ApiEventQueryResult - a model defined in Swagger
        """

        self._total_results = None
        self._items = None

        if total_results is not None:
          self.total_results = total_results
        if items is not None:
          self.items = items

    @property
    def total_results(self):
        """
        Gets the total_results of this ApiEventQueryResult.
        The total number of matched results. Some are possibly not shown due to pagination.

        :return: The total_results of this ApiEventQueryResult.
        :rtype: float
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """
        Sets the total_results of this ApiEventQueryResult.
        The total number of matched results. Some are possibly not shown due to pagination.

        :param total_results: The total_results of this ApiEventQueryResult.
        :type: float
        """

        self._total_results = total_results

    @property
    def items(self):
        """
        Gets the items of this ApiEventQueryResult.
        

        :return: The items of this ApiEventQueryResult.
        :rtype: list[ApiEvent]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this ApiEventQueryResult.
        

        :param items: The items of this ApiEventQueryResult.
        :type: list[ApiEvent]
        """

        self._items = items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiEventQueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
