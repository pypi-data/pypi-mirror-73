# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiTimeSeriesResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_series': 'list[ApiTimeSeries]',
        'warnings': 'list[str]',
        'time_series_query': 'str'
    }

    attribute_map = {
        'time_series': 'timeSeries',
        'warnings': 'warnings',
        'time_series_query': 'timeSeriesQuery'
    }

    def __init__(self, time_series=None, warnings=None, time_series_query=None):
        """
        ApiTimeSeriesResponse - a model defined in Swagger
        """

        self._time_series = None
        self._warnings = None
        self._time_series_query = None

        if time_series is not None:
          self.time_series = time_series
        if warnings is not None:
          self.warnings = warnings
        if time_series_query is not None:
          self.time_series_query = time_series_query

    @property
    def time_series(self):
        """
        Gets the time_series of this ApiTimeSeriesResponse.
        The time series data for this single query response.

        :return: The time_series of this ApiTimeSeriesResponse.
        :rtype: list[ApiTimeSeries]
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """
        Sets the time_series of this ApiTimeSeriesResponse.
        The time series data for this single query response.

        :param time_series: The time_series of this ApiTimeSeriesResponse.
        :type: list[ApiTimeSeries]
        """

        self._time_series = time_series

    @property
    def warnings(self):
        """
        Gets the warnings of this ApiTimeSeriesResponse.
        The warnings for this single query response.

        :return: The warnings of this ApiTimeSeriesResponse.
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """
        Sets the warnings of this ApiTimeSeriesResponse.
        The warnings for this single query response.

        :param warnings: The warnings of this ApiTimeSeriesResponse.
        :type: list[str]
        """

        self._warnings = warnings

    @property
    def time_series_query(self):
        """
        Gets the time_series_query of this ApiTimeSeriesResponse.
        The query for this single query response.

        :return: The time_series_query of this ApiTimeSeriesResponse.
        :rtype: str
        """
        return self._time_series_query

    @time_series_query.setter
    def time_series_query(self, time_series_query):
        """
        Sets the time_series_query of this ApiTimeSeriesResponse.
        The query for this single query response.

        :param time_series_query: The time_series_query of this ApiTimeSeriesResponse.
        :type: str
        """

        self._time_series_query = time_series_query

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiTimeSeriesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
