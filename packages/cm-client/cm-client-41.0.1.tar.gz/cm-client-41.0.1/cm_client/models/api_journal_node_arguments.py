# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiJournalNodeArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jn_name': 'str',
        'jn_host_id': 'str',
        'jn_edits_dir': 'str'
    }

    attribute_map = {
        'jn_name': 'jnName',
        'jn_host_id': 'jnHostId',
        'jn_edits_dir': 'jnEditsDir'
    }

    def __init__(self, jn_name=None, jn_host_id=None, jn_edits_dir=None):
        """
        ApiJournalNodeArguments - a model defined in Swagger
        """

        self._jn_name = None
        self._jn_host_id = None
        self._jn_edits_dir = None

        if jn_name is not None:
          self.jn_name = jn_name
        if jn_host_id is not None:
          self.jn_host_id = jn_host_id
        if jn_edits_dir is not None:
          self.jn_edits_dir = jn_edits_dir

    @property
    def jn_name(self):
        """
        Gets the jn_name of this ApiJournalNodeArguments.
        Name of new JournalNode to be created. (Optional)

        :return: The jn_name of this ApiJournalNodeArguments.
        :rtype: str
        """
        return self._jn_name

    @jn_name.setter
    def jn_name(self, jn_name):
        """
        Sets the jn_name of this ApiJournalNodeArguments.
        Name of new JournalNode to be created. (Optional)

        :param jn_name: The jn_name of this ApiJournalNodeArguments.
        :type: str
        """

        self._jn_name = jn_name

    @property
    def jn_host_id(self):
        """
        Gets the jn_host_id of this ApiJournalNodeArguments.
        ID of the host where the new JournalNode will be created.

        :return: The jn_host_id of this ApiJournalNodeArguments.
        :rtype: str
        """
        return self._jn_host_id

    @jn_host_id.setter
    def jn_host_id(self, jn_host_id):
        """
        Sets the jn_host_id of this ApiJournalNodeArguments.
        ID of the host where the new JournalNode will be created.

        :param jn_host_id: The jn_host_id of this ApiJournalNodeArguments.
        :type: str
        """

        self._jn_host_id = jn_host_id

    @property
    def jn_edits_dir(self):
        """
        Gets the jn_edits_dir of this ApiJournalNodeArguments.
        Path to the JournalNode edits directory. Need not be specified if it is already set at RoleConfigGroup level.

        :return: The jn_edits_dir of this ApiJournalNodeArguments.
        :rtype: str
        """
        return self._jn_edits_dir

    @jn_edits_dir.setter
    def jn_edits_dir(self, jn_edits_dir):
        """
        Sets the jn_edits_dir of this ApiJournalNodeArguments.
        Path to the JournalNode edits directory. Need not be specified if it is already set at RoleConfigGroup level.

        :param jn_edits_dir: The jn_edits_dir of this ApiJournalNodeArguments.
        :type: str
        """

        self._jn_edits_dir = jn_edits_dir

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiJournalNodeArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
