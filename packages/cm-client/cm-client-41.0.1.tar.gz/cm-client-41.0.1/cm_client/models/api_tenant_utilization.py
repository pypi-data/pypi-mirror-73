# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiTenantUtilization(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_name': 'str',
        'cpu_utilization_percentage': 'float',
        'memory_utilization_percentage': 'float'
    }

    attribute_map = {
        'tenant_name': 'tenantName',
        'cpu_utilization_percentage': 'cpuUtilizationPercentage',
        'memory_utilization_percentage': 'memoryUtilizationPercentage'
    }

    def __init__(self, tenant_name=None, cpu_utilization_percentage=None, memory_utilization_percentage=None):
        """
        ApiTenantUtilization - a model defined in Swagger
        """

        self._tenant_name = None
        self._cpu_utilization_percentage = None
        self._memory_utilization_percentage = None

        if tenant_name is not None:
          self.tenant_name = tenant_name
        if cpu_utilization_percentage is not None:
          self.cpu_utilization_percentage = cpu_utilization_percentage
        if memory_utilization_percentage is not None:
          self.memory_utilization_percentage = memory_utilization_percentage

    @property
    def tenant_name(self):
        """
        Gets the tenant_name of this ApiTenantUtilization.
        Name of the tenant.

        :return: The tenant_name of this ApiTenantUtilization.
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """
        Sets the tenant_name of this ApiTenantUtilization.
        Name of the tenant.

        :param tenant_name: The tenant_name of this ApiTenantUtilization.
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def cpu_utilization_percentage(self):
        """
        Gets the cpu_utilization_percentage of this ApiTenantUtilization.
        Percentage of CPU resource used by workloads.

        :return: The cpu_utilization_percentage of this ApiTenantUtilization.
        :rtype: float
        """
        return self._cpu_utilization_percentage

    @cpu_utilization_percentage.setter
    def cpu_utilization_percentage(self, cpu_utilization_percentage):
        """
        Sets the cpu_utilization_percentage of this ApiTenantUtilization.
        Percentage of CPU resource used by workloads.

        :param cpu_utilization_percentage: The cpu_utilization_percentage of this ApiTenantUtilization.
        :type: float
        """

        self._cpu_utilization_percentage = cpu_utilization_percentage

    @property
    def memory_utilization_percentage(self):
        """
        Gets the memory_utilization_percentage of this ApiTenantUtilization.
        Percentage of memory used by workloads.

        :return: The memory_utilization_percentage of this ApiTenantUtilization.
        :rtype: float
        """
        return self._memory_utilization_percentage

    @memory_utilization_percentage.setter
    def memory_utilization_percentage(self, memory_utilization_percentage):
        """
        Sets the memory_utilization_percentage of this ApiTenantUtilization.
        Percentage of memory used by workloads.

        :param memory_utilization_percentage: The memory_utilization_percentage of this ApiTenantUtilization.
        :type: float
        """

        self._memory_utilization_percentage = memory_utilization_percentage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiTenantUtilization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
