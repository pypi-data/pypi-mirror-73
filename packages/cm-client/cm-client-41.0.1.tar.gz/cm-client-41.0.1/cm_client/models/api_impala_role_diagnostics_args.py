# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiImpalaRoleDiagnosticsArgs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_number': 'str',
        'comments': 'str',
        'stacks_count': 'float',
        'stacks_interval_seconds': 'float',
        'jmap': 'bool',
        'gcore': 'bool',
        'minidumps_count': 'float',
        'minidumps_interval_seconds': 'float',
        'phone_home': 'bool'
    }

    attribute_map = {
        'ticket_number': 'ticketNumber',
        'comments': 'comments',
        'stacks_count': 'stacksCount',
        'stacks_interval_seconds': 'stacksIntervalSeconds',
        'jmap': 'jmap',
        'gcore': 'gcore',
        'minidumps_count': 'minidumpsCount',
        'minidumps_interval_seconds': 'minidumpsIntervalSeconds',
        'phone_home': 'phoneHome'
    }

    def __init__(self, ticket_number=None, comments=None, stacks_count=None, stacks_interval_seconds=None, jmap=None, gcore=None, minidumps_count=None, minidumps_interval_seconds=None, phone_home=None):
        """
        ApiImpalaRoleDiagnosticsArgs - a model defined in Swagger
        """

        self._ticket_number = None
        self._comments = None
        self._stacks_count = None
        self._stacks_interval_seconds = None
        self._jmap = None
        self._gcore = None
        self._minidumps_count = None
        self._minidumps_interval_seconds = None
        self._phone_home = None

        if ticket_number is not None:
          self.ticket_number = ticket_number
        if comments is not None:
          self.comments = comments
        if stacks_count is not None:
          self.stacks_count = stacks_count
        if stacks_interval_seconds is not None:
          self.stacks_interval_seconds = stacks_interval_seconds
        if jmap is not None:
          self.jmap = jmap
        if gcore is not None:
          self.gcore = gcore
        if minidumps_count is not None:
          self.minidumps_count = minidumps_count
        if minidumps_interval_seconds is not None:
          self.minidumps_interval_seconds = minidumps_interval_seconds
        if phone_home is not None:
          self.phone_home = phone_home

    @property
    def ticket_number(self):
        """
        Gets the ticket_number of this ApiImpalaRoleDiagnosticsArgs.
        The support ticket number to attach to this data collection.

        :return: The ticket_number of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """
        Sets the ticket_number of this ApiImpalaRoleDiagnosticsArgs.
        The support ticket number to attach to this data collection.

        :param ticket_number: The ticket_number of this ApiImpalaRoleDiagnosticsArgs.
        :type: str
        """

        self._ticket_number = ticket_number

    @property
    def comments(self):
        """
        Gets the comments of this ApiImpalaRoleDiagnosticsArgs.
        Comments to include with this data collection.

        :return: The comments of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this ApiImpalaRoleDiagnosticsArgs.
        Comments to include with this data collection.

        :param comments: The comments of this ApiImpalaRoleDiagnosticsArgs.
        :type: str
        """

        self._comments = comments

    @property
    def stacks_count(self):
        """
        Gets the stacks_count of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The stacks_count of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: float
        """
        return self._stacks_count

    @stacks_count.setter
    def stacks_count(self, stacks_count):
        """
        Sets the stacks_count of this ApiImpalaRoleDiagnosticsArgs.
        

        :param stacks_count: The stacks_count of this ApiImpalaRoleDiagnosticsArgs.
        :type: float
        """

        self._stacks_count = stacks_count

    @property
    def stacks_interval_seconds(self):
        """
        Gets the stacks_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        Interval between stack collections.

        :return: The stacks_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: float
        """
        return self._stacks_interval_seconds

    @stacks_interval_seconds.setter
    def stacks_interval_seconds(self, stacks_interval_seconds):
        """
        Sets the stacks_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        Interval between stack collections.

        :param stacks_interval_seconds: The stacks_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        :type: float
        """

        self._stacks_interval_seconds = stacks_interval_seconds

    @property
    def jmap(self):
        """
        Gets the jmap of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The jmap of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: bool
        """
        return self._jmap

    @jmap.setter
    def jmap(self, jmap):
        """
        Sets the jmap of this ApiImpalaRoleDiagnosticsArgs.
        

        :param jmap: The jmap of this ApiImpalaRoleDiagnosticsArgs.
        :type: bool
        """

        self._jmap = jmap

    @property
    def gcore(self):
        """
        Gets the gcore of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The gcore of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: bool
        """
        return self._gcore

    @gcore.setter
    def gcore(self, gcore):
        """
        Sets the gcore of this ApiImpalaRoleDiagnosticsArgs.
        

        :param gcore: The gcore of this ApiImpalaRoleDiagnosticsArgs.
        :type: bool
        """

        self._gcore = gcore

    @property
    def minidumps_count(self):
        """
        Gets the minidumps_count of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The minidumps_count of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: float
        """
        return self._minidumps_count

    @minidumps_count.setter
    def minidumps_count(self, minidumps_count):
        """
        Sets the minidumps_count of this ApiImpalaRoleDiagnosticsArgs.
        

        :param minidumps_count: The minidumps_count of this ApiImpalaRoleDiagnosticsArgs.
        :type: float
        """

        self._minidumps_count = minidumps_count

    @property
    def minidumps_interval_seconds(self):
        """
        Gets the minidumps_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The minidumps_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: float
        """
        return self._minidumps_interval_seconds

    @minidumps_interval_seconds.setter
    def minidumps_interval_seconds(self, minidumps_interval_seconds):
        """
        Sets the minidumps_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        

        :param minidumps_interval_seconds: The minidumps_interval_seconds of this ApiImpalaRoleDiagnosticsArgs.
        :type: float
        """

        self._minidumps_interval_seconds = minidumps_interval_seconds

    @property
    def phone_home(self):
        """
        Gets the phone_home of this ApiImpalaRoleDiagnosticsArgs.
        

        :return: The phone_home of this ApiImpalaRoleDiagnosticsArgs.
        :rtype: bool
        """
        return self._phone_home

    @phone_home.setter
    def phone_home(self, phone_home):
        """
        Sets the phone_home of this ApiImpalaRoleDiagnosticsArgs.
        

        :param phone_home: The phone_home of this ApiImpalaRoleDiagnosticsArgs.
        :type: bool
        """

        self._phone_home = phone_home

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiImpalaRoleDiagnosticsArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
