# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiAuthRoleMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'uuid': 'str',
        'role': 'str',
        'authorities': 'list[ApiAuthRoleAuthority]',
        'allowed_scopes': 'list[str]'
    }

    attribute_map = {
        'display_name': 'displayName',
        'uuid': 'uuid',
        'role': 'role',
        'authorities': 'authorities',
        'allowed_scopes': 'allowedScopes'
    }

    def __init__(self, display_name=None, uuid=None, role=None, authorities=None, allowed_scopes=None):
        """
        ApiAuthRoleMetadata - a model defined in Swagger
        """

        self._display_name = None
        self._uuid = None
        self._role = None
        self._authorities = None
        self._allowed_scopes = None

        if display_name is not None:
          self.display_name = display_name
        if uuid is not None:
          self.uuid = uuid
        if role is not None:
          self.role = role
        if authorities is not None:
          self.authorities = authorities
        if allowed_scopes is not None:
          self.allowed_scopes = allowed_scopes

    @property
    def display_name(self):
        """
        Gets the display_name of this ApiAuthRoleMetadata.
        

        :return: The display_name of this ApiAuthRoleMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ApiAuthRoleMetadata.
        

        :param display_name: The display_name of this ApiAuthRoleMetadata.
        :type: str
        """

        self._display_name = display_name

    @property
    def uuid(self):
        """
        Gets the uuid of this ApiAuthRoleMetadata.
        

        :return: The uuid of this ApiAuthRoleMetadata.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ApiAuthRoleMetadata.
        

        :param uuid: The uuid of this ApiAuthRoleMetadata.
        :type: str
        """

        self._uuid = uuid

    @property
    def role(self):
        """
        Gets the role of this ApiAuthRoleMetadata.
        

        :return: The role of this ApiAuthRoleMetadata.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this ApiAuthRoleMetadata.
        

        :param role: The role of this ApiAuthRoleMetadata.
        :type: str
        """

        self._role = role

    @property
    def authorities(self):
        """
        Gets the authorities of this ApiAuthRoleMetadata.
        

        :return: The authorities of this ApiAuthRoleMetadata.
        :rtype: list[ApiAuthRoleAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """
        Sets the authorities of this ApiAuthRoleMetadata.
        

        :param authorities: The authorities of this ApiAuthRoleMetadata.
        :type: list[ApiAuthRoleAuthority]
        """

        self._authorities = authorities

    @property
    def allowed_scopes(self):
        """
        Gets the allowed_scopes of this ApiAuthRoleMetadata.
        

        :return: The allowed_scopes of this ApiAuthRoleMetadata.
        :rtype: list[str]
        """
        return self._allowed_scopes

    @allowed_scopes.setter
    def allowed_scopes(self, allowed_scopes):
        """
        Sets the allowed_scopes of this ApiAuthRoleMetadata.
        

        :param allowed_scopes: The allowed_scopes of this ApiAuthRoleMetadata.
        :type: list[str]
        """

        self._allowed_scopes = allowed_scopes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiAuthRoleMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
