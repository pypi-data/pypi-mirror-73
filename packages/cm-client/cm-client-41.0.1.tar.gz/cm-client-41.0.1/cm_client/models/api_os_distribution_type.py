# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiOsDistributionType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "UNKNOWN"
    RHEL5 = "RHEL5"
    RHEL6 = "RHEL6"
    RHEL7 = "RHEL7"
    SLES11 = "SLES11"
    SLES12 = "SLES12"
    DEBIAN_SQUEEZE = "DEBIAN_SQUEEZE"
    DEBIAN_WHEEZY = "DEBIAN_WHEEZY"
    DEBIAN_JESSIE = "DEBIAN_JESSIE"
    UBUNTU_LUCID = "UBUNTU_LUCID"
    UBUNTU_MAVERICK = "UBUNTU_MAVERICK"
    UBUNTU_PRECISE = "UBUNTU_PRECISE"
    UBUNTU_TRUSTY = "UBUNTU_TRUSTY"
    UBUNTU_XENIAL = "UBUNTU_XENIAL"
    UBUNTU_BIONIC = "UBUNTU_BIONIC"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        
    }

    attribute_map = {
        
    }

    def __init__(self):
        """
        ApiOsDistributionType - a model defined in Swagger
        """



    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiOsDistributionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
