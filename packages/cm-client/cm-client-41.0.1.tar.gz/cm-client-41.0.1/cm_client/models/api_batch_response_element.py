# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiBatchResponseElement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'float',
        'response': 'object'
    }

    attribute_map = {
        'status_code': 'statusCode',
        'response': 'response'
    }

    def __init__(self, status_code=None, response=None):
        """
        ApiBatchResponseElement - a model defined in Swagger
        """

        self._status_code = None
        self._response = None

        if status_code is not None:
          self.status_code = status_code
        if response is not None:
          self.response = response

    @property
    def status_code(self):
        """
        Gets the status_code of this ApiBatchResponseElement.
        Read-only. The HTTP status code of the response.

        :return: The status_code of this ApiBatchResponseElement.
        :rtype: float
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this ApiBatchResponseElement.
        Read-only. The HTTP status code of the response.

        :param status_code: The status_code of this ApiBatchResponseElement.
        :type: float
        """

        self._status_code = status_code

    @property
    def response(self):
        """
        Gets the response of this ApiBatchResponseElement.
        Read-only. The (optional) serialized body of the response, in the representation produced by the corresponding API endpoint, such as application/json.

        :return: The response of this ApiBatchResponseElement.
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """
        Sets the response of this ApiBatchResponseElement.
        Read-only. The (optional) serialized body of the response, in the representation produced by the corresponding API endpoint, such as application/json.

        :param response: The response of this ApiBatchResponseElement.
        :type: object
        """

        self._response = response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiBatchResponseElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
