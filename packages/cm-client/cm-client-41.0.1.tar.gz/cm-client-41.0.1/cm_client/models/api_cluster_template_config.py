# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiClusterTemplateConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'ref': 'str',
        'variable': 'str',
        'auto_config': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'ref': 'ref',
        'variable': 'variable',
        'auto_config': 'autoConfig'
    }

    def __init__(self, name=None, value=None, ref=None, variable=None, auto_config=None):
        """
        ApiClusterTemplateConfig - a model defined in Swagger
        """

        self._name = None
        self._value = None
        self._ref = None
        self._variable = None
        self._auto_config = None

        if name is not None:
          self.name = name
        if value is not None:
          self.value = value
        if ref is not None:
          self.ref = ref
        if variable is not None:
          self.variable = variable
        if auto_config is not None:
          self.auto_config = auto_config

    @property
    def name(self):
        """
        Gets the name of this ApiClusterTemplateConfig.
        Config name

        :return: The name of this ApiClusterTemplateConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiClusterTemplateConfig.
        Config name

        :param name: The name of this ApiClusterTemplateConfig.
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this ApiClusterTemplateConfig.
        Config value

        :return: The value of this ApiClusterTemplateConfig.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ApiClusterTemplateConfig.
        Config value

        :param value: The value of this ApiClusterTemplateConfig.
        :type: str
        """

        self._value = value

    @property
    def ref(self):
        """
        Gets the ref of this ApiClusterTemplateConfig.
        Name of the reference. If referring to a service then it will be replaced with actual service name at import time. If referring to a role then it will be replaced with the host name containing that role at import time.

        :return: The ref of this ApiClusterTemplateConfig.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """
        Sets the ref of this ApiClusterTemplateConfig.
        Name of the reference. If referring to a service then it will be replaced with actual service name at import time. If referring to a role then it will be replaced with the host name containing that role at import time.

        :param ref: The ref of this ApiClusterTemplateConfig.
        :type: str
        """

        self._ref = ref

    @property
    def variable(self):
        """
        Gets the variable of this ApiClusterTemplateConfig.
        Referring a variable. The variable value will be provided by the user at import time. Variable name for this config. At import time the value of this variable will be provided by the `   * #ApiClusterTemplateInstantiator.Variables

        :return: The variable of this ApiClusterTemplateConfig.
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """
        Sets the variable of this ApiClusterTemplateConfig.
        Referring a variable. The variable value will be provided by the user at import time. Variable name for this config. At import time the value of this variable will be provided by the `   * #ApiClusterTemplateInstantiator.Variables

        :param variable: The variable of this ApiClusterTemplateConfig.
        :type: str
        """

        self._variable = variable

    @property
    def auto_config(self):
        """
        Gets the auto_config of this ApiClusterTemplateConfig.
        This indicates that the value was automatically configured.

        :return: The auto_config of this ApiClusterTemplateConfig.
        :rtype: bool
        """
        return self._auto_config

    @auto_config.setter
    def auto_config(self, auto_config):
        """
        Sets the auto_config of this ApiClusterTemplateConfig.
        This indicates that the value was automatically configured.

        :param auto_config: The auto_config of this ApiClusterTemplateConfig.
        :type: bool
        """

        self._auto_config = auto_config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiClusterTemplateConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
