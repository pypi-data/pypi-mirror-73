# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiImpalaUtilizationHistogramBin(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_point_inclusive': 'float',
        'end_point_exclusive': 'float',
        'number_of_impala_daemons': 'float'
    }

    attribute_map = {
        'start_point_inclusive': 'startPointInclusive',
        'end_point_exclusive': 'endPointExclusive',
        'number_of_impala_daemons': 'numberOfImpalaDaemons'
    }

    def __init__(self, start_point_inclusive=None, end_point_exclusive=None, number_of_impala_daemons=None):
        """
        ApiImpalaUtilizationHistogramBin - a model defined in Swagger
        """

        self._start_point_inclusive = None
        self._end_point_exclusive = None
        self._number_of_impala_daemons = None

        if start_point_inclusive is not None:
          self.start_point_inclusive = start_point_inclusive
        if end_point_exclusive is not None:
          self.end_point_exclusive = end_point_exclusive
        if number_of_impala_daemons is not None:
          self.number_of_impala_daemons = number_of_impala_daemons

    @property
    def start_point_inclusive(self):
        """
        Gets the start_point_inclusive of this ApiImpalaUtilizationHistogramBin.
        start point (inclusive) of the histogram bin.

        :return: The start_point_inclusive of this ApiImpalaUtilizationHistogramBin.
        :rtype: float
        """
        return self._start_point_inclusive

    @start_point_inclusive.setter
    def start_point_inclusive(self, start_point_inclusive):
        """
        Sets the start_point_inclusive of this ApiImpalaUtilizationHistogramBin.
        start point (inclusive) of the histogram bin.

        :param start_point_inclusive: The start_point_inclusive of this ApiImpalaUtilizationHistogramBin.
        :type: float
        """

        self._start_point_inclusive = start_point_inclusive

    @property
    def end_point_exclusive(self):
        """
        Gets the end_point_exclusive of this ApiImpalaUtilizationHistogramBin.
        end point (exclusive) of the histogram bin.

        :return: The end_point_exclusive of this ApiImpalaUtilizationHistogramBin.
        :rtype: float
        """
        return self._end_point_exclusive

    @end_point_exclusive.setter
    def end_point_exclusive(self, end_point_exclusive):
        """
        Sets the end_point_exclusive of this ApiImpalaUtilizationHistogramBin.
        end point (exclusive) of the histogram bin.

        :param end_point_exclusive: The end_point_exclusive of this ApiImpalaUtilizationHistogramBin.
        :type: float
        """

        self._end_point_exclusive = end_point_exclusive

    @property
    def number_of_impala_daemons(self):
        """
        Gets the number_of_impala_daemons of this ApiImpalaUtilizationHistogramBin.
        Number of Impala daemons.

        :return: The number_of_impala_daemons of this ApiImpalaUtilizationHistogramBin.
        :rtype: float
        """
        return self._number_of_impala_daemons

    @number_of_impala_daemons.setter
    def number_of_impala_daemons(self, number_of_impala_daemons):
        """
        Sets the number_of_impala_daemons of this ApiImpalaUtilizationHistogramBin.
        Number of Impala daemons.

        :param number_of_impala_daemons: The number_of_impala_daemons of this ApiImpalaUtilizationHistogramBin.
        :type: float
        """

        self._number_of_impala_daemons = number_of_impala_daemons

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiImpalaUtilizationHistogramBin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
