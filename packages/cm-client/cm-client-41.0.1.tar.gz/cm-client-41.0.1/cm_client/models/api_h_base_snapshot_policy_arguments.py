# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHBaseSnapshotPolicyArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_reg_exps': 'list[str]',
        'storage': 'Storage'
    }

    attribute_map = {
        'table_reg_exps': 'tableRegExps',
        'storage': 'storage'
    }

    def __init__(self, table_reg_exps=None, storage=None):
        """
        ApiHBaseSnapshotPolicyArguments - a model defined in Swagger
        """

        self._table_reg_exps = None
        self._storage = None

        if table_reg_exps is not None:
          self.table_reg_exps = table_reg_exps
        if storage is not None:
          self.storage = storage

    @property
    def table_reg_exps(self):
        """
        Gets the table_reg_exps of this ApiHBaseSnapshotPolicyArguments.
        The regular expressions specifying the tables. Tables matching any of them will be eligible for snapshot creation.

        :return: The table_reg_exps of this ApiHBaseSnapshotPolicyArguments.
        :rtype: list[str]
        """
        return self._table_reg_exps

    @table_reg_exps.setter
    def table_reg_exps(self, table_reg_exps):
        """
        Sets the table_reg_exps of this ApiHBaseSnapshotPolicyArguments.
        The regular expressions specifying the tables. Tables matching any of them will be eligible for snapshot creation.

        :param table_reg_exps: The table_reg_exps of this ApiHBaseSnapshotPolicyArguments.
        :type: list[str]
        """

        self._table_reg_exps = table_reg_exps

    @property
    def storage(self):
        """
        Gets the storage of this ApiHBaseSnapshotPolicyArguments.
        The location where the snapshots should be stored.

        :return: The storage of this ApiHBaseSnapshotPolicyArguments.
        :rtype: Storage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this ApiHBaseSnapshotPolicyArguments.
        The location where the snapshots should be stored.

        :param storage: The storage of this ApiHBaseSnapshotPolicyArguments.
        :type: Storage
        """

        self._storage = storage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHBaseSnapshotPolicyArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
