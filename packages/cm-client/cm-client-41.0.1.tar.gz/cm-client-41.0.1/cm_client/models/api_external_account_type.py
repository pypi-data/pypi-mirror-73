# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiExternalAccountType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category_name': 'str',
        'type': 'str',
        'display_name': 'str',
        'description': 'str',
        'allowed_account_configs': 'ApiConfigList'
    }

    attribute_map = {
        'name': 'name',
        'category_name': 'categoryName',
        'type': 'type',
        'display_name': 'displayName',
        'description': 'description',
        'allowed_account_configs': 'allowedAccountConfigs'
    }

    def __init__(self, name=None, category_name=None, type=None, display_name=None, description=None, allowed_account_configs=None):
        """
        ApiExternalAccountType - a model defined in Swagger
        """

        self._name = None
        self._category_name = None
        self._type = None
        self._display_name = None
        self._description = None
        self._allowed_account_configs = None

        if name is not None:
          self.name = name
        if category_name is not None:
          self.category_name = category_name
        if type is not None:
          self.type = type
        if display_name is not None:
          self.display_name = display_name
        if description is not None:
          self.description = description
        if allowed_account_configs is not None:
          self.allowed_account_configs = allowed_account_configs

    @property
    def name(self):
        """
        Gets the name of this ApiExternalAccountType.
        Represents the immutable name for this account.

        :return: The name of this ApiExternalAccountType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiExternalAccountType.
        Represents the immutable name for this account.

        :param name: The name of this ApiExternalAccountType.
        :type: str
        """

        self._name = name

    @property
    def category_name(self):
        """
        Gets the category_name of this ApiExternalAccountType.
        Represents the category of this account.

        :return: The category_name of this ApiExternalAccountType.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """
        Sets the category_name of this ApiExternalAccountType.
        Represents the category of this account.

        :param category_name: The category_name of this ApiExternalAccountType.
        :type: str
        """

        self._category_name = category_name

    @property
    def type(self):
        """
        Gets the type of this ApiExternalAccountType.
        Represents the type for this account.

        :return: The type of this ApiExternalAccountType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ApiExternalAccountType.
        Represents the type for this account.

        :param type: The type of this ApiExternalAccountType.
        :type: str
        """

        self._type = type

    @property
    def display_name(self):
        """
        Gets the display_name of this ApiExternalAccountType.
        Represents the localized display name for this account.

        :return: The display_name of this ApiExternalAccountType.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ApiExternalAccountType.
        Represents the localized display name for this account.

        :param display_name: The display_name of this ApiExternalAccountType.
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """
        Gets the description of this ApiExternalAccountType.
        Represents the localized description for this account type.

        :return: The description of this ApiExternalAccountType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ApiExternalAccountType.
        Represents the localized description for this account type.

        :param description: The description of this ApiExternalAccountType.
        :type: str
        """

        self._description = description

    @property
    def allowed_account_configs(self):
        """
        Gets the allowed_account_configs of this ApiExternalAccountType.
        Represents the list of allowed account configs.

        :return: The allowed_account_configs of this ApiExternalAccountType.
        :rtype: ApiConfigList
        """
        return self._allowed_account_configs

    @allowed_account_configs.setter
    def allowed_account_configs(self, allowed_account_configs):
        """
        Sets the allowed_account_configs of this ApiExternalAccountType.
        Represents the list of allowed account configs.

        :param allowed_account_configs: The allowed_account_configs of this ApiExternalAccountType.
        :type: ApiConfigList
        """

        self._allowed_account_configs = allowed_account_configs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiExternalAccountType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
