# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiParcelUsageRack(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hosts': 'list[ApiParcelUsageHost]',
        'rack_id': 'str'
    }

    attribute_map = {
        'hosts': 'hosts',
        'rack_id': 'rackId'
    }

    def __init__(self, hosts=None, rack_id=None):
        """
        ApiParcelUsageRack - a model defined in Swagger
        """

        self._hosts = None
        self._rack_id = None

        if hosts is not None:
          self.hosts = hosts
        if rack_id is not None:
          self.rack_id = rack_id

    @property
    def hosts(self):
        """
        Gets the hosts of this ApiParcelUsageRack.
        A collection of the hosts in the rack.

        :return: The hosts of this ApiParcelUsageRack.
        :rtype: list[ApiParcelUsageHost]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """
        Sets the hosts of this ApiParcelUsageRack.
        A collection of the hosts in the rack.

        :param hosts: The hosts of this ApiParcelUsageRack.
        :type: list[ApiParcelUsageHost]
        """

        self._hosts = hosts

    @property
    def rack_id(self):
        """
        Gets the rack_id of this ApiParcelUsageRack.
        The rack ID for the rack.

        :return: The rack_id of this ApiParcelUsageRack.
        :rtype: str
        """
        return self._rack_id

    @rack_id.setter
    def rack_id(self, rack_id):
        """
        Sets the rack_id of this ApiParcelUsageRack.
        The rack ID for the rack.

        :param rack_id: The rack_id of this ApiParcelUsageRack.
        :type: str
        """

        self._rack_id = rack_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiParcelUsageRack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
