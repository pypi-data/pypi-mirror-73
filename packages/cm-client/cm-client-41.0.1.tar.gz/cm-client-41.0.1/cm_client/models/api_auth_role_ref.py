# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiAuthRoleRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'name': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'name': 'name',
        'uuid': 'uuid'
    }

    def __init__(self, display_name=None, name=None, uuid=None):
        """
        ApiAuthRoleRef - a model defined in Swagger
        """

        self._display_name = None
        self._name = None
        self._uuid = None

        if display_name is not None:
          self.display_name = display_name
        if name is not None:
          self.name = name
        if uuid is not None:
          self.uuid = uuid

    @property
    def display_name(self):
        """
        Gets the display_name of this ApiAuthRoleRef.
        The display name of the authRole. displayName is optional. If a changed displayName is passed in, it will be ignored.

        :return: The display_name of this ApiAuthRoleRef.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ApiAuthRoleRef.
        The display name of the authRole. displayName is optional. If a changed displayName is passed in, it will be ignored.

        :param display_name: The display_name of this ApiAuthRoleRef.
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """
        Gets the name of this ApiAuthRoleRef.
        The name of the authRole. name is available from v32. It is optional, and cannot be modified. Name takes precedence over uuid. If name is absent, uuid will be used for look up.

        :return: The name of this ApiAuthRoleRef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiAuthRoleRef.
        The name of the authRole. name is available from v32. It is optional, and cannot be modified. Name takes precedence over uuid. If name is absent, uuid will be used for look up.

        :param name: The name of this ApiAuthRoleRef.
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """
        Gets the uuid of this ApiAuthRoleRef.
        The uuid of the authRole, which uniquely identifies it in a CM installation.

        :return: The uuid of this ApiAuthRoleRef.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ApiAuthRoleRef.
        The uuid of the authRole, which uniquely identifies it in a CM installation.

        :param uuid: The uuid of this ApiAuthRoleRef.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiAuthRoleRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
