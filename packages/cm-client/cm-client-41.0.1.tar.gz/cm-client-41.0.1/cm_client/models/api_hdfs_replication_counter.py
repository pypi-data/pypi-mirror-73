# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHdfsReplicationCounter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'str',
        'name': 'str',
        'value': 'float'
    }

    attribute_map = {
        'group': 'group',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, group=None, name=None, value=None):
        """
        ApiHdfsReplicationCounter - a model defined in Swagger
        """

        self._group = None
        self._name = None
        self._value = None

        if group is not None:
          self.group = group
        if name is not None:
          self.name = name
        if value is not None:
          self.value = value

    @property
    def group(self):
        """
        Gets the group of this ApiHdfsReplicationCounter.
        

        :return: The group of this ApiHdfsReplicationCounter.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this ApiHdfsReplicationCounter.
        

        :param group: The group of this ApiHdfsReplicationCounter.
        :type: str
        """

        self._group = group

    @property
    def name(self):
        """
        Gets the name of this ApiHdfsReplicationCounter.
        

        :return: The name of this ApiHdfsReplicationCounter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiHdfsReplicationCounter.
        

        :param name: The name of this ApiHdfsReplicationCounter.
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this ApiHdfsReplicationCounter.
        

        :return: The value of this ApiHdfsReplicationCounter.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ApiHdfsReplicationCounter.
        

        :param value: The value of this ApiHdfsReplicationCounter.
        :type: float
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHdfsReplicationCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
