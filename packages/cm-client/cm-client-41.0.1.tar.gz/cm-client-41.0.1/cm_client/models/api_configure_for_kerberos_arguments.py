# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiConfigureForKerberosArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datanode_transceiver_port': 'float',
        'datanode_web_port': 'float'
    }

    attribute_map = {
        'datanode_transceiver_port': 'datanodeTransceiverPort',
        'datanode_web_port': 'datanodeWebPort'
    }

    def __init__(self, datanode_transceiver_port=None, datanode_web_port=None):
        """
        ApiConfigureForKerberosArguments - a model defined in Swagger
        """

        self._datanode_transceiver_port = None
        self._datanode_web_port = None

        if datanode_transceiver_port is not None:
          self.datanode_transceiver_port = datanode_transceiver_port
        if datanode_web_port is not None:
          self.datanode_web_port = datanode_web_port

    @property
    def datanode_transceiver_port(self):
        """
        Gets the datanode_transceiver_port of this ApiConfigureForKerberosArguments.
        The HDFS DataNode transceiver port to use. This will be applied to all DataNode role configuration groups. If not specified, this will default to 1004.

        :return: The datanode_transceiver_port of this ApiConfigureForKerberosArguments.
        :rtype: float
        """
        return self._datanode_transceiver_port

    @datanode_transceiver_port.setter
    def datanode_transceiver_port(self, datanode_transceiver_port):
        """
        Sets the datanode_transceiver_port of this ApiConfigureForKerberosArguments.
        The HDFS DataNode transceiver port to use. This will be applied to all DataNode role configuration groups. If not specified, this will default to 1004.

        :param datanode_transceiver_port: The datanode_transceiver_port of this ApiConfigureForKerberosArguments.
        :type: float
        """

        self._datanode_transceiver_port = datanode_transceiver_port

    @property
    def datanode_web_port(self):
        """
        Gets the datanode_web_port of this ApiConfigureForKerberosArguments.
        The HDFS DataNode web port to use.  This will be applied to all DataNode role configuration groups. If not specified, this will default to 1006.

        :return: The datanode_web_port of this ApiConfigureForKerberosArguments.
        :rtype: float
        """
        return self._datanode_web_port

    @datanode_web_port.setter
    def datanode_web_port(self, datanode_web_port):
        """
        Sets the datanode_web_port of this ApiConfigureForKerberosArguments.
        The HDFS DataNode web port to use.  This will be applied to all DataNode role configuration groups. If not specified, this will default to 1006.

        :param datanode_web_port: The datanode_web_port of this ApiConfigureForKerberosArguments.
        :type: float
        """

        self._datanode_web_port = datanode_web_port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiConfigureForKerberosArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
