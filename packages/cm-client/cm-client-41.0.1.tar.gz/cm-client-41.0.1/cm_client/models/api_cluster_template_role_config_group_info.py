# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiClusterTemplateRoleConfigGroupInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rcg_ref_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'rcg_ref_name': 'rcgRefName',
        'name': 'name'
    }

    def __init__(self, rcg_ref_name=None, name=None):
        """
        ApiClusterTemplateRoleConfigGroupInfo - a model defined in Swagger
        """

        self._rcg_ref_name = None
        self._name = None

        if rcg_ref_name is not None:
          self.rcg_ref_name = rcg_ref_name
        if name is not None:
          self.name = name

    @property
    def rcg_ref_name(self):
        """
        Gets the rcg_ref_name of this ApiClusterTemplateRoleConfigGroupInfo.
        Role config group reference name. This much match the reference name from the template.

        :return: The rcg_ref_name of this ApiClusterTemplateRoleConfigGroupInfo.
        :rtype: str
        """
        return self._rcg_ref_name

    @rcg_ref_name.setter
    def rcg_ref_name(self, rcg_ref_name):
        """
        Sets the rcg_ref_name of this ApiClusterTemplateRoleConfigGroupInfo.
        Role config group reference name. This much match the reference name from the template.

        :param rcg_ref_name: The rcg_ref_name of this ApiClusterTemplateRoleConfigGroupInfo.
        :type: str
        """

        self._rcg_ref_name = rcg_ref_name

    @property
    def name(self):
        """
        Gets the name of this ApiClusterTemplateRoleConfigGroupInfo.
        Role config group name.

        :return: The name of this ApiClusterTemplateRoleConfigGroupInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiClusterTemplateRoleConfigGroupInfo.
        Role config group name.

        :param name: The name of this ApiClusterTemplateRoleConfigGroupInfo.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiClusterTemplateRoleConfigGroupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
