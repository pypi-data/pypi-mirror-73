# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiScmDbInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scm_db_type': 'ScmDbType',
        'embedded_db_used': 'bool'
    }

    attribute_map = {
        'scm_db_type': 'scmDbType',
        'embedded_db_used': 'embeddedDbUsed'
    }

    def __init__(self, scm_db_type=None, embedded_db_used=None):
        """
        ApiScmDbInfo - a model defined in Swagger
        """

        self._scm_db_type = None
        self._embedded_db_used = None

        if scm_db_type is not None:
          self.scm_db_type = scm_db_type
        if embedded_db_used is not None:
          self.embedded_db_used = embedded_db_used

    @property
    def scm_db_type(self):
        """
        Gets the scm_db_type of this ApiScmDbInfo.
        Cloudera Manager server's db type

        :return: The scm_db_type of this ApiScmDbInfo.
        :rtype: ScmDbType
        """
        return self._scm_db_type

    @scm_db_type.setter
    def scm_db_type(self, scm_db_type):
        """
        Sets the scm_db_type of this ApiScmDbInfo.
        Cloudera Manager server's db type

        :param scm_db_type: The scm_db_type of this ApiScmDbInfo.
        :type: ScmDbType
        """

        self._scm_db_type = scm_db_type

    @property
    def embedded_db_used(self):
        """
        Gets the embedded_db_used of this ApiScmDbInfo.
        Whether Cloudera Manager server is using embedded DB

        :return: The embedded_db_used of this ApiScmDbInfo.
        :rtype: bool
        """
        return self._embedded_db_used

    @embedded_db_used.setter
    def embedded_db_used(self, embedded_db_used):
        """
        Sets the embedded_db_used of this ApiScmDbInfo.
        Whether Cloudera Manager server is using embedded DB

        :param embedded_db_used: The embedded_db_used of this ApiScmDbInfo.
        :type: bool
        """

        self._embedded_db_used = embedded_db_used

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiScmDbInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
