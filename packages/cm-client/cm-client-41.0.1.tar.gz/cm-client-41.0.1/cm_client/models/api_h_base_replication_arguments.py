# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHBaseReplicationArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_h_base_service': 'ApiServiceRef',
        'target_peer_id': 'float',
        'target_cluster_key': 'str',
        'end_point_class_name': 'str',
        'namespaces': 'list[str]',
        'tables': 'list[str]',
        'replication_properties': 'dict(str, str)'
    }

    attribute_map = {
        'target_h_base_service': 'targetHBaseService',
        'target_peer_id': 'targetPeerId',
        'target_cluster_key': 'targetClusterKey',
        'end_point_class_name': 'endPointClassName',
        'namespaces': 'namespaces',
        'tables': 'tables',
        'replication_properties': 'replicationProperties'
    }

    def __init__(self, target_h_base_service=None, target_peer_id=None, target_cluster_key=None, end_point_class_name=None, namespaces=None, tables=None, replication_properties=None):
        """
        ApiHBaseReplicationArguments - a model defined in Swagger
        """

        self._target_h_base_service = None
        self._target_peer_id = None
        self._target_cluster_key = None
        self._end_point_class_name = None
        self._namespaces = None
        self._tables = None
        self._replication_properties = None

        if target_h_base_service is not None:
          self.target_h_base_service = target_h_base_service
        if target_peer_id is not None:
          self.target_peer_id = target_peer_id
        if target_cluster_key is not None:
          self.target_cluster_key = target_cluster_key
        if end_point_class_name is not None:
          self.end_point_class_name = end_point_class_name
        if namespaces is not None:
          self.namespaces = namespaces
        if tables is not None:
          self.tables = tables
        if replication_properties is not None:
          self.replication_properties = replication_properties

    @property
    def target_h_base_service(self):
        """
        Gets the target_h_base_service of this ApiHBaseReplicationArguments.
        

        :return: The target_h_base_service of this ApiHBaseReplicationArguments.
        :rtype: ApiServiceRef
        """
        return self._target_h_base_service

    @target_h_base_service.setter
    def target_h_base_service(self, target_h_base_service):
        """
        Sets the target_h_base_service of this ApiHBaseReplicationArguments.
        

        :param target_h_base_service: The target_h_base_service of this ApiHBaseReplicationArguments.
        :type: ApiServiceRef
        """

        self._target_h_base_service = target_h_base_service

    @property
    def target_peer_id(self):
        """
        Gets the target_peer_id of this ApiHBaseReplicationArguments.
        

        :return: The target_peer_id of this ApiHBaseReplicationArguments.
        :rtype: float
        """
        return self._target_peer_id

    @target_peer_id.setter
    def target_peer_id(self, target_peer_id):
        """
        Sets the target_peer_id of this ApiHBaseReplicationArguments.
        

        :param target_peer_id: The target_peer_id of this ApiHBaseReplicationArguments.
        :type: float
        """

        self._target_peer_id = target_peer_id

    @property
    def target_cluster_key(self):
        """
        Gets the target_cluster_key of this ApiHBaseReplicationArguments.
        

        :return: The target_cluster_key of this ApiHBaseReplicationArguments.
        :rtype: str
        """
        return self._target_cluster_key

    @target_cluster_key.setter
    def target_cluster_key(self, target_cluster_key):
        """
        Sets the target_cluster_key of this ApiHBaseReplicationArguments.
        

        :param target_cluster_key: The target_cluster_key of this ApiHBaseReplicationArguments.
        :type: str
        """

        self._target_cluster_key = target_cluster_key

    @property
    def end_point_class_name(self):
        """
        Gets the end_point_class_name of this ApiHBaseReplicationArguments.
        

        :return: The end_point_class_name of this ApiHBaseReplicationArguments.
        :rtype: str
        """
        return self._end_point_class_name

    @end_point_class_name.setter
    def end_point_class_name(self, end_point_class_name):
        """
        Sets the end_point_class_name of this ApiHBaseReplicationArguments.
        

        :param end_point_class_name: The end_point_class_name of this ApiHBaseReplicationArguments.
        :type: str
        """

        self._end_point_class_name = end_point_class_name

    @property
    def namespaces(self):
        """
        Gets the namespaces of this ApiHBaseReplicationArguments.
        

        :return: The namespaces of this ApiHBaseReplicationArguments.
        :rtype: list[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """
        Sets the namespaces of this ApiHBaseReplicationArguments.
        

        :param namespaces: The namespaces of this ApiHBaseReplicationArguments.
        :type: list[str]
        """

        self._namespaces = namespaces

    @property
    def tables(self):
        """
        Gets the tables of this ApiHBaseReplicationArguments.
        

        :return: The tables of this ApiHBaseReplicationArguments.
        :rtype: list[str]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """
        Sets the tables of this ApiHBaseReplicationArguments.
        

        :param tables: The tables of this ApiHBaseReplicationArguments.
        :type: list[str]
        """

        self._tables = tables

    @property
    def replication_properties(self):
        """
        Gets the replication_properties of this ApiHBaseReplicationArguments.
        

        :return: The replication_properties of this ApiHBaseReplicationArguments.
        :rtype: dict(str, str)
        """
        return self._replication_properties

    @replication_properties.setter
    def replication_properties(self, replication_properties):
        """
        Sets the replication_properties of this ApiHBaseReplicationArguments.
        

        :param replication_properties: The replication_properties of this ApiHBaseReplicationArguments.
        :type: dict(str, str)
        """

        self._replication_properties = replication_properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHBaseReplicationArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
