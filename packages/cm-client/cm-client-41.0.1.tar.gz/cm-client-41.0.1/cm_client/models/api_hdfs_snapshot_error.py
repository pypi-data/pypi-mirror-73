# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHdfsSnapshotError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'snapshot_name': 'str',
        'error': 'str'
    }

    attribute_map = {
        'path': 'path',
        'snapshot_name': 'snapshotName',
        'error': 'error'
    }

    def __init__(self, path=None, snapshot_name=None, error=None):
        """
        ApiHdfsSnapshotError - a model defined in Swagger
        """

        self._path = None
        self._snapshot_name = None
        self._error = None

        if path is not None:
          self.path = path
        if snapshot_name is not None:
          self.snapshot_name = snapshot_name
        if error is not None:
          self.error = error

    @property
    def path(self):
        """
        Gets the path of this ApiHdfsSnapshotError.
        Path for which the snapshot error occurred.

        :return: The path of this ApiHdfsSnapshotError.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ApiHdfsSnapshotError.
        Path for which the snapshot error occurred.

        :param path: The path of this ApiHdfsSnapshotError.
        :type: str
        """

        self._path = path

    @property
    def snapshot_name(self):
        """
        Gets the snapshot_name of this ApiHdfsSnapshotError.
        Name of snapshot for which error occurred.

        :return: The snapshot_name of this ApiHdfsSnapshotError.
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """
        Sets the snapshot_name of this ApiHdfsSnapshotError.
        Name of snapshot for which error occurred.

        :param snapshot_name: The snapshot_name of this ApiHdfsSnapshotError.
        :type: str
        """

        self._snapshot_name = snapshot_name

    @property
    def error(self):
        """
        Gets the error of this ApiHdfsSnapshotError.
        Description of the error.

        :return: The error of this ApiHdfsSnapshotError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ApiHdfsSnapshotError.
        Description of the error.

        :param error: The error of this ApiHdfsSnapshotError.
        :type: str
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHdfsSnapshotError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
