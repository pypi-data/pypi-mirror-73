# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiKerberosInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kerberized': 'bool',
        'kdc_type': 'str',
        'kerberos_realm': 'str',
        'kdc_host': 'str',
        'admin_host': 'str',
        'domain': 'list[str]'
    }

    attribute_map = {
        'kerberized': 'kerberized',
        'kdc_type': 'kdcType',
        'kerberos_realm': 'kerberosRealm',
        'kdc_host': 'kdcHost',
        'admin_host': 'adminHost',
        'domain': 'domain'
    }

    def __init__(self, kerberized=None, kdc_type=None, kerberos_realm=None, kdc_host=None, admin_host=None, domain=None):
        """
        ApiKerberosInfo - a model defined in Swagger
        """

        self._kerberized = None
        self._kdc_type = None
        self._kerberos_realm = None
        self._kdc_host = None
        self._admin_host = None
        self._domain = None

        if kerberized is not None:
          self.kerberized = kerberized
        if kdc_type is not None:
          self.kdc_type = kdc_type
        if kerberos_realm is not None:
          self.kerberos_realm = kerberos_realm
        if kdc_host is not None:
          self.kdc_host = kdc_host
        if admin_host is not None:
          self.admin_host = admin_host
        if domain is not None:
          self.domain = domain

    @property
    def kerberized(self):
        """
        Gets the kerberized of this ApiKerberosInfo.
        

        :return: The kerberized of this ApiKerberosInfo.
        :rtype: bool
        """
        return self._kerberized

    @kerberized.setter
    def kerberized(self, kerberized):
        """
        Sets the kerberized of this ApiKerberosInfo.
        

        :param kerberized: The kerberized of this ApiKerberosInfo.
        :type: bool
        """

        self._kerberized = kerberized

    @property
    def kdc_type(self):
        """
        Gets the kdc_type of this ApiKerberosInfo.
        

        :return: The kdc_type of this ApiKerberosInfo.
        :rtype: str
        """
        return self._kdc_type

    @kdc_type.setter
    def kdc_type(self, kdc_type):
        """
        Sets the kdc_type of this ApiKerberosInfo.
        

        :param kdc_type: The kdc_type of this ApiKerberosInfo.
        :type: str
        """

        self._kdc_type = kdc_type

    @property
    def kerberos_realm(self):
        """
        Gets the kerberos_realm of this ApiKerberosInfo.
        

        :return: The kerberos_realm of this ApiKerberosInfo.
        :rtype: str
        """
        return self._kerberos_realm

    @kerberos_realm.setter
    def kerberos_realm(self, kerberos_realm):
        """
        Sets the kerberos_realm of this ApiKerberosInfo.
        

        :param kerberos_realm: The kerberos_realm of this ApiKerberosInfo.
        :type: str
        """

        self._kerberos_realm = kerberos_realm

    @property
    def kdc_host(self):
        """
        Gets the kdc_host of this ApiKerberosInfo.
        

        :return: The kdc_host of this ApiKerberosInfo.
        :rtype: str
        """
        return self._kdc_host

    @kdc_host.setter
    def kdc_host(self, kdc_host):
        """
        Sets the kdc_host of this ApiKerberosInfo.
        

        :param kdc_host: The kdc_host of this ApiKerberosInfo.
        :type: str
        """

        self._kdc_host = kdc_host

    @property
    def admin_host(self):
        """
        Gets the admin_host of this ApiKerberosInfo.
        

        :return: The admin_host of this ApiKerberosInfo.
        :rtype: str
        """
        return self._admin_host

    @admin_host.setter
    def admin_host(self, admin_host):
        """
        Sets the admin_host of this ApiKerberosInfo.
        

        :param admin_host: The admin_host of this ApiKerberosInfo.
        :type: str
        """

        self._admin_host = admin_host

    @property
    def domain(self):
        """
        Gets the domain of this ApiKerberosInfo.
        

        :return: The domain of this ApiKerberosInfo.
        :rtype: list[str]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this ApiKerberosInfo.
        

        :param domain: The domain of this ApiKerberosInfo.
        :type: list[str]
        """

        self._domain = domain

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiKerberosInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
