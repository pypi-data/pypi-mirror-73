# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiDisableNnHaArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_nn_name': 'str',
        'snn_host_id': 'str',
        'snn_checkpoint_dir_list': 'list[str]',
        'snn_name': 'str'
    }

    attribute_map = {
        'active_nn_name': 'activeNnName',
        'snn_host_id': 'snnHostId',
        'snn_checkpoint_dir_list': 'snnCheckpointDirList',
        'snn_name': 'snnName'
    }

    def __init__(self, active_nn_name=None, snn_host_id=None, snn_checkpoint_dir_list=None, snn_name=None):
        """
        ApiDisableNnHaArguments - a model defined in Swagger
        """

        self._active_nn_name = None
        self._snn_host_id = None
        self._snn_checkpoint_dir_list = None
        self._snn_name = None

        if active_nn_name is not None:
          self.active_nn_name = active_nn_name
        if snn_host_id is not None:
          self.snn_host_id = snn_host_id
        if snn_checkpoint_dir_list is not None:
          self.snn_checkpoint_dir_list = snn_checkpoint_dir_list
        if snn_name is not None:
          self.snn_name = snn_name

    @property
    def active_nn_name(self):
        """
        Gets the active_nn_name of this ApiDisableNnHaArguments.
        Name of the NamdeNode role that is going to be active after High Availability is disabled.

        :return: The active_nn_name of this ApiDisableNnHaArguments.
        :rtype: str
        """
        return self._active_nn_name

    @active_nn_name.setter
    def active_nn_name(self, active_nn_name):
        """
        Sets the active_nn_name of this ApiDisableNnHaArguments.
        Name of the NamdeNode role that is going to be active after High Availability is disabled.

        :param active_nn_name: The active_nn_name of this ApiDisableNnHaArguments.
        :type: str
        """

        self._active_nn_name = active_nn_name

    @property
    def snn_host_id(self):
        """
        Gets the snn_host_id of this ApiDisableNnHaArguments.
        Id of the host where the new SecondaryNameNode will be created.

        :return: The snn_host_id of this ApiDisableNnHaArguments.
        :rtype: str
        """
        return self._snn_host_id

    @snn_host_id.setter
    def snn_host_id(self, snn_host_id):
        """
        Sets the snn_host_id of this ApiDisableNnHaArguments.
        Id of the host where the new SecondaryNameNode will be created.

        :param snn_host_id: The snn_host_id of this ApiDisableNnHaArguments.
        :type: str
        """

        self._snn_host_id = snn_host_id

    @property
    def snn_checkpoint_dir_list(self):
        """
        Gets the snn_checkpoint_dir_list of this ApiDisableNnHaArguments.
        List of directories used for checkpointing by the new SecondaryNameNode.

        :return: The snn_checkpoint_dir_list of this ApiDisableNnHaArguments.
        :rtype: list[str]
        """
        return self._snn_checkpoint_dir_list

    @snn_checkpoint_dir_list.setter
    def snn_checkpoint_dir_list(self, snn_checkpoint_dir_list):
        """
        Sets the snn_checkpoint_dir_list of this ApiDisableNnHaArguments.
        List of directories used for checkpointing by the new SecondaryNameNode.

        :param snn_checkpoint_dir_list: The snn_checkpoint_dir_list of this ApiDisableNnHaArguments.
        :type: list[str]
        """

        self._snn_checkpoint_dir_list = snn_checkpoint_dir_list

    @property
    def snn_name(self):
        """
        Gets the snn_name of this ApiDisableNnHaArguments.
        Name of the new SecondaryNameNode role (Optional).

        :return: The snn_name of this ApiDisableNnHaArguments.
        :rtype: str
        """
        return self._snn_name

    @snn_name.setter
    def snn_name(self, snn_name):
        """
        Sets the snn_name of this ApiDisableNnHaArguments.
        Name of the new SecondaryNameNode role (Optional).

        :param snn_name: The snn_name of this ApiDisableNnHaArguments.
        :type: str
        """

        self._snn_name = snn_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiDisableNnHaArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
