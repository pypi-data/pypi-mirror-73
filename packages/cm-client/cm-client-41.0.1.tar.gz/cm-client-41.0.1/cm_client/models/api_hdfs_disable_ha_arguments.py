# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHdfsDisableHaArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_name': 'str',
        'secondary_name': 'str',
        'start_dependent_services': 'bool',
        'deploy_client_configs': 'bool',
        'disable_quorum_storage': 'bool'
    }

    attribute_map = {
        'active_name': 'activeName',
        'secondary_name': 'secondaryName',
        'start_dependent_services': 'startDependentServices',
        'deploy_client_configs': 'deployClientConfigs',
        'disable_quorum_storage': 'disableQuorumStorage'
    }

    def __init__(self, active_name=None, secondary_name=None, start_dependent_services=None, deploy_client_configs=None, disable_quorum_storage=None):
        """
        ApiHdfsDisableHaArguments - a model defined in Swagger
        """

        self._active_name = None
        self._secondary_name = None
        self._start_dependent_services = None
        self._deploy_client_configs = None
        self._disable_quorum_storage = None

        if active_name is not None:
          self.active_name = active_name
        if secondary_name is not None:
          self.secondary_name = secondary_name
        if start_dependent_services is not None:
          self.start_dependent_services = start_dependent_services
        if deploy_client_configs is not None:
          self.deploy_client_configs = deploy_client_configs
        if disable_quorum_storage is not None:
          self.disable_quorum_storage = disable_quorum_storage

    @property
    def active_name(self):
        """
        Gets the active_name of this ApiHdfsDisableHaArguments.
        Name of the the NameNode to be kept.

        :return: The active_name of this ApiHdfsDisableHaArguments.
        :rtype: str
        """
        return self._active_name

    @active_name.setter
    def active_name(self, active_name):
        """
        Sets the active_name of this ApiHdfsDisableHaArguments.
        Name of the the NameNode to be kept.

        :param active_name: The active_name of this ApiHdfsDisableHaArguments.
        :type: str
        """

        self._active_name = active_name

    @property
    def secondary_name(self):
        """
        Gets the secondary_name of this ApiHdfsDisableHaArguments.
        Name of the SecondaryNamenode to associate with the active NameNode.

        :return: The secondary_name of this ApiHdfsDisableHaArguments.
        :rtype: str
        """
        return self._secondary_name

    @secondary_name.setter
    def secondary_name(self, secondary_name):
        """
        Sets the secondary_name of this ApiHdfsDisableHaArguments.
        Name of the SecondaryNamenode to associate with the active NameNode.

        :param secondary_name: The secondary_name of this ApiHdfsDisableHaArguments.
        :type: str
        """

        self._secondary_name = secondary_name

    @property
    def start_dependent_services(self):
        """
        Gets the start_dependent_services of this ApiHdfsDisableHaArguments.
        Whether to re-start dependent services. Defaults to true.

        :return: The start_dependent_services of this ApiHdfsDisableHaArguments.
        :rtype: bool
        """
        return self._start_dependent_services

    @start_dependent_services.setter
    def start_dependent_services(self, start_dependent_services):
        """
        Sets the start_dependent_services of this ApiHdfsDisableHaArguments.
        Whether to re-start dependent services. Defaults to true.

        :param start_dependent_services: The start_dependent_services of this ApiHdfsDisableHaArguments.
        :type: bool
        """

        self._start_dependent_services = start_dependent_services

    @property
    def deploy_client_configs(self):
        """
        Gets the deploy_client_configs of this ApiHdfsDisableHaArguments.
        Whether to re-deploy client configurations. Defaults to true.

        :return: The deploy_client_configs of this ApiHdfsDisableHaArguments.
        :rtype: bool
        """
        return self._deploy_client_configs

    @deploy_client_configs.setter
    def deploy_client_configs(self, deploy_client_configs):
        """
        Sets the deploy_client_configs of this ApiHdfsDisableHaArguments.
        Whether to re-deploy client configurations. Defaults to true.

        :param deploy_client_configs: The deploy_client_configs of this ApiHdfsDisableHaArguments.
        :type: bool
        """

        self._deploy_client_configs = deploy_client_configs

    @property
    def disable_quorum_storage(self):
        """
        Gets the disable_quorum_storage of this ApiHdfsDisableHaArguments.
        Whether to disable Quorum-based Storage. Defaults to false.  Available since API v2.

        :return: The disable_quorum_storage of this ApiHdfsDisableHaArguments.
        :rtype: bool
        """
        return self._disable_quorum_storage

    @disable_quorum_storage.setter
    def disable_quorum_storage(self, disable_quorum_storage):
        """
        Sets the disable_quorum_storage of this ApiHdfsDisableHaArguments.
        Whether to disable Quorum-based Storage. Defaults to false.  Available since API v2.

        :param disable_quorum_storage: The disable_quorum_storage of this ApiHdfsDisableHaArguments.
        :type: bool
        """

        self._disable_quorum_storage = disable_quorum_storage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHdfsDisableHaArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
