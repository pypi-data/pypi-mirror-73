# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v41</h1>       <p>Introduced in Cloudera Manager 7.1.1</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiEnableLlamaHaArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_llama_host_id': 'str',
        'new_llama_role_name': 'str',
        'zk_service_name': 'str'
    }

    attribute_map = {
        'new_llama_host_id': 'newLlamaHostId',
        'new_llama_role_name': 'newLlamaRoleName',
        'zk_service_name': 'zkServiceName'
    }

    def __init__(self, new_llama_host_id=None, new_llama_role_name=None, zk_service_name=None):
        """
        ApiEnableLlamaHaArguments - a model defined in Swagger
        """

        self._new_llama_host_id = None
        self._new_llama_role_name = None
        self._zk_service_name = None

        if new_llama_host_id is not None:
          self.new_llama_host_id = new_llama_host_id
        if new_llama_role_name is not None:
          self.new_llama_role_name = new_llama_role_name
        if zk_service_name is not None:
          self.zk_service_name = zk_service_name

    @property
    def new_llama_host_id(self):
        """
        Gets the new_llama_host_id of this ApiEnableLlamaHaArguments.
        HostId of the host on which the second Llama role will be created.

        :return: The new_llama_host_id of this ApiEnableLlamaHaArguments.
        :rtype: str
        """
        return self._new_llama_host_id

    @new_llama_host_id.setter
    def new_llama_host_id(self, new_llama_host_id):
        """
        Sets the new_llama_host_id of this ApiEnableLlamaHaArguments.
        HostId of the host on which the second Llama role will be created.

        :param new_llama_host_id: The new_llama_host_id of this ApiEnableLlamaHaArguments.
        :type: str
        """

        self._new_llama_host_id = new_llama_host_id

    @property
    def new_llama_role_name(self):
        """
        Gets the new_llama_role_name of this ApiEnableLlamaHaArguments.
        Name of the second Llama role to be created (optional).

        :return: The new_llama_role_name of this ApiEnableLlamaHaArguments.
        :rtype: str
        """
        return self._new_llama_role_name

    @new_llama_role_name.setter
    def new_llama_role_name(self, new_llama_role_name):
        """
        Sets the new_llama_role_name of this ApiEnableLlamaHaArguments.
        Name of the second Llama role to be created (optional).

        :param new_llama_role_name: The new_llama_role_name of this ApiEnableLlamaHaArguments.
        :type: str
        """

        self._new_llama_role_name = new_llama_role_name

    @property
    def zk_service_name(self):
        """
        Gets the zk_service_name of this ApiEnableLlamaHaArguments.
        Name of the ZooKeeper service that will be used for auto-failover. This argument may be omitted if the ZooKeeper dependency for Impala is already configured.

        :return: The zk_service_name of this ApiEnableLlamaHaArguments.
        :rtype: str
        """
        return self._zk_service_name

    @zk_service_name.setter
    def zk_service_name(self, zk_service_name):
        """
        Sets the zk_service_name of this ApiEnableLlamaHaArguments.
        Name of the ZooKeeper service that will be used for auto-failover. This argument may be omitted if the ZooKeeper dependency for Impala is already configured.

        :param zk_service_name: The zk_service_name of this ApiEnableLlamaHaArguments.
        :type: str
        """

        self._zk_service_name = zk_service_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiEnableLlamaHaArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
