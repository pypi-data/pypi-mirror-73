# coding: utf-8

"""
    Public API Server

    **osparc-simcore Public RESTful API Specifications** ## Python Client - Github [repo](https://github.com/ITISFoundation/osparc-simcore-python-client) - Quick install: ``pip install git+https://github.com/ITISFoundation/osparc-simcore-python-client.git``   # noqa: E501

    The version of the OpenAPI document: 0.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'login': 'str',
        'role': 'str',
        'groups': 'Groups',
        'gravatar_id': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'login': 'login',
        'role': 'role',
        'groups': 'groups',
        'gravatar_id': 'gravatar_id'
    }

    def __init__(self, first_name=None, last_name=None, login=None, role=None, groups=None, gravatar_id=None, local_vars_configuration=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._login = None
        self._role = None
        self._groups = None
        self._gravatar_id = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.login = login
        self.role = role
        if groups is not None:
            self.groups = groups
        if gravatar_id is not None:
            self.gravatar_id = gravatar_id

    @property
    def first_name(self):
        """Gets the first_name of this Profile.  # noqa: E501


        :return: The first_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Profile.


        :param first_name: The first_name of this Profile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Profile.  # noqa: E501


        :return: The last_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Profile.


        :param last_name: The last_name of this Profile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login(self):
        """Gets the login of this Profile.  # noqa: E501


        :return: The login of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Profile.


        :param login: The login of this Profile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and login is None:  # noqa: E501
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def role(self):
        """Gets the role of this Profile.  # noqa: E501


        :return: The role of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Profile.


        :param role: The role of this Profile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role is None:  # noqa: E501
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["ANONYMOUS", "GUEST", "USER", "TESTER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def groups(self):
        """Gets the groups of this Profile.  # noqa: E501


        :return: The groups of this Profile.  # noqa: E501
        :rtype: Groups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Profile.


        :param groups: The groups of this Profile.  # noqa: E501
        :type: Groups
        """

        self._groups = groups

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this Profile.  # noqa: E501

        Hash value of email to retrieve an avatar image from https://www.gravatar.com  # noqa: E501

        :return: The gravatar_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this Profile.

        Hash value of email to retrieve an avatar image from https://www.gravatar.com  # noqa: E501

        :param gravatar_id: The gravatar_id of this Profile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                gravatar_id is not None and len(gravatar_id) > 40):
            raise ValueError("Invalid value for `gravatar_id`, length must be less than or equal to `40`")  # noqa: E501

        self._gravatar_id = gravatar_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
