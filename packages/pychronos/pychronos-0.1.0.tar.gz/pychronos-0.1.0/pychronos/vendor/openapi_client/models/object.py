# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Object(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'space': 'SpaceObj',
        'collection': 'CollectionObj',
        'timeseries': 'TimeseriesObj',
        'type': 'ObjectType',
        'path': 'str',
        'subobject': 'bool'
    }

    attribute_map = {
        'space': 'space',
        'collection': 'collection',
        'timeseries': 'timeseries',
        'type': 'type',
        'path': 'path',
        'subobject': 'subobject'
    }

    def __init__(self, space=None, collection=None, timeseries=None, type=None, path=None, subobject=None):  # noqa: E501
        """Object - a model defined in OpenAPI"""  # noqa: E501

        self._space = None
        self._collection = None
        self._timeseries = None
        self._type = None
        self._path = None
        self._subobject = None
        self.discriminator = None

        if space is not None:
            self.space = space
        if collection is not None:
            self.collection = collection
        if timeseries is not None:
            self.timeseries = timeseries
        self.type = type
        self.path = path
        self.subobject = subobject

    @property
    def space(self):
        """Gets the space of this Object.  # noqa: E501


        :return: The space of this Object.  # noqa: E501
        :rtype: SpaceObj
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this Object.


        :param space: The space of this Object.  # noqa: E501
        :type: SpaceObj
        """

        self._space = space

    @property
    def collection(self):
        """Gets the collection of this Object.  # noqa: E501


        :return: The collection of this Object.  # noqa: E501
        :rtype: CollectionObj
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Object.


        :param collection: The collection of this Object.  # noqa: E501
        :type: CollectionObj
        """

        self._collection = collection

    @property
    def timeseries(self):
        """Gets the timeseries of this Object.  # noqa: E501


        :return: The timeseries of this Object.  # noqa: E501
        :rtype: TimeseriesObj
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries):
        """Sets the timeseries of this Object.


        :param timeseries: The timeseries of this Object.  # noqa: E501
        :type: TimeseriesObj
        """

        self._timeseries = timeseries

    @property
    def type(self):
        """Gets the type of this Object.  # noqa: E501


        :return: The type of this Object.  # noqa: E501
        :rtype: ObjectType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Object.


        :param type: The type of this Object.  # noqa: E501
        :type: ObjectType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def path(self):
        """Gets the path of this Object.  # noqa: E501


        :return: The path of this Object.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Object.


        :param path: The path of this Object.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if path is not None and not re.search(r'^(?P<t1>[ugs]):(?P<id1>[0-9a-fA-F]{24})\/(c:(?P<coll_id>[0-9a-fA-F]{24})\/((?P<t2>[atv]):(?P<id2>[0-9a-fA-F]{24})\/)?)?(?P<wc>\*?)$', path):  # noqa: E501
            raise ValueError(r"Invalid value for `path`, must be a follow pattern or equal to `/^(?P<t1>[ugs]):(?P<id1>[0-9a-fA-F]{24})\/(c:(?P<coll_id>[0-9a-fA-F]{24})\/((?P<t2>[atv]):(?P<id2>[0-9a-fA-F]{24})\/)?)?(?P<wc>\*?)$/`")  # noqa: E501

        self._path = path

    @property
    def subobject(self):
        """Gets the subobject of this Object.  # noqa: E501


        :return: The subobject of this Object.  # noqa: E501
        :rtype: bool
        """
        return self._subobject

    @subobject.setter
    def subobject(self, subobject):
        """Sets the subobject of this Object.


        :param subobject: The subobject of this Object.  # noqa: E501
        :type: bool
        """
        if subobject is None:
            raise ValueError("Invalid value for `subobject`, must not be `None`")  # noqa: E501

        self._subobject = subobject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Object):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
