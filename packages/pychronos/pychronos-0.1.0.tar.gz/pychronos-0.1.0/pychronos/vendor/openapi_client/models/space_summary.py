# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SpaceSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'space_id': 'str',
        'name': 'str',
        'title': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'space_id': 'spaceId',
        'name': 'name',
        'title': 'title',
        'tags': 'tags'
    }

    def __init__(self, space_id=None, name=None, title=None, tags=None):  # noqa: E501
        """SpaceSummary - a model defined in OpenAPI"""  # noqa: E501

        self._space_id = None
        self._name = None
        self._title = None
        self._tags = None
        self.discriminator = None

        if space_id is not None:
            self.space_id = space_id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if tags is not None:
            self.tags = tags

    @property
    def space_id(self):
        """Gets the space_id of this SpaceSummary.  # noqa: E501


        :return: The space_id of this SpaceSummary.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this SpaceSummary.


        :param space_id: The space_id of this SpaceSummary.  # noqa: E501
        :type: str
        """
        if space_id is not None and not re.search(r'[0-9a-fA-F]{24}', space_id):  # noqa: E501
            raise ValueError(r"Invalid value for `space_id`, must be a follow pattern or equal to `/[0-9a-fA-F]{24}/`")  # noqa: E501

        self._space_id = space_id

    @property
    def name(self):
        """Gets the name of this SpaceSummary.  # noqa: E501


        :return: The name of this SpaceSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpaceSummary.


        :param name: The name of this SpaceSummary.  # noqa: E501
        :type: str
        """
        if name is not None and not re.search(r'^[a-zA-Z][_a-zA-Z0-9]{4,59}$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][_a-zA-Z0-9]{4,59}$/`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this SpaceSummary.  # noqa: E501


        :return: The title of this SpaceSummary.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SpaceSummary.


        :param title: The title of this SpaceSummary.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def tags(self):
        """Gets the tags of this SpaceSummary.  # noqa: E501


        :return: The tags of this SpaceSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SpaceSummary.


        :param tags: The tags of this SpaceSummary.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpaceSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
