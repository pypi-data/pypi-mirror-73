# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Upload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upload_id': 'str',
        'upload_url': 'str',
        'method': 'UploadMethod',
        'description': 'str',
        'vintage_name': 'str',
        'filename': 'str',
        'file_type': 'str',
        'file_size': 'float',
        'file_last_modified': 'datetime',
        'errors': 'list[UploadErrors]',
        'updated_on': 'datetime',
        'created_on': 'datetime',
        'created_by': 'UserSummary',
        'status': 'str',
        'vid': 'str'
    }

    attribute_map = {
        'upload_id': 'upload_id',
        'upload_url': 'upload_url',
        'method': 'method',
        'description': 'description',
        'vintage_name': 'vintage_name',
        'filename': 'filename',
        'file_type': 'fileType',
        'file_size': 'fileSize',
        'file_last_modified': 'fileLastModified',
        'errors': 'errors',
        'updated_on': 'updatedOn',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'status': 'status',
        'vid': 'vid'
    }

    def __init__(self, upload_id=None, upload_url=None, method=None, description=None, vintage_name=None, filename=None, file_type=None, file_size=None, file_last_modified=None, errors=None, updated_on=None, created_on=None, created_by=None, status=None, vid=None):  # noqa: E501
        """Upload - a model defined in OpenAPI"""  # noqa: E501

        self._upload_id = None
        self._upload_url = None
        self._method = None
        self._description = None
        self._vintage_name = None
        self._filename = None
        self._file_type = None
        self._file_size = None
        self._file_last_modified = None
        self._errors = None
        self._updated_on = None
        self._created_on = None
        self._created_by = None
        self._status = None
        self._vid = None
        self.discriminator = None

        if upload_id is not None:
            self.upload_id = upload_id
        if upload_url is not None:
            self.upload_url = upload_url
        if method is not None:
            self.method = method
        if description is not None:
            self.description = description
        if vintage_name is not None:
            self.vintage_name = vintage_name
        if filename is not None:
            self.filename = filename
        if file_type is not None:
            self.file_type = file_type
        if file_size is not None:
            self.file_size = file_size
        if file_last_modified is not None:
            self.file_last_modified = file_last_modified
        if errors is not None:
            self.errors = errors
        if updated_on is not None:
            self.updated_on = updated_on
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if status is not None:
            self.status = status
        if vid is not None:
            self.vid = vid

    @property
    def upload_id(self):
        """Gets the upload_id of this Upload.  # noqa: E501


        :return: The upload_id of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this Upload.


        :param upload_id: The upload_id of this Upload.  # noqa: E501
        :type: str
        """
        if upload_id is not None and not re.search(r'[0-9a-fA-F]{24}', upload_id):  # noqa: E501
            raise ValueError(r"Invalid value for `upload_id`, must be a follow pattern or equal to `/[0-9a-fA-F]{24}/`")  # noqa: E501

        self._upload_id = upload_id

    @property
    def upload_url(self):
        """Gets the upload_url of this Upload.  # noqa: E501


        :return: The upload_url of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this Upload.


        :param upload_url: The upload_url of this Upload.  # noqa: E501
        :type: str
        """

        self._upload_url = upload_url

    @property
    def method(self):
        """Gets the method of this Upload.  # noqa: E501


        :return: The method of this Upload.  # noqa: E501
        :rtype: UploadMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Upload.


        :param method: The method of this Upload.  # noqa: E501
        :type: UploadMethod
        """

        self._method = method

    @property
    def description(self):
        """Gets the description of this Upload.  # noqa: E501


        :return: The description of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Upload.


        :param description: The description of this Upload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vintage_name(self):
        """Gets the vintage_name of this Upload.  # noqa: E501


        :return: The vintage_name of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._vintage_name

    @vintage_name.setter
    def vintage_name(self, vintage_name):
        """Sets the vintage_name of this Upload.


        :param vintage_name: The vintage_name of this Upload.  # noqa: E501
        :type: str
        """

        self._vintage_name = vintage_name

    @property
    def filename(self):
        """Gets the filename of this Upload.  # noqa: E501


        :return: The filename of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Upload.


        :param filename: The filename of this Upload.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def file_type(self):
        """Gets the file_type of this Upload.  # noqa: E501


        :return: The file_type of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Upload.


        :param file_type: The file_type of this Upload.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def file_size(self):
        """Gets the file_size of this Upload.  # noqa: E501


        :return: The file_size of this Upload.  # noqa: E501
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Upload.


        :param file_size: The file_size of this Upload.  # noqa: E501
        :type: float
        """

        self._file_size = file_size

    @property
    def file_last_modified(self):
        """Gets the file_last_modified of this Upload.  # noqa: E501


        :return: The file_last_modified of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._file_last_modified

    @file_last_modified.setter
    def file_last_modified(self, file_last_modified):
        """Sets the file_last_modified of this Upload.


        :param file_last_modified: The file_last_modified of this Upload.  # noqa: E501
        :type: datetime
        """

        self._file_last_modified = file_last_modified

    @property
    def errors(self):
        """Gets the errors of this Upload.  # noqa: E501


        :return: The errors of this Upload.  # noqa: E501
        :rtype: list[UploadErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Upload.


        :param errors: The errors of this Upload.  # noqa: E501
        :type: list[UploadErrors]
        """

        self._errors = errors

    @property
    def updated_on(self):
        """Gets the updated_on of this Upload.  # noqa: E501


        :return: The updated_on of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Upload.


        :param updated_on: The updated_on of this Upload.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def created_on(self):
        """Gets the created_on of this Upload.  # noqa: E501


        :return: The created_on of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Upload.


        :param created_on: The created_on of this Upload.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this Upload.  # noqa: E501


        :return: The created_by of this Upload.  # noqa: E501
        :rtype: UserSummary
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Upload.


        :param created_by: The created_by of this Upload.  # noqa: E501
        :type: UserSummary
        """

        self._created_by = created_by

    @property
    def status(self):
        """Gets the status of this Upload.  # noqa: E501

        status  # noqa: E501

        :return: The status of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Upload.

        status  # noqa: E501

        :param status: The status of this Upload.  # noqa: E501
        :type: str
        """
        allowed_values = ["initiated", "uploading", "uploaded", "processing", "processed_successful", "processed_failed", "staging", "committed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def vid(self):
        """Gets the vid of this Upload.  # noqa: E501

        vintage id  # noqa: E501

        :return: The vid of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this Upload.

        vintage id  # noqa: E501

        :param vid: The vid of this Upload.  # noqa: E501
        :type: str
        """

        self._vid = vid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Upload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
