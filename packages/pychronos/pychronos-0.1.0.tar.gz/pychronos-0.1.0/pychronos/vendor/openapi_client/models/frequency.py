# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Frequency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    A = "A"
    A_JAN = "A-JAN"
    A_FEB = "A-FEB"
    A_MAR = "A-MAR"
    A_APR = "A-APR"
    A_MAY = "A-MAY"
    A_JUN = "A-JUN"
    A_JUL = "A-JUL"
    A_AUG = "A-AUG"
    A_SEP = "A-SEP"
    A_OCT = "A-OCT"
    A_NOV = "A-NOV"
    Q = "Q"
    Q_JAN = "Q-JAN"
    Q_FEB = "Q-FEB"
    Q_MAR = "Q-MAR"
    Q_APR = "Q-APR"
    Q_MAY = "Q-MAY"
    Q_JUN = "Q-JUN"
    Q_JUL = "Q-JUL"
    Q_AUG = "Q-AUG"
    Q_SEP = "Q-SEP"
    Q_OCT = "Q-OCT"
    Q_NOV = "Q-NOV"
    M = "M"
    W = "W"
    W_MON = "W-MON"
    W_TUE = "W-TUE"
    W_WED = "W-WED"
    W_THU = "W-THU"
    W_FRI = "W-FRI"
    W_SAT = "W-SAT"
    B = "B"
    C = "C"
    D = "D"

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """Frequency - a model defined in OpenAPI"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Frequency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
