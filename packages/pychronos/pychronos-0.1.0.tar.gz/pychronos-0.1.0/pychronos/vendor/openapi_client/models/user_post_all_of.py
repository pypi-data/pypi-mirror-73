# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserPostAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'password': 'str',
        'is_admin': 'bool',
        'can_create_space': 'bool',
        'can_create_group': 'bool'
    }

    attribute_map = {
        'password': 'password',
        'is_admin': 'is_admin',
        'can_create_space': 'can_create_space',
        'can_create_group': 'can_create_group'
    }

    def __init__(self, password=None, is_admin=None, can_create_space=None, can_create_group=None):  # noqa: E501
        """UserPostAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._password = None
        self._is_admin = None
        self._can_create_space = None
        self._can_create_group = None
        self.discriminator = None

        if password is not None:
            self.password = password
        self.is_admin = is_admin
        self.can_create_space = can_create_space
        self.can_create_group = can_create_group

    @property
    def password(self):
        """Gets the password of this UserPostAllOf.  # noqa: E501

        Password  # noqa: E501

        :return: The password of this UserPostAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserPostAllOf.

        Password  # noqa: E501

        :param password: The password of this UserPostAllOf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def is_admin(self):
        """Gets the is_admin of this UserPostAllOf.  # noqa: E501


        :return: The is_admin of this UserPostAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserPostAllOf.


        :param is_admin: The is_admin of this UserPostAllOf.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def can_create_space(self):
        """Gets the can_create_space of this UserPostAllOf.  # noqa: E501


        :return: The can_create_space of this UserPostAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_space

    @can_create_space.setter
    def can_create_space(self, can_create_space):
        """Sets the can_create_space of this UserPostAllOf.


        :param can_create_space: The can_create_space of this UserPostAllOf.  # noqa: E501
        :type: bool
        """

        self._can_create_space = can_create_space

    @property
    def can_create_group(self):
        """Gets the can_create_group of this UserPostAllOf.  # noqa: E501


        :return: The can_create_group of this UserPostAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_group

    @can_create_group.setter
    def can_create_group(self, can_create_group):
        """Sets the can_create_group of this UserPostAllOf.


        :param can_create_group: The can_create_group of this UserPostAllOf.  # noqa: E501
        :type: bool
        """

        self._can_create_group = can_create_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPostAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
