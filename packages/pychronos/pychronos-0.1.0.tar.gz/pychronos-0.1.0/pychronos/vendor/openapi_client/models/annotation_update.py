# coding: utf-8

"""
    ChronosDB swagger

    ChronosDB time series database API  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: apiteam@chronosdb.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnnotationUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'symbol': 'str',
        'text': 'str',
        'format': 'str',
        'attributes': 'dict(str, object)'
    }

    attribute_map = {
        'symbol': 'symbol',
        'text': 'text',
        'format': 'format',
        'attributes': 'attributes'
    }

    def __init__(self, symbol=None, text=None, format=None, attributes=None):  # noqa: E501
        """AnnotationUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._symbol = None
        self._text = None
        self._format = None
        self._attributes = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if text is not None:
            self.text = text
        if format is not None:
            self.format = format
        if attributes is not None:
            self.attributes = attributes

    @property
    def symbol(self):
        """Gets the symbol of this AnnotationUpdate.  # noqa: E501

        annotation symbol  # noqa: E501

        :return: The symbol of this AnnotationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this AnnotationUpdate.

        annotation symbol  # noqa: E501

        :param symbol: The symbol of this AnnotationUpdate.  # noqa: E501
        :type: str
        """
        if symbol is not None and not re.search(r'^[0-9a-zA-Z]{1,10}$', symbol):  # noqa: E501
            raise ValueError(r"Invalid value for `symbol`, must be a follow pattern or equal to `/^[0-9a-zA-Z]{1,10}$/`")  # noqa: E501

        self._symbol = symbol

    @property
    def text(self):
        """Gets the text of this AnnotationUpdate.  # noqa: E501


        :return: The text of this AnnotationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnnotationUpdate.


        :param text: The text of this AnnotationUpdate.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def format(self):
        """Gets the format of this AnnotationUpdate.  # noqa: E501


        :return: The format of this AnnotationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AnnotationUpdate.


        :param format: The format of this AnnotationUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["txt", "md"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def attributes(self):
        """Gets the attributes of this AnnotationUpdate.  # noqa: E501

        json-type object can be added to annotation to store some extra data or metadata  # noqa: E501

        :return: The attributes of this AnnotationUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AnnotationUpdate.

        json-type object can be added to annotation to store some extra data or metadata  # noqa: E501

        :param attributes: The attributes of this AnnotationUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
