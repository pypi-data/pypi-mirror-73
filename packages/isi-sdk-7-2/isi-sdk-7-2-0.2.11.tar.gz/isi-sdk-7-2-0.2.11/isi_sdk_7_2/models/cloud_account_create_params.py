# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 2
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk_7_2.models.cloud_account import CloudAccount  # noqa: F401,E501


class CloudAccountCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_username': 'str',
        'enabled': 'bool',
        'key': 'str',
        'name': 'str',
        'uri': 'str',
        'type': 'str'
    }

    attribute_map = {
        'account_username': 'account_username',
        'enabled': 'enabled',
        'key': 'key',
        'name': 'name',
        'uri': 'uri',
        'type': 'type'
    }

    def __init__(self, account_username=None, enabled=None, key=None, name=None, uri=None, type=None):  # noqa: E501
        """CloudAccountCreateParams - a model defined in Swagger"""  # noqa: E501

        self._account_username = None
        self._enabled = None
        self._key = None
        self._name = None
        self._uri = None
        self._type = None
        self.discriminator = None

        self.account_username = account_username
        if enabled is not None:
            self.enabled = enabled
        self.key = key
        self.name = name
        self.uri = uri
        self.type = type

    @property
    def account_username(self):
        """Gets the account_username of this CloudAccountCreateParams.  # noqa: E501

        The username required to authenticate against the cloud service  # noqa: E501

        :return: The account_username of this CloudAccountCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._account_username

    @account_username.setter
    def account_username(self, account_username):
        """Sets the account_username of this CloudAccountCreateParams.

        The username required to authenticate against the cloud service  # noqa: E501

        :param account_username: The account_username of this CloudAccountCreateParams.  # noqa: E501
        :type: str
        """
        if account_username is None:
            raise ValueError("Invalid value for `account_username`, must not be `None`")  # noqa: E501

        self._account_username = account_username

    @property
    def enabled(self):
        """Gets the enabled of this CloudAccountCreateParams.  # noqa: E501

        Whether or not this account should be used for cloud storage  # noqa: E501

        :return: The enabled of this CloudAccountCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CloudAccountCreateParams.

        Whether or not this account should be used for cloud storage  # noqa: E501

        :param enabled: The enabled of this CloudAccountCreateParams.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def key(self):
        """Gets the key of this CloudAccountCreateParams.  # noqa: E501

        A valid authentication key for connecting to the cloud  # noqa: E501

        :return: The key of this CloudAccountCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CloudAccountCreateParams.

        A valid authentication key for connecting to the cloud  # noqa: E501

        :param key: The key of this CloudAccountCreateParams.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self):
        """Gets the name of this CloudAccountCreateParams.  # noqa: E501

        A unique name for this account  # noqa: E501

        :return: The name of this CloudAccountCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAccountCreateParams.

        A unique name for this account  # noqa: E501

        :param name: The name of this CloudAccountCreateParams.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this CloudAccountCreateParams.  # noqa: E501

        A valid URI pointing to the location of the cloud storage  # noqa: E501

        :return: The uri of this CloudAccountCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CloudAccountCreateParams.

        A valid URI pointing to the location of the cloud storage  # noqa: E501

        :param uri: The uri of this CloudAccountCreateParams.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this CloudAccountCreateParams.  # noqa: E501

        The type of cloud protocol required (e.g., 'ran', 'azure')  # noqa: E501

        :return: The type of this CloudAccountCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudAccountCreateParams.

        The type of cloud protocol required (e.g., 'ran', 'azure')  # noqa: E501

        :param type: The type of this CloudAccountCreateParams.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ran", "azure"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAccountCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
