# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 2
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuditSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audited_zones': 'list[str]',
        'cee_log_time': 'str',
        'cee_server_uris': 'list[str]',
        'config_auditing_enabled': 'bool',
        'config_syslog_enabled': 'bool',
        'hostname': 'str',
        'protocol_auditing_enabled': 'bool',
        'syslog_log_time': 'str'
    }

    attribute_map = {
        'audited_zones': 'audited_zones',
        'cee_log_time': 'cee_log_time',
        'cee_server_uris': 'cee_server_uris',
        'config_auditing_enabled': 'config_auditing_enabled',
        'config_syslog_enabled': 'config_syslog_enabled',
        'hostname': 'hostname',
        'protocol_auditing_enabled': 'protocol_auditing_enabled',
        'syslog_log_time': 'syslog_log_time'
    }

    def __init__(self, audited_zones=None, cee_log_time=None, cee_server_uris=None, config_auditing_enabled=None, config_syslog_enabled=None, hostname=None, protocol_auditing_enabled=None, syslog_log_time=None):  # noqa: E501
        """AuditSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._audited_zones = None
        self._cee_log_time = None
        self._cee_server_uris = None
        self._config_auditing_enabled = None
        self._config_syslog_enabled = None
        self._hostname = None
        self._protocol_auditing_enabled = None
        self._syslog_log_time = None
        self.discriminator = None

        if audited_zones is not None:
            self.audited_zones = audited_zones
        if cee_log_time is not None:
            self.cee_log_time = cee_log_time
        if cee_server_uris is not None:
            self.cee_server_uris = cee_server_uris
        if config_auditing_enabled is not None:
            self.config_auditing_enabled = config_auditing_enabled
        if config_syslog_enabled is not None:
            self.config_syslog_enabled = config_syslog_enabled
        if hostname is not None:
            self.hostname = hostname
        if protocol_auditing_enabled is not None:
            self.protocol_auditing_enabled = protocol_auditing_enabled
        if syslog_log_time is not None:
            self.syslog_log_time = syslog_log_time

    @property
    def audited_zones(self):
        """Gets the audited_zones of this AuditSettingsSettings.  # noqa: E501

        Zones that are audited when protocol auditing is enabled.  # noqa: E501

        :return: The audited_zones of this AuditSettingsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._audited_zones

    @audited_zones.setter
    def audited_zones(self, audited_zones):
        """Sets the audited_zones of this AuditSettingsSettings.

        Zones that are audited when protocol auditing is enabled.  # noqa: E501

        :param audited_zones: The audited_zones of this AuditSettingsSettings.  # noqa: E501
        :type: list[str]
        """

        self._audited_zones = audited_zones

    @property
    def cee_log_time(self):
        """Gets the cee_log_time of this AuditSettingsSettings.  # noqa: E501

        Sets audit CEE forwarder to forward events past a specified date in 'Topic@YYYY-MM-DD HH:MM:SS' format  # noqa: E501

        :return: The cee_log_time of this AuditSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._cee_log_time

    @cee_log_time.setter
    def cee_log_time(self, cee_log_time):
        """Sets the cee_log_time of this AuditSettingsSettings.

        Sets audit CEE forwarder to forward events past a specified date in 'Topic@YYYY-MM-DD HH:MM:SS' format  # noqa: E501

        :param cee_log_time: The cee_log_time of this AuditSettingsSettings.  # noqa: E501
        :type: str
        """

        self._cee_log_time = cee_log_time

    @property
    def cee_server_uris(self):
        """Gets the cee_server_uris of this AuditSettingsSettings.  # noqa: E501

        URIs of backend CEE servers to which to send audit logs  # noqa: E501

        :return: The cee_server_uris of this AuditSettingsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._cee_server_uris

    @cee_server_uris.setter
    def cee_server_uris(self, cee_server_uris):
        """Sets the cee_server_uris of this AuditSettingsSettings.

        URIs of backend CEE servers to which to send audit logs  # noqa: E501

        :param cee_server_uris: The cee_server_uris of this AuditSettingsSettings.  # noqa: E501
        :type: list[str]
        """

        self._cee_server_uris = cee_server_uris

    @property
    def config_auditing_enabled(self):
        """Gets the config_auditing_enabled of this AuditSettingsSettings.  # noqa: E501

        Enables/disables PAPI configuration audit  # noqa: E501

        :return: The config_auditing_enabled of this AuditSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._config_auditing_enabled

    @config_auditing_enabled.setter
    def config_auditing_enabled(self, config_auditing_enabled):
        """Sets the config_auditing_enabled of this AuditSettingsSettings.

        Enables/disables PAPI configuration audit  # noqa: E501

        :param config_auditing_enabled: The config_auditing_enabled of this AuditSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._config_auditing_enabled = config_auditing_enabled

    @property
    def config_syslog_enabled(self):
        """Gets the config_syslog_enabled of this AuditSettingsSettings.  # noqa: E501

        Enables/disables config audit syslog forwarding.  # noqa: E501

        :return: The config_syslog_enabled of this AuditSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._config_syslog_enabled

    @config_syslog_enabled.setter
    def config_syslog_enabled(self, config_syslog_enabled):
        """Sets the config_syslog_enabled of this AuditSettingsSettings.

        Enables/disables config audit syslog forwarding.  # noqa: E501

        :param config_syslog_enabled: The config_syslog_enabled of this AuditSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._config_syslog_enabled = config_syslog_enabled

    @property
    def hostname(self):
        """Gets the hostname of this AuditSettingsSettings.  # noqa: E501

        Hostname reported in protocol events from this cluster  # noqa: E501

        :return: The hostname of this AuditSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AuditSettingsSettings.

        Hostname reported in protocol events from this cluster  # noqa: E501

        :param hostname: The hostname of this AuditSettingsSettings.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def protocol_auditing_enabled(self):
        """Gets the protocol_auditing_enabled of this AuditSettingsSettings.  # noqa: E501

        Enables/disables auditing of I/O requests  # noqa: E501

        :return: The protocol_auditing_enabled of this AuditSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._protocol_auditing_enabled

    @protocol_auditing_enabled.setter
    def protocol_auditing_enabled(self, protocol_auditing_enabled):
        """Sets the protocol_auditing_enabled of this AuditSettingsSettings.

        Enables/disables auditing of I/O requests  # noqa: E501

        :param protocol_auditing_enabled: The protocol_auditing_enabled of this AuditSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._protocol_auditing_enabled = protocol_auditing_enabled

    @property
    def syslog_log_time(self):
        """Gets the syslog_log_time of this AuditSettingsSettings.  # noqa: E501

        Sets audit syslog forwarder to forward events past a specified date in 'Topic@YYYY-MM-DD HH:MM:SS' format  # noqa: E501

        :return: The syslog_log_time of this AuditSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._syslog_log_time

    @syslog_log_time.setter
    def syslog_log_time(self, syslog_log_time):
        """Sets the syslog_log_time of this AuditSettingsSettings.

        Sets audit syslog forwarder to forward events past a specified date in 'Topic@YYYY-MM-DD HH:MM:SS' format  # noqa: E501

        :param syslog_log_time: The syslog_log_time of this AuditSettingsSettings.  # noqa: E501
        :type: str
        """

        self._syslog_log_time = syslog_log_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
