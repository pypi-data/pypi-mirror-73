# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 2
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk_7_2.models.cloud_settings_settings_sleep_timeout_archive import CloudSettingsSettingsSleepTimeoutArchive  # noqa: F401,E501
from isi_sdk_7_2.models.empty import Empty  # noqa: F401,E501


class CloudSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archive_snapshot_files': 'str',
        'available_cluster_guids': 'list[str]',
        'cloud_policy_defaults': 'Empty',
        'cluster_access': 'list[str]',
        'max_retries_archive': 'int',
        'max_retries_cache_invalidation': 'int',
        'max_retries_cloud_garbage_collection': 'int',
        'max_retries_local_garbage_collection': 'int',
        'max_retries_read_ahead': 'int',
        'max_retries_recall': 'int',
        'max_retries_writeback': 'int',
        'retry_coefficient_archive': 'str',
        'retry_coefficient_cache_invalidation': 'str',
        'retry_coefficient_cloud_garbage_collection': 'str',
        'retry_coefficient_local_garbage_collection': 'str',
        'retry_coefficient_read_ahead': 'str',
        'retry_coefficient_recall': 'str',
        'retry_coefficient_writeback': 'str',
        'sleep_timeout_archive': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_cache_invalidation': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_cloud_garbage_collection': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_local_garbage_collection': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_read_ahead': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_recall': 'CloudSettingsSettingsSleepTimeoutArchive',
        'sleep_timeout_writeback': 'CloudSettingsSettingsSleepTimeoutArchive'
    }

    attribute_map = {
        'archive_snapshot_files': 'archive_snapshot_files',
        'available_cluster_guids': 'available_cluster_guids',
        'cloud_policy_defaults': 'cloud_policy_defaults',
        'cluster_access': 'cluster_access',
        'max_retries_archive': 'max_retries_archive',
        'max_retries_cache_invalidation': 'max_retries_cache_invalidation',
        'max_retries_cloud_garbage_collection': 'max_retries_cloud_garbage_collection',
        'max_retries_local_garbage_collection': 'max_retries_local_garbage_collection',
        'max_retries_read_ahead': 'max_retries_read_ahead',
        'max_retries_recall': 'max_retries_recall',
        'max_retries_writeback': 'max_retries_writeback',
        'retry_coefficient_archive': 'retry_coefficient_archive',
        'retry_coefficient_cache_invalidation': 'retry_coefficient_cache_invalidation',
        'retry_coefficient_cloud_garbage_collection': 'retry_coefficient_cloud_garbage_collection',
        'retry_coefficient_local_garbage_collection': 'retry_coefficient_local_garbage_collection',
        'retry_coefficient_read_ahead': 'retry_coefficient_read_ahead',
        'retry_coefficient_recall': 'retry_coefficient_recall',
        'retry_coefficient_writeback': 'retry_coefficient_writeback',
        'sleep_timeout_archive': 'sleep_timeout_archive',
        'sleep_timeout_cache_invalidation': 'sleep_timeout_cache_invalidation',
        'sleep_timeout_cloud_garbage_collection': 'sleep_timeout_cloud_garbage_collection',
        'sleep_timeout_local_garbage_collection': 'sleep_timeout_local_garbage_collection',
        'sleep_timeout_read_ahead': 'sleep_timeout_read_ahead',
        'sleep_timeout_recall': 'sleep_timeout_recall',
        'sleep_timeout_writeback': 'sleep_timeout_writeback'
    }

    def __init__(self, archive_snapshot_files=None, available_cluster_guids=None, cloud_policy_defaults=None, cluster_access=None, max_retries_archive=None, max_retries_cache_invalidation=None, max_retries_cloud_garbage_collection=None, max_retries_local_garbage_collection=None, max_retries_read_ahead=None, max_retries_recall=None, max_retries_writeback=None, retry_coefficient_archive=None, retry_coefficient_cache_invalidation=None, retry_coefficient_cloud_garbage_collection=None, retry_coefficient_local_garbage_collection=None, retry_coefficient_read_ahead=None, retry_coefficient_recall=None, retry_coefficient_writeback=None, sleep_timeout_archive=None, sleep_timeout_cache_invalidation=None, sleep_timeout_cloud_garbage_collection=None, sleep_timeout_local_garbage_collection=None, sleep_timeout_read_ahead=None, sleep_timeout_recall=None, sleep_timeout_writeback=None):  # noqa: E501
        """CloudSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._archive_snapshot_files = None
        self._available_cluster_guids = None
        self._cloud_policy_defaults = None
        self._cluster_access = None
        self._max_retries_archive = None
        self._max_retries_cache_invalidation = None
        self._max_retries_cloud_garbage_collection = None
        self._max_retries_local_garbage_collection = None
        self._max_retries_read_ahead = None
        self._max_retries_recall = None
        self._max_retries_writeback = None
        self._retry_coefficient_archive = None
        self._retry_coefficient_cache_invalidation = None
        self._retry_coefficient_cloud_garbage_collection = None
        self._retry_coefficient_local_garbage_collection = None
        self._retry_coefficient_read_ahead = None
        self._retry_coefficient_recall = None
        self._retry_coefficient_writeback = None
        self._sleep_timeout_archive = None
        self._sleep_timeout_cache_invalidation = None
        self._sleep_timeout_cloud_garbage_collection = None
        self._sleep_timeout_local_garbage_collection = None
        self._sleep_timeout_read_ahead = None
        self._sleep_timeout_recall = None
        self._sleep_timeout_writeback = None
        self.discriminator = None

        if archive_snapshot_files is not None:
            self.archive_snapshot_files = archive_snapshot_files
        if available_cluster_guids is not None:
            self.available_cluster_guids = available_cluster_guids
        if cloud_policy_defaults is not None:
            self.cloud_policy_defaults = cloud_policy_defaults
        if cluster_access is not None:
            self.cluster_access = cluster_access
        if max_retries_archive is not None:
            self.max_retries_archive = max_retries_archive
        if max_retries_cache_invalidation is not None:
            self.max_retries_cache_invalidation = max_retries_cache_invalidation
        if max_retries_cloud_garbage_collection is not None:
            self.max_retries_cloud_garbage_collection = max_retries_cloud_garbage_collection
        if max_retries_local_garbage_collection is not None:
            self.max_retries_local_garbage_collection = max_retries_local_garbage_collection
        if max_retries_read_ahead is not None:
            self.max_retries_read_ahead = max_retries_read_ahead
        if max_retries_recall is not None:
            self.max_retries_recall = max_retries_recall
        if max_retries_writeback is not None:
            self.max_retries_writeback = max_retries_writeback
        if retry_coefficient_archive is not None:
            self.retry_coefficient_archive = retry_coefficient_archive
        if retry_coefficient_cache_invalidation is not None:
            self.retry_coefficient_cache_invalidation = retry_coefficient_cache_invalidation
        if retry_coefficient_cloud_garbage_collection is not None:
            self.retry_coefficient_cloud_garbage_collection = retry_coefficient_cloud_garbage_collection
        if retry_coefficient_local_garbage_collection is not None:
            self.retry_coefficient_local_garbage_collection = retry_coefficient_local_garbage_collection
        if retry_coefficient_read_ahead is not None:
            self.retry_coefficient_read_ahead = retry_coefficient_read_ahead
        if retry_coefficient_recall is not None:
            self.retry_coefficient_recall = retry_coefficient_recall
        if retry_coefficient_writeback is not None:
            self.retry_coefficient_writeback = retry_coefficient_writeback
        if sleep_timeout_archive is not None:
            self.sleep_timeout_archive = sleep_timeout_archive
        if sleep_timeout_cache_invalidation is not None:
            self.sleep_timeout_cache_invalidation = sleep_timeout_cache_invalidation
        if sleep_timeout_cloud_garbage_collection is not None:
            self.sleep_timeout_cloud_garbage_collection = sleep_timeout_cloud_garbage_collection
        if sleep_timeout_local_garbage_collection is not None:
            self.sleep_timeout_local_garbage_collection = sleep_timeout_local_garbage_collection
        if sleep_timeout_read_ahead is not None:
            self.sleep_timeout_read_ahead = sleep_timeout_read_ahead
        if sleep_timeout_recall is not None:
            self.sleep_timeout_recall = sleep_timeout_recall
        if sleep_timeout_writeback is not None:
            self.sleep_timeout_writeback = sleep_timeout_writeback

    @property
    def archive_snapshot_files(self):
        """Gets the archive_snapshot_files of this CloudSettingsSettings.  # noqa: E501

        Whether files which have had a snapshot taken should be moved to the cloud.  # noqa: E501

        :return: The archive_snapshot_files of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._archive_snapshot_files

    @archive_snapshot_files.setter
    def archive_snapshot_files(self, archive_snapshot_files):
        """Sets the archive_snapshot_files of this CloudSettingsSettings.

        Whether files which have had a snapshot taken should be moved to the cloud.  # noqa: E501

        :param archive_snapshot_files: The archive_snapshot_files of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if archive_snapshot_files not in allowed_values:
            raise ValueError(
                "Invalid value for `archive_snapshot_files` ({0}), must be one of {1}"  # noqa: E501
                .format(archive_snapshot_files, allowed_values)
            )

        self._archive_snapshot_files = archive_snapshot_files

    @property
    def available_cluster_guids(self):
        """Gets the available_cluster_guids of this CloudSettingsSettings.  # noqa: E501

        A list of guids for clusters which have used this cluster for cloud storage.  # noqa: E501

        :return: The available_cluster_guids of this CloudSettingsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_cluster_guids

    @available_cluster_guids.setter
    def available_cluster_guids(self, available_cluster_guids):
        """Sets the available_cluster_guids of this CloudSettingsSettings.

        A list of guids for clusters which have used this cluster for cloud storage.  # noqa: E501

        :param available_cluster_guids: The available_cluster_guids of this CloudSettingsSettings.  # noqa: E501
        :type: list[str]
        """

        self._available_cluster_guids = available_cluster_guids

    @property
    def cloud_policy_defaults(self):
        """Gets the cloud_policy_defaults of this CloudSettingsSettings.  # noqa: E501

        The default filepool policy values for cloud pools.  # noqa: E501

        :return: The cloud_policy_defaults of this CloudSettingsSettings.  # noqa: E501
        :rtype: Empty
        """
        return self._cloud_policy_defaults

    @cloud_policy_defaults.setter
    def cloud_policy_defaults(self, cloud_policy_defaults):
        """Sets the cloud_policy_defaults of this CloudSettingsSettings.

        The default filepool policy values for cloud pools.  # noqa: E501

        :param cloud_policy_defaults: The cloud_policy_defaults of this CloudSettingsSettings.  # noqa: E501
        :type: Empty
        """

        self._cloud_policy_defaults = cloud_policy_defaults

    @property
    def cluster_access(self):
        """Gets the cluster_access of this CloudSettingsSettings.  # noqa: E501

        A list of guids for which this cluster has ownership of cloud storage.  # noqa: E501

        :return: The cluster_access of this CloudSettingsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_access

    @cluster_access.setter
    def cluster_access(self, cluster_access):
        """Sets the cluster_access of this CloudSettingsSettings.

        A list of guids for which this cluster has ownership of cloud storage.  # noqa: E501

        :param cluster_access: The cluster_access of this CloudSettingsSettings.  # noqa: E501
        :type: list[str]
        """

        self._cluster_access = cluster_access

    @property
    def max_retries_archive(self):
        """Gets the max_retries_archive of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry an archive operation before failing.  # noqa: E501

        :return: The max_retries_archive of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_archive

    @max_retries_archive.setter
    def max_retries_archive(self, max_retries_archive):
        """Sets the max_retries_archive of this CloudSettingsSettings.

        The maximum number of times to retry an archive operation before failing.  # noqa: E501

        :param max_retries_archive: The max_retries_archive of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_archive = max_retries_archive

    @property
    def max_retries_cache_invalidation(self):
        """Gets the max_retries_cache_invalidation of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry a cache invalidation operation before failing.  # noqa: E501

        :return: The max_retries_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_cache_invalidation

    @max_retries_cache_invalidation.setter
    def max_retries_cache_invalidation(self, max_retries_cache_invalidation):
        """Sets the max_retries_cache_invalidation of this CloudSettingsSettings.

        The maximum number of times to retry a cache invalidation operation before failing.  # noqa: E501

        :param max_retries_cache_invalidation: The max_retries_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_cache_invalidation = max_retries_cache_invalidation

    @property
    def max_retries_cloud_garbage_collection(self):
        """Gets the max_retries_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry cloud garbage collection before failing.  # noqa: E501

        :return: The max_retries_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_cloud_garbage_collection

    @max_retries_cloud_garbage_collection.setter
    def max_retries_cloud_garbage_collection(self, max_retries_cloud_garbage_collection):
        """Sets the max_retries_cloud_garbage_collection of this CloudSettingsSettings.

        The maximum number of times to retry cloud garbage collection before failing.  # noqa: E501

        :param max_retries_cloud_garbage_collection: The max_retries_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_cloud_garbage_collection = max_retries_cloud_garbage_collection

    @property
    def max_retries_local_garbage_collection(self):
        """Gets the max_retries_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry local garbage collection before failing.  # noqa: E501

        :return: The max_retries_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_local_garbage_collection

    @max_retries_local_garbage_collection.setter
    def max_retries_local_garbage_collection(self, max_retries_local_garbage_collection):
        """Sets the max_retries_local_garbage_collection of this CloudSettingsSettings.

        The maximum number of times to retry local garbage collection before failing.  # noqa: E501

        :param max_retries_local_garbage_collection: The max_retries_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_local_garbage_collection = max_retries_local_garbage_collection

    @property
    def max_retries_read_ahead(self):
        """Gets the max_retries_read_ahead of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry a read ahead operation before failing.  # noqa: E501

        :return: The max_retries_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_read_ahead

    @max_retries_read_ahead.setter
    def max_retries_read_ahead(self, max_retries_read_ahead):
        """Sets the max_retries_read_ahead of this CloudSettingsSettings.

        The maximum number of times to retry a read ahead operation before failing.  # noqa: E501

        :param max_retries_read_ahead: The max_retries_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_read_ahead = max_retries_read_ahead

    @property
    def max_retries_recall(self):
        """Gets the max_retries_recall of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry a recall operation before failing.  # noqa: E501

        :return: The max_retries_recall of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_recall

    @max_retries_recall.setter
    def max_retries_recall(self, max_retries_recall):
        """Sets the max_retries_recall of this CloudSettingsSettings.

        The maximum number of times to retry a recall operation before failing.  # noqa: E501

        :param max_retries_recall: The max_retries_recall of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_recall = max_retries_recall

    @property
    def max_retries_writeback(self):
        """Gets the max_retries_writeback of this CloudSettingsSettings.  # noqa: E501

        The maximum number of times to retry a writeback operation before failing.  # noqa: E501

        :return: The max_retries_writeback of this CloudSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_writeback

    @max_retries_writeback.setter
    def max_retries_writeback(self, max_retries_writeback):
        """Sets the max_retries_writeback of this CloudSettingsSettings.

        The maximum number of times to retry a writeback operation before failing.  # noqa: E501

        :param max_retries_writeback: The max_retries_writeback of this CloudSettingsSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_writeback = max_retries_writeback

    @property
    def retry_coefficient_archive(self):
        """Gets the retry_coefficient_archive of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive archive attempts.  # noqa: E501

        :return: The retry_coefficient_archive of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_archive

    @retry_coefficient_archive.setter
    def retry_coefficient_archive(self, retry_coefficient_archive):
        """Sets the retry_coefficient_archive of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive archive attempts.  # noqa: E501

        :param retry_coefficient_archive: The retry_coefficient_archive of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_archive = retry_coefficient_archive

    @property
    def retry_coefficient_cache_invalidation(self):
        """Gets the retry_coefficient_cache_invalidation of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.  # noqa: E501

        :return: The retry_coefficient_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_cache_invalidation

    @retry_coefficient_cache_invalidation.setter
    def retry_coefficient_cache_invalidation(self, retry_coefficient_cache_invalidation):
        """Sets the retry_coefficient_cache_invalidation of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.  # noqa: E501

        :param retry_coefficient_cache_invalidation: The retry_coefficient_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_cache_invalidation = retry_coefficient_cache_invalidation

    @property
    def retry_coefficient_cloud_garbage_collection(self):
        """Gets the retry_coefficient_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.  # noqa: E501

        :return: The retry_coefficient_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_cloud_garbage_collection

    @retry_coefficient_cloud_garbage_collection.setter
    def retry_coefficient_cloud_garbage_collection(self, retry_coefficient_cloud_garbage_collection):
        """Sets the retry_coefficient_cloud_garbage_collection of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.  # noqa: E501

        :param retry_coefficient_cloud_garbage_collection: The retry_coefficient_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_cloud_garbage_collection = retry_coefficient_cloud_garbage_collection

    @property
    def retry_coefficient_local_garbage_collection(self):
        """Gets the retry_coefficient_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.  # noqa: E501

        :return: The retry_coefficient_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_local_garbage_collection

    @retry_coefficient_local_garbage_collection.setter
    def retry_coefficient_local_garbage_collection(self, retry_coefficient_local_garbage_collection):
        """Sets the retry_coefficient_local_garbage_collection of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.  # noqa: E501

        :param retry_coefficient_local_garbage_collection: The retry_coefficient_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_local_garbage_collection = retry_coefficient_local_garbage_collection

    @property
    def retry_coefficient_read_ahead(self):
        """Gets the retry_coefficient_read_ahead of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.  # noqa: E501

        :return: The retry_coefficient_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_read_ahead

    @retry_coefficient_read_ahead.setter
    def retry_coefficient_read_ahead(self, retry_coefficient_read_ahead):
        """Sets the retry_coefficient_read_ahead of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.  # noqa: E501

        :param retry_coefficient_read_ahead: The retry_coefficient_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_read_ahead = retry_coefficient_read_ahead

    @property
    def retry_coefficient_recall(self):
        """Gets the retry_coefficient_recall of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive recall attempts.  # noqa: E501

        :return: The retry_coefficient_recall of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_recall

    @retry_coefficient_recall.setter
    def retry_coefficient_recall(self, retry_coefficient_recall):
        """Sets the retry_coefficient_recall of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive recall attempts.  # noqa: E501

        :param retry_coefficient_recall: The retry_coefficient_recall of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_recall = retry_coefficient_recall

    @property
    def retry_coefficient_writeback(self):
        """Gets the retry_coefficient_writeback of this CloudSettingsSettings.  # noqa: E501

        Coefficients in the quadratic function for determining the rest period between successive writeback attempts.  # noqa: E501

        :return: The retry_coefficient_writeback of this CloudSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._retry_coefficient_writeback

    @retry_coefficient_writeback.setter
    def retry_coefficient_writeback(self, retry_coefficient_writeback):
        """Sets the retry_coefficient_writeback of this CloudSettingsSettings.

        Coefficients in the quadratic function for determining the rest period between successive writeback attempts.  # noqa: E501

        :param retry_coefficient_writeback: The retry_coefficient_writeback of this CloudSettingsSettings.  # noqa: E501
        :type: str
        """

        self._retry_coefficient_writeback = retry_coefficient_writeback

    @property
    def sleep_timeout_archive(self):
        """Gets the sleep_timeout_archive of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file archive operations.  # noqa: E501

        :return: The sleep_timeout_archive of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_archive

    @sleep_timeout_archive.setter
    def sleep_timeout_archive(self, sleep_timeout_archive):
        """Sets the sleep_timeout_archive of this CloudSettingsSettings.

        Amount of time to wait between successive file archive operations.  # noqa: E501

        :param sleep_timeout_archive: The sleep_timeout_archive of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_archive = sleep_timeout_archive

    @property
    def sleep_timeout_cache_invalidation(self):
        """Gets the sleep_timeout_cache_invalidation of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file cache_invalidation operations.  # noqa: E501

        :return: The sleep_timeout_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_cache_invalidation

    @sleep_timeout_cache_invalidation.setter
    def sleep_timeout_cache_invalidation(self, sleep_timeout_cache_invalidation):
        """Sets the sleep_timeout_cache_invalidation of this CloudSettingsSettings.

        Amount of time to wait between successive file cache_invalidation operations.  # noqa: E501

        :param sleep_timeout_cache_invalidation: The sleep_timeout_cache_invalidation of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_cache_invalidation = sleep_timeout_cache_invalidation

    @property
    def sleep_timeout_cloud_garbage_collection(self):
        """Gets the sleep_timeout_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file cloud garbage collection operations.  # noqa: E501

        :return: The sleep_timeout_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_cloud_garbage_collection

    @sleep_timeout_cloud_garbage_collection.setter
    def sleep_timeout_cloud_garbage_collection(self, sleep_timeout_cloud_garbage_collection):
        """Sets the sleep_timeout_cloud_garbage_collection of this CloudSettingsSettings.

        Amount of time to wait between successive file cloud garbage collection operations.  # noqa: E501

        :param sleep_timeout_cloud_garbage_collection: The sleep_timeout_cloud_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_cloud_garbage_collection = sleep_timeout_cloud_garbage_collection

    @property
    def sleep_timeout_local_garbage_collection(self):
        """Gets the sleep_timeout_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file local garbage collection operations.  # noqa: E501

        :return: The sleep_timeout_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_local_garbage_collection

    @sleep_timeout_local_garbage_collection.setter
    def sleep_timeout_local_garbage_collection(self, sleep_timeout_local_garbage_collection):
        """Sets the sleep_timeout_local_garbage_collection of this CloudSettingsSettings.

        Amount of time to wait between successive file local garbage collection operations.  # noqa: E501

        :param sleep_timeout_local_garbage_collection: The sleep_timeout_local_garbage_collection of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_local_garbage_collection = sleep_timeout_local_garbage_collection

    @property
    def sleep_timeout_read_ahead(self):
        """Gets the sleep_timeout_read_ahead of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file read ahead operations.  # noqa: E501

        :return: The sleep_timeout_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_read_ahead

    @sleep_timeout_read_ahead.setter
    def sleep_timeout_read_ahead(self, sleep_timeout_read_ahead):
        """Sets the sleep_timeout_read_ahead of this CloudSettingsSettings.

        Amount of time to wait between successive file read ahead operations.  # noqa: E501

        :param sleep_timeout_read_ahead: The sleep_timeout_read_ahead of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_read_ahead = sleep_timeout_read_ahead

    @property
    def sleep_timeout_recall(self):
        """Gets the sleep_timeout_recall of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file recall operations.  # noqa: E501

        :return: The sleep_timeout_recall of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_recall

    @sleep_timeout_recall.setter
    def sleep_timeout_recall(self, sleep_timeout_recall):
        """Sets the sleep_timeout_recall of this CloudSettingsSettings.

        Amount of time to wait between successive file recall operations.  # noqa: E501

        :param sleep_timeout_recall: The sleep_timeout_recall of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_recall = sleep_timeout_recall

    @property
    def sleep_timeout_writeback(self):
        """Gets the sleep_timeout_writeback of this CloudSettingsSettings.  # noqa: E501

        Amount of time to wait between successive file writeback operations.  # noqa: E501

        :return: The sleep_timeout_writeback of this CloudSettingsSettings.  # noqa: E501
        :rtype: CloudSettingsSettingsSleepTimeoutArchive
        """
        return self._sleep_timeout_writeback

    @sleep_timeout_writeback.setter
    def sleep_timeout_writeback(self, sleep_timeout_writeback):
        """Sets the sleep_timeout_writeback of this CloudSettingsSettings.

        Amount of time to wait between successive file writeback operations.  # noqa: E501

        :param sleep_timeout_writeback: The sleep_timeout_writeback of this CloudSettingsSettings.  # noqa: E501
        :type: CloudSettingsSettingsSleepTimeoutArchive
        """

        self._sleep_timeout_writeback = sleep_timeout_writeback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
