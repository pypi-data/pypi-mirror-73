from __future__ import absolute_import

from enaml.widgets.api import (MainWindow, Container, DockArea)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, TabLayout

from .fileio import FileView, MaskView
from .guessparam import GuessParamView
from .lineplot import PlotMain, AdjustEmissionLine
from .image2D import ImageMain, ChooseElementAdvanced
from .rgb_image import ImageRGB
from .fit import (FitView, ElementEdit, ParameterEdit,
                  OtherSettingEdit, EditPileupPeak,
                  AutoFindElements, OutputSetup, SelectStandard,
                  SaveQuantCalibration)
from .setting import SettingView
from .quant_analysis import QuantAnalysisView, ViewQuantCalibrationData


enamldef XRFGui(MainWindow): main_window:
    #always_on_top = True
    #title = 'PyXRF: X-ray Fluorescence Analysis Tool'
    attr io_model
    attr param_model
    attr plot_model
    attr img_model_adv
    attr img_model_rgb
    attr fit_model
    attr setting_model
    attr Param
    attr logmodel   # to output log information at GUI level
    title << io_model.window_title

    Container:
        DockArea:
            layout = HSplitLayout(
                TabLayout('file_view', 'fitting_view', 'setting_view', 'quant_analysis_view'),
                TabLayout('lineplot_view', 'image_view', 'image_rgb'),
                )
            FileView:
                closable = False
                title = 'File IO'
                io_model = main_window.io_model
                param_model = main_window.param_model
                plot_model = main_window.plot_model
                # img_model_adv = main_window.img_model_adv
                fit_model = main_window.fit_model
                setting_model = main_window.setting_model

                mask_edit = MaskView(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    io_model = main_window.io_model)

                name = 'file_view'
            #GuessParamView:
            #    closable = False
            #    title = 'Initial Parameter Guess '
            #    name = 'param_guess_view'
            #    param_model = main_window.param_model
            #    # io_model = main_window.io_model
            #    plot_model = main_window.plot_model
            #    fit_model = main_window.fit_model
            #    edit_pileup = EditPileupPeak(
            #        visible=False,
            #        destroy_on_close=False,
            #        parent=main_window,
            #        param_model=main_window.param_model)
            FitView:
                closable = False
                title = 'Fit     '
                plot_model = main_window.plot_model
                param_model = main_window.param_model
                fit_model = main_window.fit_model
                img_model_adv = main_window.img_model_adv
                img_model_rgb = main_window.img_model_rgb
                setting_model = main_window.setting_model

                element_edit = ElementEdit(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    fit_model=main_window.fit_model,
                    param_model=main_window.param_model,
                    plot_model=main_window.plot_model,
                    setting_model = main_window.setting_model)
                parameter_edit = ParameterEdit(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    fit_model=main_window.fit_model,
                    param_model=main_window.param_model,
                    plot_model=main_window.plot_model,
                    setting_model = main_window.setting_model)
                autofind_edit = AutoFindElements(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    parameter_model=main_window.param_model,
                    plot_model=main_window.plot_model)
                select_standard_edit = SelectStandard(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    fit_model=main_window.fit_model)
                save_quant_calibration_edit = SaveQuantCalibration(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    fit_model=main_window.fit_model)
                pileup_edit = EditPileupPeak(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    param_model=main_window.param_model,
                    plot_model=main_window.plot_model)
                othersetting_edit = OtherSettingEdit(
                    visible=False,
                    destroy_on_close=False,
                    #parent=main_window,
                    fit_model=main_window.fit_model,
                    param_model=main_window.param_model,
                    plot_model=main_window.plot_model,
                    setting_model = main_window.setting_model)
                output_edit = OutputSetup(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    fit_model=main_window.fit_model)
                name = 'fitting_view'
            SettingView:
                closable = False
                title = 'ROI Setting'
                io_model = main_window.io_model
                plot_model = main_window.plot_model
                param_model = main_window.param_model
                img_model_adv = main_window.img_model_adv
                img_model_rgb = main_window.img_model_rgb
                setting_model = main_window.setting_model
                name = 'setting_view'
            QuantAnalysisView:
                closable=False
                title = 'Quantitative Analysis'
                io_model = main_window.io_model
                plot_model = main_window.plot_model
                param_model = main_window.param_model
                img_model_adv = main_window.img_model_adv
                name = 'quant_analysis_view'
                view_quant_calibration_edit = ViewQuantCalibrationData(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    preview_text="",
                    img_model_adv=main_window.img_model_adv)
            PlotMain:
                closable = False
                title = 'Spectrum View'
                # io_model = io_model
                plot_model = main_window.plot_model
                fit_model=main_window.fit_model
                param_model = main_window.param_model
                adjust_emission_line = AdjustEmissionLine(
                    visible=False,
                    destroy_on_close=False,
                    parent=main_window,
                    plot_model=main_window.plot_model)
                name = 'lineplot_view'
            ImageMain:
                closable = False
                title = 'Element Map'
                #img_model = main_window.img_model
                img_model_adv = main_window.img_model_adv
                choose_element = ChooseElementAdvanced(
                    visible=False, destroy_on_close=False,
                    always_on_top=True,
                    parent=main_window,
                    img_model=main_window.img_model_adv)
                fit_model = main_window.fit_model
                name = 'image_view'
            ImageRGB:
                closable = False
                title = 'Element RGB '
                img_model_adv = main_window.img_model_rgb
                #plot_model = main_window.plot_model
                name = 'image_rgb'
