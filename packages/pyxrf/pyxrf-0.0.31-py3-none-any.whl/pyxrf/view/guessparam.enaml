from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, PopupView,
                               SpinBox, ScrollArea, Window, GroupBox, RadioButton)
from enaml.layout.api import (hbox, vbox, HSplitLayout, VSplitLayout,
                              spacer, grid)
from enaml.core.api import Include, Looper
from enaml.stdlib.fields import FloatField as DefaultFloatField
from enaml.layout.geometry import Box
from enaml.stdlib.message_box import MessageBox, warning, information

import numpy as np
import six

from ..model.guessparam import autofit_param
from skbeam.core.fitting.xrf_model import (K_LINE, L_LINE, M_LINE)


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync'] #['return_pressed']


enamldef GuessParamView(DockItem): param_view:
    attr param_model
    # attr io_model
    attr plot_model
    attr fit_model
    attr edit_pileup

    Container:
        constraints = [
            vbox(
                #hbox(CB, spacer),
                #hbox(new_param_load, spacer),
                top_cntr,
                hbox(find_btn, spacer),
                hbox(cb_select, intensity_lb, intensity_fd,
                     manual_add, spacer),
                pre_fit,
                #hbox(saveas_btn, spacer),
            ),
        ]

        ScrollArea: top_cntr:
            constraints = [height <= 60]
            Form:
                row_spacing = -1
                Looper: looper:
                    #iterable << sorted([v for k,v in six.iteritems(param_model.param_new) if v.get('description')],
                    #                   key=lambda x: x['description'])
                    iterable << autofit_param
                    Label:
                        text = param_model.param_new[loop_item]['description']
                        #tool_tip = loop_item['tool_tip']
                        maximum_size = 140
                    Container:
                        padding = Box(2, 2, 2, 2)
                        constraints = [hbox(ff, pb)]
                        FloatField: ff:
                            value := param_model.param_new[loop_item]['value']
                            maximum_size = 160
                        PushButton: pb:
                            text = 'Default'
                            maximum_size = 100
                            clicked ::
                                ff.value = param_model.param_new[loop_item]['default']

                Looper: looper:
                    iterable << list(sorted([v for k,v in six.iteritems(param_model.param_new['non_fitting_values'])
                                            if k in ["energy_bound_low", "energy_bound_high"] ]))
                    Label:
                        text = loop_item['description']
                        maximum_size = 140
                    Container:
                        padding = Box(2, 2, 2, 2)
                        constraints = [hbox(ff_bound, pb)]
                        FloatField: ff_bound:
                            value := loop_item['value']
                            maximum_size = 100
                        PushButton: pb:
                            text = 'Default'
                            maximum_size = 100
                            clicked ::
                                ff_bound.value = loop_item['default_value']

        PushButton: find_btn:
            text = 'Automatic Element Finding'
            enabled = True
            #status_tip = 'Not Running.'
            clicked ::
                param_model.find_peak()
                param_model.EC.order()
                param_model.update_name_list()

                param_model.EC.turn_on_all()
                param_model.data_for_plot()
                #status_tip = 'Running'

                # update experimental plots in case the coefficients change
                plot_model.parameters = param_model.param_new
                plot_model.plot_experiment()

                #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                #                                    param_model.total_l, param_model.total_m,
                #                                    param_model.total_pileup)

                plot_model.plot_fit(param_model.prefit_x,
                                    param_model.total_y,
                                    param_model.auto_fit_all)

                # For plotting purposes, otherwise plot will not update
                plot_model.show_fit_opt = False
                plot_model.show_fit_opt = True

        ComboBox: cb_select:
            items = ['Select Lines'] +\
                    K_LINE + L_LINE + M_LINE
            index = 0
            index ::
                if cb_select.index > 0:
                    param_model.e_name = cb_select.selected_item

        Label: intensity_lb:
            text = 'Peak Int'
        FloatField: intensity_fd:
            value := param_model.add_element_intensity
            submit_triggers = ['auto_sync']
            maximum_size = 60

        PushButton: manual_add:
            text = 'Add'
            clicked ::
                param_model.manual_input()
                param_model.EC.update_peak_ratio()
                param_model.update_name_list()
                param_model.data_for_plot()
                #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                #                                    param_model.total_l, param_model.total_m,
                #                                    param_model.total_pileup)
                plot_model.plot_fit(param_model.prefit_x,
                                    param_model.total_y,
                                    param_model.auto_fit_all)
                # For plotting purposes, otherwise plot will not update
                plot_model.show_fit_opt = False
                plot_model.show_fit_opt = True

        GroupBox: pre_fit:
            padding = Box(2, 2, 2, 2)
            constraints = [vbox(scr_area_title,
                                #hbox(manual_add),
                                scr_area,
                                hbox(pb_delete_unselected, spacer),
                                hbox(pb_update, spacer),),]
            Container: scr_area_title:
                padding = Box(2, 2, 2, 2)
                constraints = [vbox(
                                   hbox(del_lb, z, name, energy, inten, norm, spacer),
                                   )
                               ]
                Label: del_lb:
                    text = '{:>10}'.format(' ')
                    minimum_size = (30, 20)
                PushButton: z:
                    text = 'Z'
                    minimum_size = (30, 20)
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='z')
                        param_model.update_name_list()
                PushButton: name:
                    text = 'Names'
                    minimum_size = (120, 20)
                    maximum_size = 70
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='name')
                        param_model.update_name_list()
                PushButton: energy:
                    text = 'Energy'
                    maximum_size = 70
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='energy')
                        param_model.update_name_list()
                PushButton: inten:
                    text = 'Peak Int'
                    minimum_size = (90, 20)
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='maxv')
                        param_model.update_name_list()
                Label: norm:
                    text = 'Rel Int(%)'
                    minimum_size = (80, 20)
                    #background = 'white'
                    align = 'center'
                #PushButton: select_all:
                #    text = 'Show All'
                #    #maximum_size = 30
                #    minimum_size = (30, 20)
                #    checkable = True
                #    clicked ::
                #        if checked:
                #            param_model.EC.turn_on_all()
                #            param_model.data_for_plot()
                #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                #                                                param_model.total_l, param_model.total_m,
                #                                                param_model.total_pileup)
                #            plot_model.show_autofit_opt = True
                #            plot_model._fig.canvas.draw()
                #            select_all.text = 'Hide All'
                #        else:
                #            param_model.EC.turn_on_all(option=False)
                #            param_model.data_for_plot()
                #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                #                                                param_model.total_l, param_model.total_m,
                #                                                param_model.total_pileup)
                #            plot_model.show_autofit_opt = False
                #            plot_model._fig.canvas.draw()
                #            select_all.text = 'Show All'

            ScrollArea: scr_area:
                constraints = [height <= 150]

                Form:
                #Container: ctn_looper:
                    row_spacing = -1
                    #padding = Box(0, 0, 0, 0)
                    Looper: looper:
                        iterable << list(param_model.result_dict_names)

                        PushButton: delete_btn:
                            text = 'Del'
                            clicked ::
                                param_model.EC.delete_item(loop_item)
                                param_model.EC.update_peak_ratio()
                                param_model.data_for_plot()

                                #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                                #                                    param_model.total_l, param_model.total_m,
                                #                                    param_model.total_pileup)
                                #plot_model._fig.canvas.draw()

                                plot_model.plot_fit(param_model.prefit_x,
                                                    param_model.total_y,
                                                    param_model.auto_fit_all)
                                # For plotting purposes, otherwise plot will not update
                                plot_model.show_fit_opt = False
                                plot_model.show_fit_opt = True

                                param_model.update_name_list()

                        Container:
                            padding = Box(2, 2, 2, 2)
                            constraints = [hbox(delete_btn, lb_z, lb_name, lb_energy, lb_inten,
                                                lb_norm, select_cb, spacer),
                                                lb_norm.height==select_cb.height]

                            Label: lb_z:
                                text << param_model.EC.element_dict[loop_item].z
                                minimum_size = (30, 20)
                                #background = 'white'
                            Label: lb_name:
                                text << loop_item
                                minimum_size = (80, 20)
                                #background = 'white'
                            Label: lb_energy:
                                text << str(param_model.EC.element_dict[loop_item].energy)
                                minimum_size = (60, 20)
                                #maximum_size = 80
                                #background = 'white'
                            FloatField: lb_inten:
                                value := param_model.EC.element_dict[loop_item].maxv
                                minimum_size = (60, 20)
                                maximum_size = 80
                                background = 'white'
                                #align = 'right'
                                minimum = 0.0

                            Label: lb_norm:
                                text << set_low_bound(np.around(param_model.EC.element_dict[loop_item].norm, 2))
                                minimum_size = (60, 20)
                                #background = 'white'
                                align = 'center'

                            CheckBox: select_cb:
                                checkable = True
                                minimum_size = (20, 20)
                                checked := param_model.EC.element_dict[loop_item].status
                                clicked ::
                                    param_model.EC.element_dict[loop_item].status = checked
                                    param_model.EC.element_dict[loop_item].stat_copy = param_model.EC.element_dict[loop_item].status
                                    #param_model.EC.update_peak_ratio()
                                    #param_model.update_name_list()
                                    param_model.data_for_plot()

                                    #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                                    #                                    param_model.total_l, param_model.total_m,
                                    #                                    param_model.total_pileup)
                                    #plot_model._fig.canvas.draw()

                                    plot_model.plot_fit(param_model.prefit_x,
                                                        param_model.total_y,
                                                        param_model.auto_fit_all)
                                    # For plotting purposes, otherwise plot will not update
                                    plot_model.show_fit_opt = False
                                    plot_model.show_fit_opt = True

            #PushButton: pb_bound_delete:
            #    text = 'Delete lines < 0.1%'
            #    maximum_size = 350
            #    visible = True
            #    clicked ::
            #        param_model.EC.delete_value_given_threshold()
            #        param_model.update_name_list()
            #        param_model.data_for_plot()
            #        plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y, param_model.total_y_l)
            #        plot_model._fig.canvas.draw()

            PushButton: pb_delete_unselected:
                text = 'Delete not selected items'
                maximum_size = 350
                visible = True
                clicked ::
                    param_model.EC.delete_unselected_items()
                    param_model.update_name_list()
                    param_model.data_for_plot()

                    #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y, param_model.total_y_l)
                    #plot_model._fig.canvas.draw()

                    plot_model.plot_fit(param_model.prefit_x,
                                        param_model.total_y,
                                        param_model.auto_fit_all)
                    # For plotting purposes, otherwise plot will not update
                    plot_model.show_fit_opt = False
                    plot_model.show_fit_opt = True

            #PushButton: pb_bound:
            #    text = 'Do not plot lines < 0.1%'
            #    maximum_size = 350
            #    visible = True
            #    checkable = True
            #    clicked ::
            #        if checked:
            #            for k,v in six.iteritems(param_model.EC.element_dict):
            #                v.status = v.lbd_stat
            #            param_model.data_for_plot()
            #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y, param_model.total_y_l)
            #            plot_model._fig.canvas.draw()
            #            pb_bound.text = 'Plot lines < 0.1%'
            #        else:
            #            for k,v in six.iteritems(param_model.EC.element_dict):
            #                v.status = v.stat_copy
            #            param_model.data_for_plot()
            #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
            #                                       param_model.total_y_l, param_model.total_y_m)
            #            plot_model._fig.canvas.draw()
            #            pb_bound.text = 'Do not plot lines < 0.1%'

            PushButton: pb_update:
                text = 'Apply'
                clicked ::
                    param_model.update_name_list()
                    param_model.EC.update_peak_ratio()
                    param_model.data_for_plot()

                    param_model.create_full_param()

                    # update parameter for fit
                    fit_model.update_default_param(param_model.param_new)
                    fit_model.apply_default_param()

                    # update experimental plots if case the coefficients change
                    plot_model.parameters = param_model.param_new
                    plot_model.plot_experiment()

                    #plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
                    #                                    param_model.total_l, param_model.total_m,
                    #                                    param_model.total_pileup)

                    plot_model.plot_fit(param_model.prefit_x,
                                        param_model.total_y,
                                        param_model.auto_fit_all)

                    # For plotting purposes, otherwise plot will not update
                    plot_model.show_fit_opt = False
                    plot_model.show_fit_opt = True


def set_low_bound(value, thresh_v=0.1):
    """
    Return values only above given threshold.

    Parameters
    ----------
    value : float
    thresh_v : float, opt
        threshold value
    """
    if value <= thresh_v:
        return '< {}'.format(thresh_v)
    else:
        return str(value)
