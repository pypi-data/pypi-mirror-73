from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, ComboBox,
                               ScrollArea, Window, GroupBox,
                               Splitter, SplitItem, DualSlider)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.core.api import Include, Looper

from enaml.widgets.api import RadioButton as DefaultRadioButton

import six
import numpy as np
from matplotlib.figure import Figure

import logging
logger = logging.getLogger()

enamldef RadioButton(DefaultRadioButton):
    minimum_size = (5, 26)
    maximum_size = (20, 26)

enamldef ImageRGB(DockItem):
    attr img_model_adv
    #attr choose_element

    Container:
        constraints = [
        vbox(
            #hbox(pb_all, spacer),
            hbox(cbox_file, spacer, cb_norm, pixel_select, interpolate_cb),
            #hbox(cbox_file, cb_norm, pixel_select, interpolate_cb, spacer, pb_print),
            hbox(plot_btn, spacer, tb_check),
            #hbox(spacer, cb_select, cb_norm, tb_check),
            hbox(vbox(lb_select, sa_elements), vbox(canvas, ct_rgb),),
            ),
        ]

        ComboBox: cbox_file:
            items << ['Select Data'] + sorted(img_model_adv.data_dict_keys)
            #index := img_model_adv.data_opt
            index = 0
            index >> img_model_adv.data_opt
            minimum_size = (200,20)

        ComboBox: cb_norm:
            items << ['Normalized by '] + sorted(img_model_adv.scaler_items)
            index := img_model_adv.scaler_name_index

        ComboBox: pixel_select:
            items = ['pixel', 'x,y position']
            index = 0
            index := img_model_adv.pixel_or_pos

        CheckBox: interpolate_cb:
            text = 'Interpolate'
            checked := img_model_adv.grid_interpolate

        PushButton: plot_btn:
            text = 'Update Plot'
            clicked ::
                img_model_adv.show_image()

        CheckBox: tb_check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible

        Container: ct_rgb:
            constraints = [
                           vbox(
                           hbox(lb_name, lb_color, lb_range, spacer, reset),
                           hbox(ct_name, ct_r, ct_g, ct_b, slider, spacer),
                           ),
                           lb_name.width==ct_name.width,
                           ct_name.height==ct_r.height,
                           ct_name.height==ct_g.height,
                           ct_name.height==ct_b.height,
                           ct_r.height==slider.height,
                           ]
            Label: lb_name:
                text = 'Elements'
            Label: lb_color:
                text = '{:>7} {:>7} {:>7}'.format('Red','Green','Blue')
            Label: lb_range:
                text = '{:>36}'.format('0.0 ------------------------ 1.0')
            Container: ct_name:
                Looper: looper:
                    iterable << img_model_adv.rgb_name_list
                    Label:
                        text = loop_item
                        minimum_size = (10, 22)  # width, height
                        maximum_size = (100, 22)
            Container: ct_r:
                #constraints = [vbox(rb_r1, rb_r2, rb_r3, spacer)]
                RadioButton: rb_r1:
                    text = ''
                    checked = img_model_adv.index_red==0
                    clicked ::
                        if checked:
                            img_model_adv.index_red=0
                RadioButton: rb_r2:
                    text = ''
                    checked = img_model_adv.index_red==1
                    clicked ::
                        if checked:
                            img_model_adv.index_red=1
                RadioButton: rb_r3:
                    text = ''
                    checked = img_model_adv.index_red==2
                    clicked ::
                        if checked:
                            img_model_adv.index_red=2
            Container: ct_g:
                RadioButton: rb_g1:
                    text = ''
                    checked << img_model_adv.index_green==0
                    clicked ::
                        if checked:
                            img_model_adv.index_green=0
                RadioButton: rb_g2:
                    text = ''
                    checked << img_model_adv.index_green==1
                    clicked ::
                        if checked:
                            img_model_adv.index_green=1
                RadioButton: rb_g3:
                    text = ''
                    checked << img_model_adv.index_green==2
                    clicked ::
                        if checked:
                            img_model_adv.index_green=2
            Container: ct_b:
                RadioButton: rb_b1:
                    text = ''
                    checked << img_model_adv.index_blue==0
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=0
                RadioButton: rb_b2:
                    text = ''
                    checked << img_model_adv.index_blue==1
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=1
                RadioButton: rb_b3:
                    text = ''
                    checked << img_model_adv.index_blue==2
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=2
            Container: slider:
                constraints = [vbox(slider_r, slider_g, slider_b)]
                DualSlider: slider_r:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.r_low
                    high_value := img_model_adv.r_high
                DualSlider: slider_g:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.g_low
                    high_value := img_model_adv.g_high
                DualSlider: slider_b:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.b_low
                    high_value := img_model_adv.b_high
            PushButton: reset:
                text = 'Reset'
                clicked ::
                    img_model_adv.init_rgb()
                    img_model_adv.show_image()
        MPLCanvas: canvas:
            toolbar_visible = True
            figure << img_model_adv.fig

        Label: lb_select:
            text = 'Select Three Items for RGB'
        ScrollArea: sa_elements:
            constraints = [height >= 100]
            Form: form_element:
                Looper: looper:
                    iterable << sorted(img_model_adv.items_in_selected_group)
                    Label:
                        #font = 'monospace'
                        text = '{:>10}'.format(loop_item)
                        #minimum_size = (10, 22)
                        #maximum_size = (100, 22)
                    CheckBox: element_btn:
                        text = ''
                        #minimum_size = (5, 22)
                        #maximum_size = (10, 22)
                        #checkable = True
                        checked << img_model_adv.plot_all
                        clicked ::
                            if checked:
                                img_model_adv.stat_dict[loop_item] = True
                                element_btn.checked = True
                            else:
                                img_model_adv.stat_dict[loop_item] = False
                                element_btn.checked = False
