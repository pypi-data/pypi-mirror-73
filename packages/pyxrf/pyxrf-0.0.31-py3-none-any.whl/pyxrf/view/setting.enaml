from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, SpinBox,
                               ScrollArea, Window, PopupView, GroupBox)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
from enaml.core.api import Include, Looper
from enaml.layout.geometry import Box
from enaml.stdlib.fields import FloatField
from enaml.stdlib.message_box import MessageBox, warning, information

import numpy as np
import time

enamldef SettingView(DockItem):
    attr io_model
    attr plot_model
    attr param_model
    attr img_model_adv
    attr img_model_rgb
    attr setting_model

    Container:
        Container:
            constraints = [
                vbox(
                    hbox(setup_lbl, spacer, clear_element_list, use_selected),
                    hbox(element_fd),
                    scroller,
                    hbox(sub_background, spacer, calculate_btn),
                ),
                #folder_btn.width == files_btn.width,
            ]
            Label: setup_lbl:
                text = 'ROI Setup: enter elements below, e.g., Fe_K, Gd_L'
            PushButton: clear_element_list:
                text = 'Clear'
                clicked ::
                    for r in setting_model.element_list_roi:
                        plot_model.roi_dict[r].show_plot = False
                    plot_model.plot_roi_bound()
                    setting_model.clear_selected_elements()
            PushButton: use_selected:
                text = 'Use lines selected for fitting'
                enabled << param_model.n_selected_pure_elines_for_fitting > 0
                clicked ::
                    for r in setting_model.element_list_roi:
                        plot_model.roi_dict[r].show_plot = False
                    plot_model.plot_roi_bound()
                    selected_element_list = param_model.EC.get_element_list()
                    setting_model.select_elements_from_list(selected_element_list)
            Field: element_fd:
                text := setting_model.element_for_roi
            CheckBox: sub_background:
                text = 'Subtract background'
                checked := setting_model.subtract_background
            PushButton: calculate_btn:
                text = 'Calculate ROI'
                enabled << setting_model.enable_roi_computation
                clicked ::
                    if len(setting_model.element_for_roi) == 0:
                        warning(self, 'Warning Dialog', 'Please select at least one element.')
                    else:
                        #box = MessageBox()
                        #box.title = 'Warning Message'
                        #box.text = 'please enter prefix name first.'
                        #box.exec_()
                        roi_result = setting_model.get_roi_sum()
                        img_model_adv.data_dict.update(roi_result)
                        img_model_rgb.data_dict.update(roi_result)

                        # visualization purposes
                        img_model_adv.data_dict_keys = []
                        img_model_adv.data_dict_keys = list(img_model_adv.data_dict.keys())
                        img_model_rgb.data_dict_keys = []
                        img_model_rgb.data_dict_keys = list(img_model_rgb.data_dict.keys())

                        #img_model_adv.set_initial_stat()

                        if not setting_model.subtract_background:
                            # If background is not subtracted, then computations
                            #   are almost instant. Additional short delay of 0.5s
                            #   before message box pops up makes GUI feel more natural.
                            time.sleep(0.5)
                        information(self, "Job Completed",
                                    "ROI are successfully computed. Use 'Element Map' "
                                    "and 'Element RGB' tabs to view the results")


            ScrollArea: scroller:
                #Form:
                Container:
                    Looper: looper:
                        iterable << setting_model.element_list_roi
                        GroupBox:
                        #Container:
                            constraints = [vbox(hbox(mean_lb, roi_lb, left_v, right_v, spacer),
                                                hbox(view_btn, default_btn, spacer))]
                            title = '{}a1, in [eV]'.format(loop_item)
                            #title_align = 'center'
                            padding = Box(10, 10, 10, 10)
                            #Form:
                            #row_spacing=0
                            #Label: name_lb:
                            #    text = 'Element line: {}'.format(loop_item)
                            Label: mean_lb:
                                text = 'Energy: {},'.format(str(setting_model.roi_dict[loop_item].line_val))
                                #maximum_size = 140
                            Label: roi_lb:
                                text = 'ROI : '
                                #maximum_size = 80
                            SpinBox: left_v:
                                value := setting_model.roi_dict[loop_item].left_val
                                single_step = setting_model.roi_dict[loop_item].step
                                #maximum_size = 140
                                minimum = 0
                                maximum = 100000
                                value ::
                                    if plot_model and (loop_item in plot_model.roi_dict):
                                        plot_model.plot_roi_bound()
                            SpinBox: right_v:
                                value := setting_model.roi_dict[loop_item].right_val
                                single_step = setting_model.roi_dict[loop_item].step
                                #maximum_size = 140
                                minimum = 0
                                maximum = 100000
                                value ::
                                    if plot_model and (loop_item in plot_model.roi_dict):
                                        plot_model.plot_roi_bound()
                            PushButton: view_btn:
                                # text = 'Add Plot'
                                text << 'Remove' if plot_model.roi_dict[loop_item].show_plot \
                                                   else 'Add Plot'
                                #maximum_size = 100
                                checkable = True
                                checked := setting_model.roi_dict[loop_item].show_plot
                                clicked ::
                                    plot_model.roi_dict = setting_model.roi_dict
                                    if checked:
                                        plot_model.plot_exp_opt = True
                                        plot_model.roi_dict[loop_item].show_plot = True
                                        plot_model.plot_roi_bound()
                                    else:
                                        plot_model.roi_dict[loop_item].show_plot = False
                                        plot_model.plot_roi_bound()
                            PushButton: default_btn:
                                text = 'Use Default'
                                clicked ::
                                    # Reset values to default
                                    if loop_item in setting_model.roi_dict:
                                        setting_model.roi_dict[loop_item].left_val = setting_model.roi_dict[loop_item].default_left
                                        setting_model.roi_dict[loop_item].right_val = setting_model.roi_dict[loop_item].default_right
                                    if plot_model and (loop_item in plot_model.roi_dict):
                                        plot_model.roi_dict[loop_item].left_val = plot_model.roi_dict[loop_item].default_left
                                        plot_model.roi_dict[loop_item].right_val = plot_model.roi_dict[loop_item].default_right
                                        # plot_model.plot_roi_bound()