from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, Menu, Action,
                               ComboBox, Window, RadioButton)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.stdlib.fields import FloatField as DefaultFloatField
from atom.api import *
from ..model.lineplot import LinePlotModel

from enaml.stdlib.dialog_buttons import DialogButton
from enaml.stdlib.message_box import critical

import numpy as np
from matplotlib.figure import Figure
from skbeam.core.fitting.xrf_model import (K_LINE, L_LINE, M_LINE)


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync']


enamldef SampleAction(Action):
    text = '%s action %d' % (parent.title, parent.children.index(self))
    triggered ::
        print(text)


enamldef SampleMenu(Menu):
    SampleAction: pass
    SampleAction: pass
    SampleAction: pass
    Container:
        Form:
            Label:
                text = 'Energy'
            FloatField:
                value = 10.


enamldef PlotMain(DockItem):
    # attr io_model
    attr plot_model
    attr param_model
    attr fit_model
    attr adjust_emission_line
    Container:
        constraints = [
            vbox(
                hbox(plot_exp_btn, pb_plot_fit, spacer),
                #hbox(cbox1, spacer, pb_eline, add_eline, remove_eline, cbox2, btn_cb_prev, btn_cb_next, checkb),
                hbox(cbox1, spacer, pb_eline, add_eline, remove_eline, eline_selection, checkb),
                canvas,
            ),
        ]
        ComboBox: cbox1:
            items = ['LinLog', 'Linear']
            index >> plot_model.scale_opt
            index = 0
        PushButton: pb_eline:
            text = 'Options'
            checkable = True
            tool_tip = 'Set up energy to calculate emission lines.'
            checked := adjust_emission_line.visible
            clicked ::
                if checked:
                    adjust_emission_line.show()
                else:
                    adjust_emission_line.hide()

        PushButton: add_eline:
            text = 'Add line'
            enabled << plot_model.allow_add_eline and plot_model.plot_exp_opt
            clicked ::
                # The following set of conditions is not complete, but sufficient
                if param_model.x0 is None or param_model.y0 is None:

                    btns = [DialogButton('Ok', 'accept')]
                    # 'critical' shows MessageBox
                    critical(self, 'ERROR', f'Experimental data is not loaded or initial spectrum fitting is not performed', btns)

                else:

                    plot_model.add_peak_manual()
                    cbox2.set_focus()  # Return focus to the combo box

        PushButton: remove_eline:
            text = 'Remove line'
            enabled << plot_model.allow_remove_eline and plot_model.plot_exp_opt
            clicked ::
                plot_model.remove_peak_manual(param_model.e_name)
                cbox2.set_focus()  # Return focus to the combo box

        Container: eline_selection:
            constraints = [
                contents_left == cbox2.left,
                cbox2.right+5 == btn_cb_prev.left,
                btn_cb_prev.right+2 == btn_cb_next.left,
                btn_cb_next.right == contents_right,
            ]

            ComboBox: cbox2:
                #items = ['<Display emission lines>'] +\
                #        K_LINE + L_LINE + M_LINE
                items = ['<Display emission lines>'] + param_model.get_user_peak_list(include_user_peaks=False)

                index = 0
                index := plot_model.element_id
                enabled << plot_model.allow_select_elines and plot_model.plot_exp_opt
                index ::
                    if cbox2.index > 0:
                        param_model.e_name = cbox2.selected_item

            PushButton: btn_cb_prev:
                text = '<'
                enabled << plot_model.allow_select_elines and plot_model.plot_exp_opt
                maximum_size = (15, 24)
                clicked ::
                    if cbox2.index > 1:
                        cbox2.index -= 1
                    cbox2.set_focus()  # Return focus to the combo box

            PushButton: btn_cb_next:
                text = '>'
                enabled << plot_model.allow_select_elines and plot_model.plot_exp_opt
                maximum_size = (15, 24)
                clicked ::
                    if cbox2.index < len(cbox2.items) - 1:
                        cbox2.index += 1
                    cbox2.set_focus()  # Return focus to the combo box

        PushButton: plot_exp_btn:
            text = 'Plot Selected Exp. Data'
            checkable = True
            checked := plot_model.plot_exp_opt
            #clicked ::
            #    if checked:
            #        plot_model.plot_experiment()
            #        plot_model.plot_exp_opt = True
            #    else:
            #        plot_model.plot_exp_opt = False

        PushButton: pb_plot_fit:
            text = 'Plot Fit Result'
            checkable = True
            checked << plot_model.show_fit_opt
            minimum_size = (200, 20)
            clicked ::
                if checked:
                    try:
                        param_model.update_name_list()
                        param_model.EC.turn_on_all()
                        param_model.EC.update_peak_ratio()
                        param_model.data_for_plot()
                        fit_model.apply_default_param()
                        fit_model.get_profile()
                        plot_model.parameters = param_model.param_new
                        plot_model.plot_experiment()
                        plot_model.plot_fit(param_model.prefit_x,
                                            param_model.total_y,
                                            param_model.auto_fit_all)
                    except (AttributeError, ValueError):
                        pass
                    if plot_model.plot_exp_opt:
                        plot_model.plot_exp_opt = False
                        plot_model.plot_exp_opt = True
                    plot_model.show_fit_opt = True
                else:
                    plot_model.show_fit_opt = False

        CheckBox: checkb:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            toolbar_visible = True
            figure << plot_model._fig


enamldef AdjustEmissionLine(Window): emission_win:
    attr plot_model
    title = ' '
    Container:
        constraints = [
            vbox(
                hbox(elbl, fd, spacer),
                hbox(lbl_escape, cb_option, cb_materials),
                )
        ]
        Label: elbl:
            text = 'Incident energy'
        FloatField: fd:
            read_only = True
            value := plot_model.incident_energy
        Label: lbl_escape:
            text = 'Plot escape peak'
        ComboBox: cb_option:
            items = ['No', 'Yes']
            index := plot_model.plot_escape_line
        ComboBox: cb_materials:
            items = ['Si', 'Ge']
            index := plot_model.det_materials
            index = 0
