from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, ComboBox,
                               ScrollArea, Window, GroupBox,
                               Splitter, SplitItem, DualSlider)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.core.api import Include, Looper

from enaml.stdlib.fields import FloatField as DefaultFloatField

from enaml.validator import FloatValidator

import six
import numpy as np
from matplotlib.figure import Figure

import logging
logger = logging.getLogger()

enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync'] #['return_pressed']


enamldef ImageMain(DockItem):
    attr img_model_adv
    attr choose_element
    attr fit_model

    Container:
        constraints = [
            vbox(
                hbox(cbox_file, spacer, pb_all, interpolate_cb, scatter_cb),
                hbox(spacer, cb_quantitative, cb_select, color_select, cb_norm, pixel_select, tb_check),
                canvas,
            ),
            #cbox_type.v_center == check.v_center,
        ]

        ComboBox: cbox_file:
            items << ['Select Data'] + sorted(img_model_adv.data_dict_keys)
            index = 0
            index >> img_model_adv.data_opt
            minimum_size = (360,20)

        PushButton: pb_all:
            text = 'Image Wizard'
            checkable = True
            checked := choose_element.visible
            clicked ::
                if checked:
                    choose_element.show()
                else:
                    choose_element.hide()

        CheckBox: cb_quantitative:
            text = 'Quantitative'
            checked := img_model_adv.quantitative_normalization

        ComboBox: cb_select:
            items = ['Linear', 'Log']
            index = 0
            index ::
                img_model_adv.scale_opt = cb_select.selected_item

        ComboBox: color_select:
            items = ['viridis', 'jet', 'bone', 'gray', 'Oranges', 'hot']  # use viribis later for matpltolib >1.5
            index = 0
            index ::
                img_model_adv.color_opt = color_select.selected_item

        ComboBox: cb_norm:
            items << ['Normalized by '] + sorted(img_model_adv.scaler_items)
            index := img_model_adv.scaler_name_index

        ComboBox: pixel_select:
            items = ['pixel', 'x,y position']
            index = 0
            index := img_model_adv.pixel_or_pos
            visible << not scatter_cb.checked
            
        CheckBox: interpolate_cb:
            text = 'Interpolate'
            checked := img_model_adv.grid_interpolate
            visible << not scatter_cb.checked

        CheckBox: scatter_cb:
            text = 'Scatter plot'
            checked := img_model_adv.scatter_show

        CheckBox: tb_check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible

        MPLCanvas: canvas:
            toolbar_visible = True
            figure << choose_element.img_model.fig


enamldef ChooseElementAdvanced(Window): win:
    attr img_model

    title = 'Select Elements to Plot'
    initial_size = (900, 500)
    Container:
        constraints = [
            vbox(
                hbox(plot_btn),
                gb,
            ),
        ]

        PushButton: plot_btn:
            text = 'Update Plot'
            clicked ::
                img_model.show_image()
        GroupBox: gb:
            constraints = [vbox(
                                hbox(select_all_btn, deselect_all_btn, spacer),
                                hbox(scroll_select),)
                                # hbox(save_selected, spacer),)
                          ]
            title = 'Add/Remove Image'
            PushButton: select_all_btn:
                text = 'Select All'
                checkable = False
                clicked ::
                    img_model.plot_select_all()
            PushButton: deselect_all_btn:
                text = 'Deselect All'
                checkable = False
                clicked ::
                    img_model.plot_deselect_all()
            ScrollArea: scroll_select:
                constraints = [height >= 80]
                Container:
                    Form:
                        Looper: looper:
                            iterable << sorted(img_model.items_in_selected_group)
                            Label:
                                font = 'monospace'
                                text = str('{:>10}'.format(loop_item))
                            Container:
                                constraints = [hbox(element_btn, min_lbl, dual_slider, max_lbl, ff_low, ff_high, reset_btn),]
                                PushButton: element_btn:
                                    text = 'Select'
                                    minimum_size = (40, 20)
                                    checkable = True
                                    checked << get_status(img_model.stat_dict, loop_item)
                                    clicked ::
                                        if checked:
                                            img_model.stat_dict[loop_item] = True
                                            element_btn.checked = True
                                            #element_btn.text = 'Remove'
                                        else:
                                            img_model.stat_dict[loop_item] = False
                                            element_btn.checked = False
                                            #element_btn.text = 'Add'
                                Label: min_lbl:
                                    text << str(dual_slider.minimum)
                                Label: max_lbl:
                                    text << str(dual_slider.maximum)+str('%')
                                DualSlider: dual_slider:
                                    minimum_size = (150, 20)
                                    tick_interval = 1000
                                    minimum = 0
                                    maximum = 100
                                    low_value >> img_model.limit_dict[loop_item]['low']
                                    high_value >> img_model.limit_dict[loop_item]['high']
                                    high_value ::
                                        lw = img_model.range_dict[loop_item]['low']
                                        hg = img_model.range_dict[loop_item]['high']
                                        ff_high.text = img_model.format_img_wizard_limit(lw + (hg - lw) * high_value / 100.0)

                                    low_value ::
                                        lw = img_model.range_dict[loop_item]['low']
                                        hg = img_model.range_dict[loop_item]['high']
                                        ff_low.text = img_model.format_img_wizard_limit(lw + (hg - lw) * low_value / 100.0)
                                Field: ff_low:
                                    text << img_model.format_img_wizard_limit(img_model.range_dict[loop_item]['low'])
                                    validator = FloatValidator(minimum=img_model.range_dict[loop_item]['low'],
                                                               maximum=img_model.range_dict[loop_item]['high'])
                                    text ::
                                        val = float(text)  # Validator guarantees that the text can be parsed to float
                                        lw = img_model.range_dict[loop_item]['low']
                                        hg = img_model.range_dict[loop_item]['high']
                                        val = np.clip(val, a_min=lw, a_max=hg)
                                        s_val = (val - lw) / (hg - lw) * 100
                                        dual_slider.low_value = int(round(s_val))
                                        img_model.limit_dict[loop_item]['low'] = s_val
                                        # Note: the text field is not getting updated, so it remains correct
                                Field: ff_high:
                                    text << img_model.format_img_wizard_limit(img_model.range_dict[loop_item]['high'])
                                    validator = FloatValidator(minimum=img_model.range_dict[loop_item]['low'],
                                                               maximum=img_model.range_dict[loop_item]['high'])
                                    text ::
                                        val = float(text)  # Validator guarantees that the text can be parsed to float
                                        lw = img_model.range_dict[loop_item]['low']
                                        hg = img_model.range_dict[loop_item]['high']
                                        val = np.clip(val, a_min=lw, a_max=hg)
                                        s_val = (val - lw) / (hg - lw) * 100
                                        dual_slider.high_value = int(round(s_val))
                                        img_model.limit_dict[loop_item]['high'] = s_val
                                        # Note: the text field is not getting updated, so it remains correct
                                PushButton: reset_btn:
                                    text = 'Reset'
                                    clicked ::
                                        dual_slider.low_value = 0
                                        dual_slider.high_value = 100
                                        #img_model.reset_low_high(loop_item)

            # 'Save Selected as Default' button does not serve any useful purpose now, but
            #    it may make sense to implement it properly in the future. So I commented
            #    the code to temporarily eliminate non-functional controls.
            # PushButton: save_selected:
            #     text = 'Save Selected as Default'
            #     clicked ::
            #         img_model.record_selected()


def get_status(dictv, name):
    try:
        return dictv[name]
    except:
        return False
