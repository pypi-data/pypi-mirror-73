from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, RadioButton,
                               ScrollArea, Window, GroupBox, MultilineField)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
from enaml.core.api import Include, Looper
from enaml.layout.geometry import Box
from enaml.stdlib.fields import FloatField
from enaml.stdlib.fields import IntField as DefaultIntField
from enaml.stdlib.dialog_buttons import DialogButton
from enaml.stdlib.message_box import critical, warning, question, information
import os
import numpy as np
from ..model.fileio import sep_v

try:
    import databroker
except ImportError:
    databroker = None

enamldef IntField(DefaultIntField):
    submit_triggers = ['auto_sync'] #['return_pressed']



enamldef FileView(DockItem): file_view:
    attr io_model
    attr param_model
    attr plot_model
    #attr img_model_adv
    attr fit_model
    attr setting_model
    attr mask_edit

    Container:
        Container:
            constraints = [
                vbox(
                    hbox(folder_btn, spacer),
                    hbox(folder_fd),
                    hbox(cb_each, spacer),
                    hbox(files_btn, files_load, spacer, view_metadata_btn),
                    #hbox(pixel_h_label, pixel_h, pixel_v_label, pixel_v, spacer),
                    #hbox(cb_runid, run_lbl, run_num, load_btn, spacer),
                    hbox(gb_db),
                    hbox(gb_fit),
                    hbox(mask_opt, spacer),
                    scroller
                ),
                folder_btn.width == files_btn.width,
                #folder_btn.width == mask_btn.width,
                files_btn.height == files_load.height,
            ]
            PushButton: folder_btn:
                text = "Working Directory"
                clicked ::
                    path = FileDialogEx.get_existing_directory(file_view, current_path=io_model.working_directory)
                    if path:
                        io_model.working_directory = path
            Field: folder_fd:
                text := io_model.working_directory
                read_only = True
                #maximum_size = 400

            CheckBox: cb_each:
                text = 'Load data from each channel'
                checkable = True
                checked := io_model.load_each_channel
            PushButton: files_btn:
                text = "Load Data File"
                clicked ::
                    path = FileDialogEx.get_open_file_names(file_view, 
                                                            file_mode="existing_files", 
                                                            name_filters=["*.h5", "*"],
                                                            selected_name_filter="*.h5",
                                                            current_path=io_model.working_directory)
                    if path:
                        io_model.data_ready = False
                        # only load one file
                        # 'temp' is used to reload the same file, otherwise file_name will not update
                        io_model.file_name = 'temp'
                        f_dir, f_name = os.path.split(path[0])  # Open only the first of the selected files 
                        io_model.working_directory = f_dir
                        try: 
                            io_model.file_name = f_name
                        except:
                            btns = [DialogButton('Ok', 'accept')]
                            # 'critical' shows MessageBox
                            critical(self, 'ERROR', f'Incorrect format of input file "{path[0]}": PyXRF accepts only custom HDF (.h5) files.', btns)
                            # Clear file name or scan id from window title
                            io_model.window_title_clear()
                        else:    
                            files_load.text = '{} is loaded.'.format(io_model.file_name)

                            # Disable the button which calls Working Directory dialog. Changing working directory at this point
                            #     will most likely make the program crash at some point
                            folder_btn.enabled = False

                            plot_model.parameters = param_model.param_new
                            setting_model.parameters = param_model.param_new
                            setting_model.data_sets = io_model.data_sets
                            fit_model.data_sets = io_model.data_sets
                            fit_model.fit_img = {} # clear dict in fitmodel to rm old results

                            # Change window title (include file name)
                            io_model.window_title_set_file_name(f_name)

                            if not io_model.incident_energy_available:
                                warning(self, "Warning",
                                    "Incident energy is not available in scan metadata and must be set manually\n\n"
                                    "    Incident energy may be set by changing 'Incident E [keV]' parameter\n"
                                    "    in 'Automated Element Search Parameters' dialog box, which is accessed\n"
                                    "    by using 'Find Elements Automatically' button in 'Fit' tab.\n")

            Label: files_load:
                text = 'No data is loaded.'

            PushButton: view_metadata_btn:
                text = "View Metadata"
                enabled << io_model.scan_metadata_available
                clicked ::
                    metadata_string = "SCAN METADATA\n\n"
                    metadata_string += io_model.scan_metadata.get_formatted_output()
                    information(self, "Scan Metadata", metadata_string)

            PushButton: mask_opt:
                text = 'Mask Option'
                enabled = True
                checkable = True
                checked := mask_edit.visible
                clicked ::
                    if checked:
                        mask_edit.show()
                    else:
                        mask_edit.hide()

            GroupBox: gb_db:
                enabled = databroker is not None
                title = 'Data from database'
                constraints = [hbox(run_lbl, run_num, load_btn, cb_file_overwrite_existing, spacer),]
                Label: run_lbl:
                    text = 'Scan ID: '

                IntField: run_num:
                    enabled = databroker is not None
                    value = -1
                    # value := io_model.runid

                PushButton: load_btn:
                    enabled = databroker is not None
                    text = "Load Data from Database"
                    clicked ::

                        # Copy value to 'runid' field ('runid' field should not change
                        #   during processing unless new data is loaded)
                        io_model.runid = run_num.value

                        io_model.data_ready = False

                        try:
                            io_model.load_data_runid()

                        except:
                            btns = [DialogButton('Ok', 'accept')]
                            critical(self, 'ERROR', f'Error occurred while reading data (Run ID: {io_model.runid}) from the database', btns)
                            # Clear file name or scan id from window title
                            io_model.window_title_clear()

                        else:
                            files_load.text = f"Scan #{io_model.runid} from the database."
                            plot_model.plot_exp_opt = False

                            # Disable the button which calls Working Directory dialog. Changing working directory at this point
                            #     will most likely make the program crash at some point
                            folder_btn.enabled = False

                            # do not import original data for 2D image
                            # img_model_adv.data_dict = io_model.img_dict

                            plot_model.parameters = param_model.param_new
                            setting_model.parameters = param_model.param_new
                            setting_model.data_sets = io_model.data_sets
                            fit_model.data_sets = io_model.data_sets
                            fit_model.fit_img = {} # clear dict in fitmodel to rm old results

                            # Change window title (include run id)
                            io_model.window_title_set_run_id(io_model.runid)

                        run_num.value = -1

                CheckBox: cb_file_overwrite_existing:
                    text = 'Overwrite Existing Files'
                    checkable = True
                    checked := io_model.file_overwrite_existing
                    checked ::
                        if checked:
                            res = question(
                                self, "Warning",
                                "Loading data from the database with 'Overwrite Existing Files' option enabled\n"
                                "may result in overwriting existing files that contain processing results.\n"
                                "Are you sure you want to enable this option?")
                            if res.text == "No":
                                cb_file_overwrite_existing.checked = False

            GroupBox: gb_fit:
                constraints = [hbox(fit_lbl, cb_select, spacer)]
                Label : fit_lbl:
                    text = 'Select channel data for fitting'
                    foreground = 'blue'
                ComboBox: cb_select:
                    items << list(io_model.file_channel_list)
                    index = 0
                    index := io_model.file_opt
                    minimum_size = (300, 16)
                    foreground = 'blue'
                    index ::
                        plot_model.plot_exp_opt = True

            ScrollArea: scroller:
                constraints = [height <= 300]
                Container:
                    Looper: looper:
                        iterable << io_model.file_channel_list
                        GroupBox:
                            # Commented because some of the data is not available
                            # title = '{}, data shape: {}, total counts: {}'.format(loop_item, io_model.data_sets[loop_item].raw_data.shape, int(np.sum(io_model.data_sets[loop_item].raw_data)))
                            title = '{} - data shape: {}'.format(loop_item, io_model.data_sets[loop_item].raw_data.shape)
                            constraints = [hbox(rb_1, rb_2, rb_3, rb_4, lb1, fd1, lb2, fd2, spacer)]
                            constraints = [hbox(rb_1, rb_2, spacer)]
                            padding = Box(0, 0, 0, 0)

                            RadioButton: rb_1:
                                text = 'HIDE'
                                checked = True
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 0
                                    plot_model.data_sets = io_model.data_sets
                                    plot_model.plot_multi_exp_data()

                                    # Check if there are any other plots shown. If not,
                                    #   then hide the plot.
                                    n_plots = 0
                                    for v in io_model.file_channel_list:
                                        if io_model.data_sets[v].plot_index:
                                            n_plots += 1
                                    if not n_plots:
                                        # Hide plot (there are no channels selected)
                                        plot_model.show_exp_opt = False

                            RadioButton: rb_2:
                                text = 'SHOW'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 1
                                    plot_model.data_sets = io_model.data_sets
                                    plot_model.plot_multi_exp_data()
                                    plot_model.show_exp_opt = True

enamldef MaskView(Window): mask_view:
    attr io_model
    title = 'Option to select given area'
    destroy_on_close = False

    Container:
        constraints = [
            vbox(
                rb_pos,
                gb_pos,
                rb_file,
                hbox(mask_btn, mask_load_note, spacer),
                rb_nomask,
                hbox(save_btn, spacer),
            ),
            mask_btn.height == mask_load_note.height,
        ]

        RadioButton: rb_pos:
            text = "Define mask region based on positions"
            checked = io_model.mask_opt==0
            clicked ::
                if checked:
                    io_model.mask_opt = 1
        RadioButton: rb_file:
            text = "Load mask from a file"
            checked = io_model.mask_opt==0
            clicked ::
                if checked:
                    io_model.mask_opt = 2
        RadioButton: rb_nomask:
            text = 'Do not Apply Mask'
            checked = io_model.mask_opt==0
            clicked ::
                if checked:
                    io_model.mask_opt = 0

        PushButton: mask_btn:
            text = "Load"
            clicked ::
                path = FileDialogEx.get_open_file_names(mask_view, current_path=io_model.working_directory)
                if path:
                    io_model.mask_name = [item.split(sep_v)[-1] for item in path][0]
                    mask_load_note.text = [item.split(sep_v)[-1] for item in path][0]
        Label: mask_load_note:
            text = 'No file is loaded.'

        GroupBox: gb_pos:
            constraints = [
                vbox(
                    hbox(p1, r1, r1f, c1, c1f),
                    hbox(p2, r2, r2f, c2, c2f),
                )
            ]
            Label: p1:
                text = 'starting position: '
            Label: r1:
                text = 'row number'
                minimum_size = (30, 10)
                #maximum_size = 50
            IntField: r1f:
                value := io_model.p1_row
                maximum_size = 40
                enabled = True
                #plot_model.data_sets = io_model.data_sets
            Label: c1:
                text = 'column number'
                minimum_size = (30, 10)
                #maximum_size = 50
            IntField: c1f:
                value := io_model.p1_col
                maximum_size = 40
                enabled = True
                #plot_model.data_sets = io_model.data_sets
            Label: p2:
                text = 'ending position: '
            Label: r2:
                text = 'row number'
                minimum_size = (30, 10)
                #maximum_size = 50
            IntField: r2f:
                value := io_model.p2_row
                maximum_size = 40
                enabled = True
            Label: c2:
                text = 'column number'
                minimum_size = (30, 10)
                #maximum_size = 50
            IntField: c2f:
                value := io_model.p2_col
                maximum_size = 40
                enabled = True

        PushButton: save_btn:
            text = 'Save'
            clicked ::
                io_model.apply_mask()
                mask_view.close()
